<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenCV.Net</name>
    </assembly>
    <members>
        <member name="T:OpenCV.Net.CV">
            <summary>
            This class provides wrapper methods for the OpenCV C interface native functions.
            </summary>
        </member>
        <member name="M:OpenCV.Net.CV.ConvertPointsHomogeneous(OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Convert points to/from homogeneous coordinates.
            </summary>
            <param name="src">
            The input point array, 2xN, Nx2, 3xN, Nx3, 4xN or Nx4 (where N is the number of points).
            Multi-channel 1xN or Nx1 array is also acceptable.
            </param>
            <param name="dst">
            The output point array, must contain the same number of points as the input.
            The dimensionality must be the same, 1 less or 1 more than the input.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.FindFundamentalMat(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.FundamentalMatrixMethod,System.Double,System.Double,OpenCV.Net.Mat)">
            <summary>
            Calculates the fundamental matrix from the corresponding points in two images.
            </summary>
            <param name="points1">
            Array of N points from the first image. It can be 2xN, Nx2, 3xN or Nx3 1-channel array or
            1xN or Nx1 2- or 3-channel array. The point coordinates should be floating-point
            (single or double precision).
            </param>
            <param name="points2">
            Array of the second image points of the same size and format as <paramref name="points1"/>.
            </param>
            <param name="fundamentalMatrix">
            The output fundamental matrix or matrices. The size should be 3x3 or 9x3
            (7-point method may return up to 3 matrices).
            </param>
            <param name="method">Method for computing the fundamental matrix.</param>
            <param name="param1">
            The parameter is used for RANSAC. It is the maximum distance from the point to the epipolar line
            in pixels, beyond which the point is considered an outlier and is not used for computing the
            final fundamental matrix. It can be set to something like 1-3, depending on the accuracy of the
            point localization, image resolution and image noise.
            </param>
            <param name="param2">
            The parameter is used for RANSAC or LMedS methods only. It specifies the desirable level of
            confidence (probability) that the estimated matrix is correct.
            </param>
            <param name="status">
            The optional output array of N elements, every element of which is set to 0 for outliers and to
            1 for the other points. The array is computed only in RANSAC and LMedS methods. For other methods
            it is set to all 1's.
            </param>
            <returns>
            The number of fundamental matrices found (1 or 3) or 0, if no matrix is found. Normally just one
            matrix is found, but in the case of 7-point algorithm the function may return up to 3 solutions
            (9x3 matrix that stores all 3 matrices sequentially).
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.ComputeCorrespondEpilines(OpenCV.Net.Mat,System.Int32,OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            For points in one image of a stereo pair, computes the corresponding epilines in the other image.
            </summary>
            <param name="points">
            The input points. 2xN, Nx2, 3xN or Nx3 array (where N number of points). Multi-channel 1xN or Nx1
            array is also acceptable.
            </param>
            <param name="whichImage">Index of the image (1 or 2) that contains the points.</param>
            <param name="fundamentalMatrix">
            The fundamental matrix that can be estimated using <see cref="M:OpenCV.Net.CV.FindFundamentalMat(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.FundamentalMatrixMethod,System.Double,System.Double,OpenCV.Net.Mat)"/> or
            <see cref="M:OpenCV.Net.CV.StereoRectify(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.StereoRectificationFlags,System.Double,OpenCV.Net.Size)"/>.
            </param>
            <param name="correspondentLines">
            The output epilines, a 3xN or Nx3 array. Each line ax + by + c = 0 is encoded by 3 numbers (a, b, c).
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.TriangulatePoints(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Reconstructs points by triangulation.
            </summary>
            <param name="projMatr1">3x4 projection matrix of the first camera.</param>
            <param name="projMatr2">3x4 projection matrix of the second camera.</param>
            <param name="projPoints1">2xN array of feature points in the first image.</param>
            <param name="projPoints2">2xN array of corresponding points in the second image.</param>
            <param name="points4D">4xN array of reconstructed points in homogeneous coordinates.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CorrectMatches(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Refines coordinates of corresponding points.
            </summary>
            <param name="F">3x3 fundamental matrix.</param>
            <param name="points1">1xN array containing the first set of points.</param>
            <param name="points2">1xN array containing the second set of points.</param>
            <param name="newPoints1">The optimized <paramref name="points1"/>.</param>
            <param name="newPoints2">The optimized <paramref name="points2"/></param>
        </member>
        <member name="M:OpenCV.Net.CV.GetOptimalNewCameraMatrix(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,System.Double,OpenCV.Net.Mat)">
            <summary>
            Returns the new camera matrix based on the free scaling parameter.
            </summary>
            <param name="cameraMatrix">The input camera matrix.</param>
            <param name="distCoeffs">
            The input 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients (k1, k2, p1, p2[, k3]).
            If the vector is <b>null</b>, the zero distortion coefficients are assumed.
            </param>
            <param name="imageSize">The original image size.</param>
            <param name="alpha">
            The free scaling parameter between 0 (when all the pixels in the undistorted image will be valid) and 1
            (when all the source image pixels will be retained in the undistorted image); see
            <see cref="M:OpenCV.Net.CV.StereoRectify(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.StereoRectificationFlags,System.Double,OpenCV.Net.Size)"/>.
            </param>
            <param name="newCameraMatrix">The output new camera matrix.</param>
        </member>
        <member name="M:OpenCV.Net.CV.GetOptimalNewCameraMatrix(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,System.Double,OpenCV.Net.Mat,OpenCV.Net.Size)">
            <summary>
            Returns the new camera matrix based on the free scaling parameter.
            </summary>
            <param name="cameraMatrix">The input camera matrix.</param>
            <param name="distCoeffs">
            The input 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients (k1, k2, p1, p2[, k3]).
            If the vector is <b>null</b>, the zero distortion coefficients are assumed.
            </param>
            <param name="imageSize">The original image size.</param>
            <param name="alpha">
            The free scaling parameter between 0 (when all the pixels in the undistorted image will be valid) and 1
            (when all the source image pixels will be retained in the undistorted image); see
            <see cref="M:OpenCV.Net.CV.StereoRectify(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.StereoRectificationFlags,System.Double,OpenCV.Net.Size)"/>.
            </param>
            <param name="newCameraMatrix">The output new camera matrix.</param>
            <param name="newImageSize">
            The image size after rectification. By default it will be set to <paramref name="imageSize"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.GetOptimalNewCameraMatrix(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,System.Double,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Rect@,System.Boolean)">
            <summary>
            Returns the new camera matrix based on the free scaling parameter.
            </summary>
            <param name="cameraMatrix">The input camera matrix.</param>
            <param name="distCoeffs">
            The input 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients (k1, k2, p1, p2[, k3]).
            If the vector is <b>null</b>, the zero distortion coefficients are assumed.
            </param>
            <param name="imageSize">The original image size.</param>
            <param name="alpha">
            The free scaling parameter between 0 (when all the pixels in the undistorted image will be valid) and 1
            (when all the source image pixels will be retained in the undistorted image); see
            <see cref="M:OpenCV.Net.CV.StereoRectify(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.StereoRectificationFlags,System.Double,OpenCV.Net.Size)"/>.
            </param>
            <param name="newCameraMatrix">The output new camera matrix.</param>
            <param name="newImageSize">
            The image size after rectification. By default it will be set to <paramref name="imageSize"/>.
            </param>
            <param name="validPixelROI">
            The optional output rectangle that will outline all-good-pixels region in the undistorted image.
            </param>
            <param name="centerPrincipalPoint">
            Optional flag that indicates whether in the new camera matrix the principal point should be at the
            image center or not. By default, the principal point is chosen to best fit a subset of the source
            image (determined by alpha) to the corrected image.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Rodrigues2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Converts a rotation matrix to a rotation vector or vice versa.
            </summary>
            <param name="src">The input rotation vector (3x1 or 1x3) or rotation matrix (3x3).</param>
            <param name="dst">The output rotation matrix (3x3) or rotation vector (3x1 or 1x3), respectively.</param>
            <param name="jacobian">
            Optional output Jacobian matrix, 3x9 or 9x3; partial derivatives of the output array components with
            respect to the input array components.
            </param>
            <returns>A value indicating whether the conversion was successful.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.FindHomography(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.FindHomographyMethod,System.Double,OpenCV.Net.Mat)">
            <summary>
            Finds the perspective transformation between two planes.
            </summary>
            <param name="srcPoints">
            Coordinates of the points in the original plane, 2xN, Nx2, 3xN or Nx3 1-channel array (the latter two are
            for representation in homogeneous coordinates), where N is the number of points. 1xN or Nx1 2- or 3-channel
            array can also be passed.
            </param>
            <param name="dstPoints">
            Point coordinates in the destination plane, 2xN, Nx2, 3xN or Nx3 1-channel, or 1xN or Nx1 2- or 3-channel array.
            </param>
            <param name="homography">The output 3x3 homography matrix.</param>
            <param name="method">The method used to compute the homography matrix.</param>
            <param name="ransacReprojThreshold">
            The maximum allowed reprojection error to treat a point pair as an inlier (used in the RANSAC method only).
            </param>
            <param name="mask">
            The optional output mask set by a robust method (<see cref="F:OpenCV.Net.FindHomographyMethod.Ransac"/> or
            <see cref="F:OpenCV.Net.FindHomographyMethod.LMedS"/>).
            </param>
            <returns>A value indicating whether the homography matrix calculation was successful.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.RQDecomp3x3(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Point3d[])">
            <summary>
            Computes the ‘RQ’ decomposition of 3x3 matrices.
            </summary>
            <param name="matrixM">The 3x3 input matrix.</param>
            <param name="matrixR">The output 3x3 upper-triangular matrix.</param>
            <param name="matrixQ">The output 3x3 orthogonal matrix.</param>
            <param name="matrixQx">Optional output 3x3 rotation matrix around x-axis.</param>
            <param name="matrixQy">Optional output 3x3 rotation matrix around y-axis.</param>
            <param name="matrixQz">Optional output 3x3 rotation matrix around z-axis.</param>
            <param name="eulerAngles">Optional output array containing the three Euler angles of rotation.</param>
        </member>
        <member name="M:OpenCV.Net.CV.DecomposeProjectionMatrix(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Point3d[])">
            <summary>
            Decomposes the projection matrix into a rotation matrix and a camera matrix.
            </summary>
            <param name="projMatr">The 3x4 input projection matrix P.</param>
            <param name="calibMatr">The output 3x3 camera matrix K.</param>
            <param name="rotMatr">The output 3x3 external rotation matrix R.</param>
            <param name="posVect">The output 4x1 translation vector T.</param>
            <param name="rotMatrX">Optional output 3x3 rotation matrix around x-axis.</param>
            <param name="rotMatrY">Optional output 3x3 rotation matrix around y-axis.</param>
            <param name="rotMatrZ">Optional output 3x3 rotation matrix around z-axis.</param>
            <param name="eulerAngles">Optional output array containing the three Euler angles of rotation.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CalcMatMulDeriv(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Computes partial derivatives of the matrix product for each multiplied matrix.
            </summary>
            <param name="A">First multiplied matrix.</param>
            <param name="B">Second multiplied matrix.</param>
            <param name="dABdA">First output derivative matrix d(A*B)/dA of size (A.Rows*B.Cols)x(A.Rows*A.Cols).</param>
            <param name="dABdB">Second output derivative matrix d(A*B)/dB of size (A.Rows*B.Cols)x(B.Rows*B.Cols).</param>
        </member>
        <member name="M:OpenCV.Net.CV.ComposeRT(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Combines two rotation-and-shift transformations.
            </summary>
            <param name="rvec1">First rotation vector.</param>
            <param name="tvec1">First translation vector.</param>
            <param name="rvec2">Second rotation vector.</param>
            <param name="tvec2">Second translation vector.</param>
            <param name="rvec3">Output rotation vector of the superposition.</param>
            <param name="tvec3">Output translation vector of the superposition.</param>
            <param name="dr3dr1">Optional output derivatives of <paramref name="rvec3"/> with regard to <paramref name="rvec1"/>.</param>
            <param name="dr3dt1">Optional output derivatives of <paramref name="rvec3"/> with regard to <paramref name="tvec1"/>.</param>
            <param name="dr3dr2">Optional output derivatives of <paramref name="rvec3"/> with regard to <paramref name="rvec2"/>.</param>
            <param name="dr3dt2">Optional output derivatives of <paramref name="rvec3"/> with regard to <paramref name="tvec2"/>.</param>
            <param name="dt3dr1">Optional output derivatives of <paramref name="tvec3"/> with regard to <paramref name="rvec1"/>.</param>
            <param name="dt3dt1">Optional output derivatives of <paramref name="tvec3"/> with regard to <paramref name="tvec1"/>.</param>
            <param name="dt3dr2">Optional output derivatives of <paramref name="tvec3"/> with regard to <paramref name="rvec2"/>.</param>
            <param name="dt3dt2">Optional output derivatives of <paramref name="tvec3"/> with regard to <paramref name="tvec2"/>.</param>
        </member>
        <member name="M:OpenCV.Net.CV.ProjectPoints2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,System.Double)">
            <summary>
            Projects 3D points to an image plane.
            </summary>
            <param name="objectPoints">
            The array of object points, 3xN or Nx3 1-channel or 1xN or Nx1 3-channel, where N is the number of points in the view.
            </param>
            <param name="rotationVector">The rotation vector of the points; see <see cref="M:OpenCV.Net.CV.Rodrigues2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat)"/>.</param>
            <param name="translationVector">The translation vector of the points; see <see cref="M:OpenCV.Net.CV.Rodrigues2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat)"/>.</param>
            <param name="cameraMatrix">The camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1].</param>
            <param name="distortionCoeffs">
            The input vector of distortion coefficients of 4,5 or 8 elements. If it is <b>null</b>, the zero distortion
            coefficients are assumed.
            </param>
            <param name="imagePoints">
            The output array of image points, 2xN or Nx2 1-channel or 1xN or Nx1 2-channel.
            </param>
            <param name="dpdrot">
            Optional 2Nx3 matrix of derivatives of image points with respect to components of the rotation vector.
            </param>
            <param name="dpdt">
            Optional 2Nx3 matrix of derivatives of image points with respect to components of the translation vector.
            </param>
            <param name="dpdf">
            Optional 2Nx2 matrix of derivatives of image points with respect to fx and fy.
            </param>
            <param name="dpdc">
            Optional 2Nx2 matrix of derivatives of image points with respect to cx and cy.
            </param>
            <param name="dpddist">
            Optional 2Nx4 matrix of derivatives of image points with respect to the distortion coefficients.
            </param>
            <param name="aspectRatio">
            Optional “fixed aspect ratio” parameter. If the parameter is not 0, the function assumes that the aspect ratio (fx/fy)
            is fixed and correspondingly adjusts the jacobian matrix.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.FindExtrinsicCameraParams2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,System.Boolean)">
            <summary>
            Finds the object pose from the 3D-2D point correspondences.
            </summary>
            <param name="objectPoints">
            The array of object points in the object coordinate space, 3xN or Nx3 1-channel, or 1xN or Nx1 3-channel,
            where N is the number of points.
            </param>
            <param name="imagePoints">
            The array of corresponding image points, 2xN or Nx2 1-channel or 1xN or Nx1 2-channel, where N is the
            number of points.
            </param>
            <param name="cameraMatrix">The camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1].</param>
            <param name="distortionCoeffs">
            The input vector of distortion coefficients of 4,5 or 8 elements. If it is <b>null</b>, the zero distortion
            coefficients are assumed.
            </param>
            <param name="rotationVector">
            The output rotation vector (see <see cref="M:OpenCV.Net.CV.Rodrigues2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat)"/>) that (together with <paramref name="translationVector"/>)
            brings points from the model coordinate system to the camera coordinate system.
            </param>
            <param name="translationVector">The output translation vector.</param>
            <param name="useExtrinsicGuess">
             If <b>true</b>, the function will use the provided <paramref name="rotationVector"/> and <paramref name="translationVector"/>
             as the initial approximations of the rotation and translation vectors, respectively, and will further optimize them.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.InitIntrinsicParams2D(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,System.Double)">
            <summary>
            Finds the initial camera matrix from the 3D-2D point correspondences.
            </summary>
            <param name="objectPoints">
            The joint array of object points; see <see cref="M:OpenCV.Net.CV.CalibrateCamera2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.CameraCalibrationFlags)"/>.
            </param>
            <param name="imagePoints">
            The joint array of object point projections; see <see cref="M:OpenCV.Net.CV.CalibrateCamera2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.CameraCalibrationFlags)"/>.
            </param>
            <param name="npoints">
            The array of point counts; see <see cref="M:OpenCV.Net.CV.CalibrateCamera2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.CameraCalibrationFlags)"/>.
            </param>
            <param name="imageSize">The image size in pixels; used to initialize the principal point.</param>
            <param name="cameraMatrix">The output camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1].</param>
            <param name="aspectRatio">
            If it is zero or negative, both fx and fy are estimated independently. Otherwise fx = fy * <paramref name="aspectRatio"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.CheckChessboard(OpenCV.Net.IplImage,OpenCV.Net.Size)">
            <summary>
            Does a fast check if a chessboard is in the input image.
            </summary>
            <param name="src">The input image.</param>
            <param name="size">The size of the chessboard.</param>
            <returns><b>true</b> if a chessboard may be in the input image; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.FindChessboardCorners(OpenCV.Net.Arr,OpenCV.Net.Size,OpenCV.Net.Point2f[])">
            <summary>
            Finds the positions of the internal corners of the chessboard.
            </summary>
            <param name="image">Source chessboard view; it must be an 8-bit grayscale or color image.</param>
            <param name="patternSize">
            The number of inner corners per chessboard row and column (pointsPerRow,pointsPerColumn).
            </param>
            <param name="corners">The output array of detected corners.</param>
            <returns>
            <b>true</b> if all of the corners have been found and correctly reordered; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.FindChessboardCorners(OpenCV.Net.Arr,OpenCV.Net.Size,OpenCV.Net.Point2f[],System.Int32@,OpenCV.Net.ChessboardCalibrationFlags)">
            <summary>
            Finds the positions of the internal corners of the chessboard.
            </summary>
            <param name="image">Source chessboard view; it must be an 8-bit grayscale or color image.</param>
            <param name="patternSize">
            The number of inner corners per chessboard row and column (pointsPerRow, pointsPerColumn).
            </param>
            <param name="corners">The output array of detected corners.</param>
            <param name="cornerCount">The output number of corners found.</param>
            <param name="flags">Specifies operation flags.</param>
            <returns>
            <b>true</b> if all of the corners have been found and correctly reordered; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.DrawChessboardCorners(OpenCV.Net.Arr,OpenCV.Net.Size,OpenCV.Net.Point2f[],System.Boolean)">
            <summary>
            Renders the detected chessboard corners.
            </summary>
            <param name="image">The destination image; it must be an 8-bit color image.</param>
            <param name="patternSize">
            The number of inner corners per chessboard row and column (pointsPerRow, pointsPerColumn).
            </param>
            <param name="corners">The array of detected corners.</param>
            <param name="patternWasFound">A value indicating whether the complete board was found.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CalibrateCamera2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.CameraCalibrationFlags)">
            <summary>
            Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.
            </summary>
            <param name="objectPoints">
            The joint matrix of object points; calibration pattern features in the model coordinate space.
            A floating-point 3xN or Nx3 1-channel, or 1xN or Nx1 3-channel array, where N is the total number
            of points in all views.
            </param>
            <param name="imagePoints">
            The joint matrix of object point projections in the camera views. A floating-point 2xN or Nx2 1-channel,
            or 1xN or Nx1 2-channel array, where N is the total number of points in all views.
            </param>
            <param name="pointCounts">
            Integer 1xM or Mx1 vector (where M is the number of calibration pattern views) containing the number
            of points in each particular view. The sum of vector elements must match the size of <paramref name="objectPoints"/>
            and <paramref name="imagePoints"/> (=N).
            </param>
            <param name="imageSize">Size of the image, used only to initialize the intrinsic camera matrix.</param>
            <param name="cameraMatrix">The output 3x3 floating-point camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1].</param>
            <param name="distortionCoeffs">
            The output 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients (k1, k2, p1, p2[, k3]).
            </param>
            <param name="rotationVectors">
            The output 3xM or Mx3 1-channel, or 1xM or Mx1 3-channel array of rotation vectors (see <see cref="M:OpenCV.Net.CV.Rodrigues2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat)"/>),
            estimated for each pattern view. That is, each k-th rotation vector together with the corresponding k-th
            translation vector (see the next output parameter description) brings the calibration pattern from the model
            coordinate space (in which object points are specified) to the world coordinate space, i.e. real position of
            the calibration pattern in the k-th pattern view (k=0..M-1)
            </param>
            <param name="translationVectors">
            The output 3xM or Mx3 1-channel, or 1xM or Mx1 3-channel array of translation vectors, estimated for each
            pattern view.
            </param>
            <param name="flags">Specifies various operation flags.</param>
            <returns>The final re-projection error.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.CalibrateCamera2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.CameraCalibrationFlags,OpenCV.Net.TermCriteria)">
            <summary>
            Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern.
            </summary>
            <param name="objectPoints">
            The joint matrix of object points; calibration pattern features in the model coordinate space.
            A floating-point 3xN or Nx3 1-channel, or 1xN or Nx1 3-channel array, where N is the total number
            of points in all views.
            </param>
            <param name="imagePoints">
            The joint matrix of object point projections in the camera views. A floating-point 2xN or Nx2 1-channel,
            or 1xN or Nx1 2-channel array, where N is the total number of points in all views.
            </param>
            <param name="pointCounts">
            Integer 1xM or Mx1 vector (where M is the number of calibration pattern views) containing the number
            of points in each particular view. The sum of vector elements must match the size of <paramref name="objectPoints"/>
            and <paramref name="imagePoints"/> (=N).
            </param>
            <param name="imageSize">Size of the image, used only to initialize the intrinsic camera matrix.</param>
            <param name="cameraMatrix">The output 3x3 floating-point camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1].</param>
            <param name="distortionCoeffs">
            The output 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients (k1, k2, p1, p2[, k3]).
            </param>
            <param name="rotationVectors">
            The output 3xM or Mx3 1-channel, or 1xM or Mx1 3-channel array of rotation vectors (see <see cref="M:OpenCV.Net.CV.Rodrigues2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat)"/>),
            estimated for each pattern view. That is, each k-th rotation vector together with the corresponding k-th
            translation vector (see the next output parameter description) brings the calibration pattern from the model
            coordinate space (in which object points are specified) to the world coordinate space, i.e. real position of
            the calibration pattern in the k-th pattern view (k=0..M-1)
            </param>
            <param name="translationVectors">
            The output 3xM or Mx3 1-channel, or 1xM or Mx1 3-channel array of translation vectors, estimated for each
            pattern view.
            </param>
            <param name="flags">Specifies various operation flags.</param>
            <param name="criteria">Termination criteria for the iterative optimization algorithm.</param>
            <returns>The final re-projection error.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.CalibrationMatrixValues(OpenCV.Net.Mat,OpenCV.Net.Size,System.Double,System.Double)">
            <summary>
            Computes useful camera characteristics from the camera matrix.
            </summary>
            <param name="cameraMatrix">
            Input camera matrix that can be estimated by <see cref="M:OpenCV.Net.CV.CalibrateCamera2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.CameraCalibrationFlags,OpenCV.Net.TermCriteria)"/>
            or <see cref="M:OpenCV.Net.CV.StereoCalibrate(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.TermCriteria,OpenCV.Net.StereoCalibrationFlags)"/>.
            </param>
            <param name="imageSize">Input image size in pixels.</param>
            <param name="apertureWidth">Physical width of the sensor.</param>
            <param name="apertureHeight">Physical height of the sensor.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CalibrationMatrixValues(OpenCV.Net.Mat,OpenCV.Net.Size,System.Double,System.Double,System.Double@)">
            <summary>
            Computes useful camera characteristics from the camera matrix.
            </summary>
            <param name="cameraMatrix">
            Input camera matrix that can be estimated by <see cref="M:OpenCV.Net.CV.CalibrateCamera2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.CameraCalibrationFlags,OpenCV.Net.TermCriteria)"/>
            or <see cref="M:OpenCV.Net.CV.StereoCalibrate(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.TermCriteria,OpenCV.Net.StereoCalibrationFlags)"/>.
            </param>
            <param name="imageSize">Input image size in pixels.</param>
            <param name="apertureWidth">Physical width of the sensor.</param>
            <param name="apertureHeight">Physical height of the sensor.</param>
            <param name="fovx">Output field of view in degrees along the horizontal sensor axis.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CalibrationMatrixValues(OpenCV.Net.Mat,OpenCV.Net.Size,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Computes useful camera characteristics from the camera matrix.
            </summary>
            <param name="cameraMatrix">
            Input camera matrix that can be estimated by <see cref="M:OpenCV.Net.CV.CalibrateCamera2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.CameraCalibrationFlags,OpenCV.Net.TermCriteria)"/>
            or <see cref="M:OpenCV.Net.CV.StereoCalibrate(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.TermCriteria,OpenCV.Net.StereoCalibrationFlags)"/>.
            </param>
            <param name="imageSize">Input image size in pixels.</param>
            <param name="apertureWidth">Physical width of the sensor.</param>
            <param name="apertureHeight">Physical height of the sensor.</param>
            <param name="fovx">Output field of view in degrees along the horizontal sensor axis.</param>
            <param name="fovy">Output field of view in degrees along the vertical sensor axis.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CalibrationMatrixValues(OpenCV.Net.Mat,OpenCV.Net.Size,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Computes useful camera characteristics from the camera matrix.
            </summary>
            <param name="cameraMatrix">
            Input camera matrix that can be estimated by <see cref="M:OpenCV.Net.CV.CalibrateCamera2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.CameraCalibrationFlags,OpenCV.Net.TermCriteria)"/>
            or <see cref="M:OpenCV.Net.CV.StereoCalibrate(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.TermCriteria,OpenCV.Net.StereoCalibrationFlags)"/>.
            </param>
            <param name="imageSize">Input image size in pixels.</param>
            <param name="apertureWidth">Physical width of the sensor.</param>
            <param name="apertureHeight">Physical height of the sensor.</param>
            <param name="fovx">Output field of view in degrees along the horizontal sensor axis.</param>
            <param name="fovy">Output field of view in degrees along the vertical sensor axis.</param>
            <param name="focalLength">Focal length of the lens in mm.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CalibrationMatrixValues(OpenCV.Net.Mat,OpenCV.Net.Size,System.Double,System.Double,System.Double@,System.Double@,System.Double@,OpenCV.Net.Point2d@)">
            <summary>
            Computes useful camera characteristics from the camera matrix.
            </summary>
            <param name="cameraMatrix">
            Input camera matrix that can be estimated by <see cref="M:OpenCV.Net.CV.CalibrateCamera2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.CameraCalibrationFlags,OpenCV.Net.TermCriteria)"/>
            or <see cref="M:OpenCV.Net.CV.StereoCalibrate(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.TermCriteria,OpenCV.Net.StereoCalibrationFlags)"/>.
            </param>
            <param name="imageSize">Input image size in pixels.</param>
            <param name="apertureWidth">Physical width of the sensor.</param>
            <param name="apertureHeight">Physical height of the sensor.</param>
            <param name="fovx">Output field of view in degrees along the horizontal sensor axis.</param>
            <param name="fovy">Output field of view in degrees along the vertical sensor axis.</param>
            <param name="focalLength">Focal length of the lens in mm.</param>
            <param name="principalPoint">Principal point in pixels.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CalibrationMatrixValues(OpenCV.Net.Mat,OpenCV.Net.Size,System.Double,System.Double,System.Double@,System.Double@,System.Double@,OpenCV.Net.Point2d@,System.Double@)">
            <summary>
            Computes useful camera characteristics from the camera matrix.
            </summary>
            <param name="cameraMatrix">
            Input camera matrix that can be estimated by <see cref="M:OpenCV.Net.CV.CalibrateCamera2(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.CameraCalibrationFlags,OpenCV.Net.TermCriteria)"/>
            or <see cref="M:OpenCV.Net.CV.StereoCalibrate(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.TermCriteria,OpenCV.Net.StereoCalibrationFlags)"/>.
            </param>
            <param name="imageSize">Input image size in pixels.</param>
            <param name="apertureWidth">Physical width of the sensor.</param>
            <param name="apertureHeight">Physical height of the sensor.</param>
            <param name="fovx">Output field of view in degrees along the horizontal sensor axis.</param>
            <param name="fovy">Output field of view in degrees along the vertical sensor axis.</param>
            <param name="focalLength">Focal length of the lens in mm.</param>
            <param name="principalPoint">Principal point in pixels.</param>
            <param name="pixelAspectRatio">The aspect ratio of a pixel, given by fy / fx.</param>
        </member>
        <member name="M:OpenCV.Net.CV.StereoCalibrate(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Calibrates stereo camera.
            </summary>
            <param name="objectPoints">
            The joint matrix of object points; calibration pattern features in the model coordinate space.
            A floating-point 3xN or Nx3 1-channel, or 1xN or Nx1 3-channel array, where N is the total number
            of points in all views.
            </param>
            <param name="imagePoints1">
            The joint matrix of object point projections in the first camera views. A floating-point 2xN or Nx2
            1-channel, or 1xN or Nx1 2-channel array, where N is the total number of points in all views.
            </param>
            <param name="imagePoints2">
            The joint matrix of object point projections in the second camera views. A floating-point 2xN or Nx2 1-channel,
            or 1xN or Nx1 2-channel array, where N is the total number of points in all views.
            </param>
            <param name="npoints">
            Integer 1xM or Mx1 vector (where M is the number of calibration pattern views) containing the number
            of points in each particular view. The sum of vector elements must match the size of <paramref name="objectPoints"/>,
            <paramref name="imagePoints1"/> and <paramref name="imagePoints2"/> (=N).
            </param>
            <param name="cameraMatrix1">The output 3x3 floating-point first camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1].</param>
            <param name="distCoeffs1">
            The output 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients for the first camera (k1, k2, p1, p2[, k3]).
            </param>
            <param name="cameraMatrix2">The output 3x3 floating-point second camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1].</param>
            <param name="distCoeffs2">
            The output 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients for the second camera (k1, k2, p1, p2[, k3]).
            </param>
            <param name="imageSize">Size of the image, used only to initialize the intrinsic camera matrix.</param>
            <param name="R">The output rotation matrix between the 1st and the 2nd cameras’ coordinate systems.</param>
            <param name="T">The output translation vector between the cameras’ coordinate systems.</param>
            <param name="E">The optional output essential matrix.</param>
            <param name="F">The optional output fundamental matrix.</param>
            <returns>The final re-projection error.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.StereoCalibrate(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.TermCriteria,OpenCV.Net.StereoCalibrationFlags)">
            <summary>
            Calibrates stereo camera.
            </summary>
            <param name="objectPoints">
            The joint matrix of object points; calibration pattern features in the model coordinate space.
            A floating-point 3xN or Nx3 1-channel, or 1xN or Nx1 3-channel array, where N is the total number
            of points in all views.
            </param>
            <param name="imagePoints1">
            The joint matrix of object point projections in the first camera views. A floating-point 2xN or Nx2
            1-channel, or 1xN or Nx1 2-channel array, where N is the total number of points in all views.
            </param>
            <param name="imagePoints2">
            The joint matrix of object point projections in the second camera views. A floating-point 2xN or Nx2 1-channel,
            or 1xN or Nx1 2-channel array, where N is the total number of points in all views.
            </param>
            <param name="npoints">
            Integer 1xM or Mx1 vector (where M is the number of calibration pattern views) containing the number
            of points in each particular view. The sum of vector elements must match the size of <paramref name="objectPoints"/>,
            <paramref name="imagePoints1"/> and <paramref name="imagePoints2"/> (=N).
            </param>
            <param name="cameraMatrix1">The output 3x3 floating-point first camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1].</param>
            <param name="distCoeffs1">
            The output 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients for the first camera (k1, k2, p1, p2[, k3]).
            </param>
            <param name="cameraMatrix2">The output 3x3 floating-point second camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1].</param>
            <param name="distCoeffs2">
            The output 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients for the second camera (k1, k2, p1, p2[, k3]).
            </param>
            <param name="imageSize">Size of the image, used only to initialize the intrinsic camera matrix.</param>
            <param name="R">The output rotation matrix between the 1st and the 2nd cameras’ coordinate systems.</param>
            <param name="T">The output translation vector between the cameras’ coordinate systems.</param>
            <param name="E">The optional output essential matrix.</param>
            <param name="F">The optional output fundamental matrix.</param>
            <param name="criteria">The termination criteria for the iterative optimization algorithm.</param>
            <param name="flags">Specifies various operation flags.</param>
            <returns>The final re-projection error.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.StereoRectify(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.StereoRectificationFlags,System.Double)">
            <summary>
            Computes rectification transforms for each head of a calibrated stereo camera.
            </summary>
            <param name="cameraMatrix1">The first camera matrix.</param>
            <param name="cameraMatrix2">The second camera matrix.</param>
            <param name="distCoeffs1">The input distortion coefficients for the first camera.</param>
            <param name="distCoeffs2">The input distortion coefficients for the second camera.</param>
            <param name="imageSize">Size of the image used for stereo calibration.</param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras’ coordinate systems.</param>
            <param name="T">The translation vector between the cameras’ coordinate systems.</param>
            <param name="R1">The output 3x3 rectification transform (rotation matrix) for the first camera.</param>
            <param name="R2">The output 3x3 rectification transform (rotation matrix) for the second camera.</param>
            <param name="P1">
            The output 3x4 projection matrix for the first camera in the new (rectified) coordinate system.
            </param>
            <param name="P2">
            The output 3x4 projection matrix for the second camera in the new (rectified) coordinate system.
            </param>
            <param name="Q">
            The output 4x4 disparity-to-depth mapping matrix, see <see cref="M:OpenCV.Net.CV.ReprojectImageTo3D(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat,System.Boolean)"/>.
            </param>
            <param name="flags">The operation flags.</param>
            <param name="alpha">
            The free scaling parameter. If it is -1, the function performs some default scaling. Otherwise the parameter
            should be between 0 and 1. 0 means that the rectified images will be zoomed and shifted so that only valid
            pixels are visible (i.e. there will be no black areas after rectification). 1 means that the rectified image
            will be decimated and shifted so that all the pixels from the original images from the cameras are retained
            in the rectified images, i.e. no source image pixels are lost.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.StereoRectify(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.StereoRectificationFlags,System.Double,OpenCV.Net.Size)">
            <summary>
            Computes rectification transforms for each head of a calibrated stereo camera.
            </summary>
            <param name="cameraMatrix1">The first camera matrix.</param>
            <param name="cameraMatrix2">The second camera matrix.</param>
            <param name="distCoeffs1">The input distortion coefficients for the first camera.</param>
            <param name="distCoeffs2">The input distortion coefficients for the second camera.</param>
            <param name="imageSize">Size of the image used for stereo calibration.</param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras’ coordinate systems.</param>
            <param name="T">The translation vector between the cameras’ coordinate systems.</param>
            <param name="R1">The output 3x3 rectification transform (rotation matrix) for the first camera.</param>
            <param name="R2">The output 3x3 rectification transform (rotation matrix) for the second camera.</param>
            <param name="P1">
            The output 3x4 projection matrix for the first camera in the new (rectified) coordinate system.
            </param>
            <param name="P2">
            The output 3x4 projection matrix for the second camera in the new (rectified) coordinate system.
            </param>
            <param name="Q">
            The output 4x4 disparity-to-depth mapping matrix, see <see cref="M:OpenCV.Net.CV.ReprojectImageTo3D(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat,System.Boolean)"/>.
            </param>
            <param name="flags">The operation flags.</param>
            <param name="alpha">
            The free scaling parameter. If it is -1, the function performs some default scaling. Otherwise the parameter
            should be between 0 and 1. 0 means that the rectified images will be zoomed and shifted so that only valid
            pixels are visible (i.e. there will be no black areas after rectification). 1 means that the rectified image
            will be decimated and shifted so that all the pixels from the original images from the cameras are retained
            in the rectified images, i.e. no source image pixels are lost.
            </param>
            <param name="newImageSize">
            The new image resolution after rectification. By default, i.e. when (0,0) is passed, it is set to the original
            <paramref name="imageSize"/>. Setting it to larger value can help you to preserve details in the original image,
            especially when there is big radial distortion.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.StereoRectify(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.StereoRectificationFlags,System.Double,OpenCV.Net.Size,OpenCV.Net.Rect@)">
            <summary>
            Computes rectification transforms for each head of a calibrated stereo camera.
            </summary>
            <param name="cameraMatrix1">The first camera matrix.</param>
            <param name="cameraMatrix2">The second camera matrix.</param>
            <param name="distCoeffs1">The input distortion coefficients for the first camera.</param>
            <param name="distCoeffs2">The input distortion coefficients for the second camera.</param>
            <param name="imageSize">Size of the image used for stereo calibration.</param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras’ coordinate systems.</param>
            <param name="T">The translation vector between the cameras’ coordinate systems.</param>
            <param name="R1">The output 3x3 rectification transform (rotation matrix) for the first camera.</param>
            <param name="R2">The output 3x3 rectification transform (rotation matrix) for the second camera.</param>
            <param name="P1">
            The output 3x4 projection matrix for the first camera in the new (rectified) coordinate system.
            </param>
            <param name="P2">
            The output 3x4 projection matrix for the second camera in the new (rectified) coordinate system.
            </param>
            <param name="Q">
            The output 4x4 disparity-to-depth mapping matrix, see <see cref="M:OpenCV.Net.CV.ReprojectImageTo3D(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat,System.Boolean)"/>.
            </param>
            <param name="flags">The operation flags.</param>
            <param name="alpha">
            The free scaling parameter. If it is -1, the function performs some default scaling. Otherwise the parameter
            should be between 0 and 1. 0 means that the rectified images will be zoomed and shifted so that only valid
            pixels are visible (i.e. there will be no black areas after rectification). 1 means that the rectified image
            will be decimated and shifted so that all the pixels from the original images from the cameras are retained
            in the rectified images, i.e. no source image pixels are lost.
            </param>
            <param name="newImageSize">
            The new image resolution after rectification. By default, i.e. when (0,0) is passed, it is set to the original
            <paramref name="imageSize"/>. Setting it to larger value can help you to preserve details in the original image,
            especially when there is big radial distortion.
            </param>
            <param name="validPixelROI1">
            The optional output rectangle inside the rectified first camera image where all the pixels are valid.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.StereoRectify(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.StereoRectificationFlags,System.Double,OpenCV.Net.Size,OpenCV.Net.Rect@,OpenCV.Net.Rect@)">
            <summary>
            Computes rectification transforms for each head of a calibrated stereo camera.
            </summary>
            <param name="cameraMatrix1">The first camera matrix.</param>
            <param name="cameraMatrix2">The second camera matrix.</param>
            <param name="distCoeffs1">The input distortion coefficients for the first camera.</param>
            <param name="distCoeffs2">The input distortion coefficients for the second camera.</param>
            <param name="imageSize">Size of the image used for stereo calibration.</param>
            <param name="R">The rotation matrix between the 1st and the 2nd cameras’ coordinate systems.</param>
            <param name="T">The translation vector between the cameras’ coordinate systems.</param>
            <param name="R1">The output 3x3 rectification transform (rotation matrix) for the first camera.</param>
            <param name="R2">The output 3x3 rectification transform (rotation matrix) for the second camera.</param>
            <param name="P1">
            The output 3x4 projection matrix for the first camera in the new (rectified) coordinate system.
            </param>
            <param name="P2">
            The output 3x4 projection matrix for the second camera in the new (rectified) coordinate system.
            </param>
            <param name="Q">
            The output 4x4 disparity-to-depth mapping matrix, see <see cref="M:OpenCV.Net.CV.ReprojectImageTo3D(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat,System.Boolean)"/>.
            </param>
            <param name="flags">The operation flags.</param>
            <param name="alpha">
            The free scaling parameter. If it is -1, the function performs some default scaling. Otherwise the parameter
            should be between 0 and 1. 0 means that the rectified images will be zoomed and shifted so that only valid
            pixels are visible (i.e. there will be no black areas after rectification). 1 means that the rectified image
            will be decimated and shifted so that all the pixels from the original images from the cameras are retained
            in the rectified images, i.e. no source image pixels are lost.
            </param>
            <param name="newImageSize">
            The new image resolution after rectification. By default, i.e. when (0,0) is passed, it is set to the original
            <paramref name="imageSize"/>. Setting it to larger value can help you to preserve details in the original image,
            especially when there is big radial distortion.
            </param>
            <param name="validPixelROI1">
            The optional output rectangle inside the rectified first camera image where all the pixels are valid.
            </param>
            <param name="validPixelROI2">
            The optional output rectangle inside the rectified second camera image where all the pixels are valid.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.StereoRectifyUncalibrated(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,System.Double)">
            <summary>
            Computes rectification transform for uncalibrated stereo camera.
            </summary>
            <param name="points1">
            Array of N points from the first image.It can be 2xN, Nx2, 3xN or Nx3 1-channel array or
            1xN or Nx1 2- or 3-channel array. The point coordinates should be floating-point
            (single or double precision).
            </param>
            <param name="points2">
            Array of the second image points of the same size and format as <paramref name="points1"/>.
            </param>
            <param name="F">
            The input fundamental matrix. It can be computed from the same set of point pairs using
            <see cref="M:OpenCV.Net.CV.FindFundamentalMat(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.FundamentalMatrixMethod,System.Double,System.Double,OpenCV.Net.Mat)"/>.
            </param>
            <param name="imageSize">Size of the image.</param>
            <param name="H1">The output rectification homography matrix for the first camera.</param>
            <param name="H2">The output rectification homography matrix for the second camera.</param>
            <param name="threshold">
            The optional threshold used to filter out the outliers. If the parameter is greater than zero,
            then all the point pairs that do not comply the epipolar geometry well enough are rejected
            prior to computing the homographies. Otherwise, all the points are considered inliers.
            </param>
            <returns>A value indicating whether the rectification transform was computed successfully.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.ReprojectImageTo3D(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat,System.Boolean)">
            <summary>
            Reprojects disparity image to 3D space.
            </summary>
            <param name="disparityImage">
            The input single-channel 16-bit signed or 32-bit floating-point disparity image.
            </param>    
            <param name="image3d">
            The output 3-channel floating-point image of the same size as disparity . Each
            element of image3d(x,y) will contain the 3D coordinates of the point (x,y),
            computed from the disparity map.
            </param>
            <param name="Q">
            The 4x4 perspective transformation matrix that can be obtained with
            <see cref="M:OpenCV.Net.CV.StereoRectify(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Size,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.StereoRectificationFlags,System.Double)"/>.
            </param>
            <param name="handleMissingValues">
            If <b>true</b>, the pixels with the minimal disparity (which correspond to the
            outliers; see <see cref="M:OpenCV.Net.StereoBM.FindStereoCorrespondence(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)"/>) will be
            transformed to 3D points with some very large Z value (currently set to 10000).
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Alloc(System.UIntPtr)">
            <summary>
            Allocates a block of <paramref name="size"/> bytes in memory,
            returning a pointer to the beginning of the block.
            </summary>
            <param name="size">Size of the memory block, in bytes.</param>
            <returns>
            On success, a pointer to the memory block allocated by the function.
            If there is not enough memory, the function raises an error.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.Free(System.IntPtr@)">
            <summary>
            Deallocates a block of memory previously allocated by a call to
            <see cref="M:OpenCV.Net.CV.Alloc(System.UIntPtr)"/>.
            </summary>
            <param name="ptr">Pointer to a memory block previously allocated with <see cref="M:OpenCV.Net.CV.Alloc(System.UIntPtr)"/>.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Repeat(OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Repeats the 2D source array in both horizontal and vertical directions
            to fill the destination array.
            </summary>
            <param name="src">The source array.</param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Copy(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Copies elements of one array to another.
            </summary>
            <param name="src">The source array.</param>
            <param name="dst">The destination array.</param>
            <param name="mask">
            Optional operation mask, 8-bit single-channel array specifying the
            elements that should be changed on <paramref name="dst"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Split(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Divides a multi-channel array into several single-channel arrays or extracts
            a single channel from the array.
            </summary>
            <param name="src">The source array.</param>
            <param name="dst0">The first destination channel array.</param>
            <param name="dst1">The second destination channel array.</param>
            <param name="dst2">The third destination channel array.</param>
            <param name="dst3">The fourth destination channel array.</param>
            <remarks>
            The function divides a multi-channel array into separate single-channel arrays.
            Two modes are available for the operation. If the source array has N channels
            and the first N destination channels are not <b>null</b>, they all are
            extracted from the source array; if only a single destination channel of
            the first N is not <b>null</b>, this particular channel is extracted;
            otherwise an exception is raised. The rest of the destination channels
            (beyond the first N) must always be <b>null</b>. For an <see cref="T:OpenCV.Net.IplImage"/>
            instance, <see cref="M:OpenCV.Net.CV.Copy(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)"/> with COI set can also be used to extract a
            single channel from the image.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.CV.Merge(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Composes a multi-channel array from several single-channel arrays or
            inserts a single channel into the array.
            </summary>
            <param name="src0">The first input channel array.</param>
            <param name="src1">The second input channel array.</param>
            <param name="src2">The third input channel array.</param>
            <param name="src3">The fourth input channel array.</param>
            <param name="dst">The destination array.</param>
            <remarks>
            The function is the opposite to <see cref="M:OpenCV.Net.CV.Split(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)"/>. If the destination
            array has N channels then if the first N input channels are not <b>null</b>,
            they all are copied to the destination array; if only a single source
            channel of the first N is not <b>null</b>, this particular channel is
            copied into the destination array; otherwise an exception is raised.
            The rest of the source channels (beyond the first N) must always be <b>null</b>.
            For an <see cref="T:OpenCV.Net.IplImage"/> instance, <see cref="M:OpenCV.Net.CV.Copy(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)"/> with COI set
            can also be used to insert a single channel into the image.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.CV.MixChannels(OpenCV.Net.Arr[],OpenCV.Net.Arr[],System.Int32[])">
            <summary>
            Copies specified channels from the input arrays to the specified channels
            of the output arrays. All matrices must have the same size and depth.
            </summary>
            <param name="src">The input arrays.</param>
            <param name="dst">The output arrays.</param>
            <param name="fromTo">
            The array of index pairs, specifying which channels are copied and where.
            <paramref name="fromTo"/>[k*2] is the 0-based index of the input channel
            in <paramref name="src"/> and <paramref name="fromTo"/>[k*2+1] is the
            index of the output channel in <paramref name="dst"/>. Continuous channel
            numbering is used, i.e. the first input channels in <paramref name="src"/>
            are indexed from <code>0</code> to <code>src[0].Channels-1</code>, and the
            second input channels are indexed from <code>src[0].Channels</code> to
            <code>src[0].Channels + src[1].Channels-1</code>. The same scheme is used
            for the output image channels. As a special case, negative output channel
            indices mean that the corresponding output channel is filled with zeros.
            </param>
            <remarks>
            This function is a generalized form of <see cref="M:OpenCV.Net.CV.Split(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)"/> and
            <see cref="M:OpenCV.Net.CV.Merge(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)"/>. It can be used to change the order of the planes,
            add/remove alpha channel, extract or insert a single plane or multiple
            planes, etc.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.CV.ConvertScale(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double)">
            <summary>
            Converts one array to another with optional linear transformation.
            </summary>
            <param name="src">The source array.</param>
            <param name="dst">The destination array.</param>
            <param name="scale">
            The optional scale factor applied independently to all element channels.
            </param>
            <param name="shift">The optional value added to scaled array elements.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Convert(OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Converts one array to another.
            </summary>
            <param name="src">The source array.</param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.ConvertScaleAbs(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double)">
            <summary>
            Converts input array elements to an 8-bit unsigned integer array
            with optional linear transformation.
            </summary>
            <param name="src">The source array.</param>
            <param name="dst">The destination array (must have U8 depth).</param>
            <param name="scale">
            The optional scale factor applied independently to all element channels.
            </param>
            <param name="shift">The optional value added to scaled array elements.</param>
            <remarks>
            This function is similar to <see cref="M:OpenCV.Net.CV.ConvertScale(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double)"/>, but stores absolute
            values after the conversion results.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.CV.Add(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the per-element sum of two arrays.
            </summary>
            <param name="src1">The first input array.</param>
            <param name="src2">The second input array.</param>
            <param name="dst">The destination array.</param>
            <param name="mask">
            Optional operation mask, 8-bit single-channel array specifying the
            elements that should be changed on <paramref name="dst"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.AddS(OpenCV.Net.Arr,OpenCV.Net.Scalar,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the per-element sum of an array and a scalar.
            </summary>
            <param name="src">The input array.</param>
            <param name="value">The scalar input value.</param>
            <param name="dst">The destination array.</param>
            <param name="mask">
            Optional operation mask, 8-bit single-channel array specifying the
            elements that should be changed on <paramref name="dst"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Sub(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the per-element difference between two arrays.
            </summary>
            <param name="src1">The first input array.</param>
            <param name="src2">The second input array.</param>
            <param name="dst">The destination array.</param>
            <param name="mask">
            Optional operation mask, 8-bit single-channel array specifying the
            elements that should be changed on <paramref name="dst"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.SubS(OpenCV.Net.Arr,OpenCV.Net.Scalar,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the per-element difference between an array and a scalar.
            </summary>
            <param name="src">The input array.</param>
            <param name="value">The scalar input value.</param>
            <param name="dst">The destination array.</param>
            <param name="mask">
            Optional operation mask, 8-bit single-channel array specifying the
            elements that should be changed on <paramref name="dst"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.SubRS(OpenCV.Net.Arr,OpenCV.Net.Scalar,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Subtracts every element of a source array from a scalar.
            </summary>
            <param name="src">The input array.</param>
            <param name="value">The scalar input value.</param>
            <param name="dst">The destination array.</param>
            <param name="mask">
            Optional operation mask, 8-bit single-channel array specifying the
            elements that should be changed on <paramref name="dst"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Mul(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double)">
            <summary>
            Calculates the per-element product of two arrays.
            </summary>
            <param name="src1">The first input array.</param>
            <param name="src2">The second input array.</param>
            <param name="dst">The destination array.</param>
            <param name="scale">An optional scale factor.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Div(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double)">
            <summary>
            Calculates the per-element division of two arrays.
            </summary>
            <param name="src1">The first input array. If the reference is <b>null</b>, the array is assumed to be all ones.</param>
            <param name="src2">The second input array.</param>
            <param name="dst">The destination array.</param>
            <param name="scale">An optional scale factor.</param>
        </member>
        <member name="M:OpenCV.Net.CV.ScaleAdd(OpenCV.Net.Arr,OpenCV.Net.Scalar,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the sum of a scaled array and another array.
            </summary>
            <param name="src1">The first input array.</param>
            <param name="scale">The scale factor for the first array.</param>
            <param name="src2">The second input array.</param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.AXPY(OpenCV.Net.Arr,System.Double,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the sum of a multiple of an array with another array.
            </summary>
            <param name="A">The first input array.</param>
            <param name="realScalar">The scale factor for the first array.</param>
            <param name="B">The second input array.</param>
            <param name="C">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.AddWeighted(OpenCV.Net.Arr,System.Double,OpenCV.Net.Arr,System.Double,System.Double,OpenCV.Net.Arr)">
            <summary>
            Computes the weighted sum of two arrays.
            </summary>
            <param name="src1">The first input array.</param>
            <param name="alpha">The weight for the first array elements.</param>
            <param name="src2">The second input array.</param>
            <param name="beta">The weight for the second array elements.</param>
            <param name="gamma">A scalar that is added to each sum.</param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.DotProduct(OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the dot product of two arrays in Euclidian metrics.
            </summary>
            <param name="src1">The first input array.</param>
            <param name="src2">The second input array.</param>
            <returns>
            The Euclidean dot product of the two arrays. In the case of multiple
            channel arrays, the results for all channels are accumulated.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.And(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Performs per-element bit-wise conjunction of two arrays.
            </summary>
            <param name="src1">The first input array.</param>
            <param name="src2">The second input array.</param>
            <param name="dst">The destination array.</param>
            <param name="mask">
            Optional operation mask, 8-bit single-channel array specifying the
            elements that should be changed on <paramref name="dst"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.AndS(OpenCV.Net.Arr,OpenCV.Net.Scalar,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Performs per-element bit-wise conjunction of an array and a scalar.
            </summary>
            <param name="src">The input array.</param>
            <param name="value">The scalar input value.</param>
            <param name="dst">The destination array.</param>
            <param name="mask">
            Optional operation mask, 8-bit single-channel array specifying the
            elements that should be changed on <paramref name="dst"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Or(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Performs per-element bit-wise disjunction of two arrays.
            </summary>
            <param name="src1">The first input array.</param>
            <param name="src2">The second input array.</param>
            <param name="dst">The destination array.</param>
            <param name="mask">
            Optional operation mask, 8-bit single-channel array specifying the
            elements that should be changed on <paramref name="dst"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.OrS(OpenCV.Net.Arr,OpenCV.Net.Scalar,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Performs per-element bit-wise disjunction of an array and a scalar.
            </summary>
            <param name="src">The input array.</param>
            <param name="value">The scalar input value.</param>
            <param name="dst">The destination array.</param>
            <param name="mask">
            Optional operation mask, 8-bit single-channel array specifying the
            elements that should be changed on <paramref name="dst"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Xor(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation on two arrays.
            </summary>
            <param name="src1">The first input array.</param>
            <param name="src2">The second input array.</param>
            <param name="dst">The destination array.</param>
            <param name="mask">
            Optional operation mask, 8-bit single-channel array specifying the
            elements that should be changed on <paramref name="dst"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.XorS(OpenCV.Net.Arr,OpenCV.Net.Scalar,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Performs per-element bit-wise “exclusive or” operation on an array and a scalar.
            </summary>
            <param name="src">The input array.</param>
            <param name="value">The scalar input value.</param>
            <param name="dst">The destination array.</param>
            <param name="mask">
            Optional operation mask, 8-bit single-channel array specifying the
            elements that should be changed on <paramref name="dst"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Not(OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Performs per-element bit-wise inversion of array elements.
            </summary>
            <param name="src">The input array.</param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.InRange(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Checks that array elements lie between the elements of two other arrays.
            </summary>
            <param name="src">The input array.</param>
            <param name="lower">The inclusive lower boundary array.</param>
            <param name="upper">The exclusive upper boundary array.</param>
            <param name="dst">The destination array. It must have U8 or S8 type.</param>
        </member>
        <member name="M:OpenCV.Net.CV.InRangeS(OpenCV.Net.Arr,OpenCV.Net.Scalar,OpenCV.Net.Scalar,OpenCV.Net.Arr)">
            <summary>
            Checks that array elements lie between two scalars.
            </summary>
            <param name="src">The input array.</param>
            <param name="lower">The inclusive lower boundary.</param>
            <param name="upper">The exclusive upper boundary.</param>
            <param name="dst">The destination array. It must have U8 or S8 type.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Cmp(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.ComparisonOperation)">
            <summary>
            Performs per-element comparison of two arrays.
            </summary>
            <param name="src1">The first input array.</param>
            <param name="src2">The second input array. Both input arrays must have a single channel.</param>
            <param name="dst">The destination array. It must have U8 or S8 type.</param>
            <param name="cmpOp">
            The comparison operation used to test the relation between the elements to be checked.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.CmpS(OpenCV.Net.Arr,System.Double,OpenCV.Net.Arr,OpenCV.Net.ComparisonOperation)">
            <summary>
            Performs per-element comparison of an array and a scalar.
            </summary>
            <param name="src">The input array, must have a single channel.</param>
            <param name="value">The scalar value with which to compare each array element.</param>
            <param name="dst">The destination array. It must have U8 or S8 type.</param>
            <param name="cmpOp">
            The comparison operation used to test the relation between the elements to be checked.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Min(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Finds per-element minimum of two arrays.
            </summary>
            <param name="src1">The first input array.</param>
            <param name="src2">The second input array.</param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Max(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Finds per-element maximum of two arrays.
            </summary>
            <param name="src1">The first input array.</param>
            <param name="src2">The second input array.</param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.MinS(OpenCV.Net.Arr,System.Double,OpenCV.Net.Arr)">
            <summary>
            Finds per-element minimum of an array and a scalar.
            </summary>
            <param name="src">The input array.</param>
            <param name="value">The scalar input value.</param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.MaxS(OpenCV.Net.Arr,System.Double,OpenCV.Net.Arr)">
            <summary>
            Finds per-element maximum of array and scalar.
            </summary>
            <param name="src">The input array.</param>
            <param name="value">The scalar input value.</param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.AbsDiff(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the absolute difference between two arrays.
            </summary>
            <param name="src1">The first input array.</param>
            <param name="src2">The second input array.</param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.AbsDiffS(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Scalar)">
            <summary>
            Calculates the absolute difference between an array and a scalar.
            </summary>
            <param name="src">The input array.</param>
            <param name="value">The scalar input value.</param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Abs(OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the per-element absolute value of an array.
            </summary>
            <param name="src">The input array.</param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CartToPolar(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,System.Boolean)">
            <summary>
            Calculates the magnitude and/or angle of 2d vectors.
            </summary>
            <param name="x">The array of x-coordinates.</param>
            <param name="y">The array of y-coordinates.</param>
            <param name="magnitude">
            The destination array of magnitudes, may be set to <b>null</b> if it is not needed.
            </param>
            <param name="angle">
            The destination array of angles, may be set to <b>null</b> if it is not needed.
            The angles are measured in radians (0 to 2pi) or in degrees (0 to 360 degrees).
            </param>
            <param name="angleInDegrees">
            A value indicating whether the angles are measured in radians, which is the
            default mode, or in degrees.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.PolarToCart(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,System.Boolean)">
            <summary>
            Calculates Cartesian coordinates of 2d vectors represented in polar form.
            </summary>
            <param name="magnitude">
            The array of magnitudes. If it is <b>null</b>, the magnitudes are assumed to be all ones.
            </param>
            <param name="angle">The array of angles, whether in radians or degrees.</param>
            <param name="x">The destination array of x-coordinates, may be set to <b>null</b> if it is not needed.</param>
            <param name="y">The destination array of y-coordinates, may be set to <b>null</b> if it is not needed.</param>
            <param name="angleInDegrees">
            A value indicating whether the angles are measured in radians, which is the
            default mode, or in degrees.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Pow(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double)">
            <summary>
            Raises every array element to a power.
            </summary>
            <param name="src">The source array.</param>
            <param name="dst">The destination array, should be the same type as the source.</param>
            <param name="power">The exponent of power.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Exp(OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the exponent of every array element.
            </summary>
            <param name="src">The source array.</param>
            <param name="dst">
            The destination array, it should have double type or the same type
            as <paramref name="src"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Log(OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the natural logarithm of every array element’s absolute value.
            </summary>
            <param name="src">The source array.</param>
            <param name="dst">
            The destination array, it should have double type or the same type
            as <paramref name="src"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.FastArctan(System.Single,System.Single)">
            <summary>
            Calculates the angle of a 2D vector.
            </summary>
            <param name="y">The y-coordinate of the 2D vector.</param>
            <param name="x">The x-coordinate of the 2D vector.</param>
            <returns>
            The full-range angle of an input 2D vector. The angle is measured in
            degrees and varies from 0 degrees to 360 degrees.
            The accuracy is about 0.1 degrees.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.Cbrt(System.Single)">
            <summary>
            Calculates the cubic root.
            </summary>
            <param name="value">The input floating-point value.</param>
            <returns>The cubic root of <paramref name="value"/>.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.Rng(System.Int64)">
            <summary>
            Initializes a random number generator state.
            </summary>
            <param name="seed">A 64-bit value used to initiate a random sequence.</param>
            <returns>The initialized random number generator state.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.RandInt(System.UInt64@)">
            <summary>
            Returns a random 32-bit unsigned integer and updates the generator state.
            </summary>
            <param name="rng">The random number generator state initialized by <see cref="M:OpenCV.Net.CV.Rng(System.Int64)"/>.</param>
            <returns>A uniformly-distributed random 32-bit unsigned integer.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.RandReal(System.UInt64@)">
            <summary>
            Returns a floating-point random number and updates the generator state.
            </summary>
            <param name="rng">The random number generator state initialized by <see cref="M:OpenCV.Net.CV.Rng(System.Int64)"/>.</param>
            <returns>
            A uniformly-distributed random floating-point number between 0
            inclusive and 1 exclusive.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.RandArr(System.UInt64@,OpenCV.Net.Arr,OpenCV.Net.RandDistribution,OpenCV.Net.Scalar,OpenCV.Net.Scalar)">
            <summary>
            Fills an array with random numbers and updates the generator state.
            </summary>
            <param name="rng">The random number generator state initialized by <see cref="M:OpenCV.Net.CV.Rng(System.Int64)"/>.</param>
            <param name="arr">The destination array.</param>
            <param name="distType">The type of distribution used to generate random numbers.</param>
            <param name="param1">
            The first parameter of the distribution. In the case of a uniform distribution it is
            the inclusive lower boundary of the random numbers range. In the case of a normal
            distribution it is the mean value of the random numbers.
            </param>
            <param name="param2">
            The second parameter of the distribution. In the case of a uniform distribution it is
            the exclusive upper boundary of the random numbers range. In the case of a normal
            distribution it is the standard deviation of the random numbers.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.RandShuffle(OpenCV.Net.Arr,System.UInt64@,System.Double)">
            <summary>
            Shuffles the array elements randomly and updates the generator state.
            </summary>
            <param name="mat">The source and destination array. The array is shuffled in place.</param>
            <param name="rng">The random number generator state initialized by <see cref="M:OpenCV.Net.CV.Rng(System.Int64)"/>.</param>
            <param name="iterFactor">The scale factor that determines the number of random swap operations.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Sort(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.SortFlags)">
            <summary>
            Sorts each row or each column of a matrix.
            </summary>
            <param name="src">The source single-channel array.</param>
            <param name="dst">The destination array of the same size and the same type as <paramref name="src"/>.</param>
            <param name="indices">The array on which to store the sorted indices.</param>
            <param name="flags">
            The operation flags indicating whether to sort rows or columns and whether to use ascending
            or descending order.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.SolveCubic(OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Finds the real roots of a cubic equation.
            </summary>
            <param name="coeffs">The equation coefficients, an array of 3 or 4 elements.</param>
            <param name="roots">The output array of real roots which should have 3 elements.</param>
            <returns>The number of real roots found.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.SolvePoly(OpenCV.Net.Mat,OpenCV.Net.Mat,System.Int32,System.Int32)">
            <summary>
            Finds the real or complex roots of a polynomial equation.
            </summary>
            <param name="coeffs">The array of polynomial coefficients.</param>
            <param name="roots2">The destination (complex) array of roots.</param>
            <param name="maxIter">The maximum number of iterations to perform.</param>
            <param name="fig">The required figures of precision.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CrossProduct(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the cross product of two 3D vectors.
            </summary>
            <param name="src1">The first source vector.</param>
            <param name="src2">The second source vector.</param>
            <param name="dst">The destination vector.</param>
        </member>
        <member name="M:OpenCV.Net.CV.MatMulAdd(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Performs generalized matrix multiplication.
            </summary>
            <param name="src1">The first source array.</param>
            <param name="src2">The second source array.</param>
            <param name="src3">
            The third source array (shift). Can be <b>null</b>, if there is no shift.
            </param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.MatMul(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Performs generalized matrix multiplication.
            </summary>
            <param name="src1">The first source array.</param>
            <param name="src2">The second source array.</param>
            <param name="dst">The destination array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.GEMM(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,OpenCV.Net.Arr,System.Double,OpenCV.Net.Arr,OpenCV.Net.GemmFlags)">
            <summary>
            Performs generalized matrix multiplication.
            </summary>
            <param name="src1">The first source array.</param>
            <param name="src2">The second source array.</param>
            <param name="alpha">A scale factor for the multiplication.</param>
            <param name="src3">
            The third source array (shift). Can be <b>null</b>, if there is no shift.
            </param>
            <param name="beta">A scale factor for the shift.</param>
            <param name="dst">The destination array.</param>
            <param name="tABC">
            The operation flags, used to indicate whether any of the inputs should be transposed.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Transform(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Transforms each element of source array and stores resultant vectors in destination array.
            </summary>
            <param name="src">The source array.</param>
            <param name="dst">The destination array.</param>
            <param name="transmat">The transformation matrix to apply to elements of the source array.</param>
            <param name="shiftvec">The optional shift vector.</param>
        </member>
        <member name="M:OpenCV.Net.CV.PerspectiveTransform(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat)">
            <summary>
            Performs perspective matrix transformation of a vector array.
            </summary>
            <param name="src">The source three-channel floating-point array.</param>
            <param name="dst">The destination three-channel floating-point array.</param>
            <param name="mat">The 3x3 or 4x4 transformation matrix.</param>
        </member>
        <member name="M:OpenCV.Net.CV.MulTransposed(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,OpenCV.Net.Arr,System.Double)">
            <summary>
            Calculates the product of an array and a transposed array.
            </summary>
            <param name="src">The source array.</param>
            <param name="dst">The destination array. Must be of type F32 or F64.</param>
            <param name="order">The order of multipliers.</param>
            <param name="delta">An optional array, subtracted from <paramref name="src"/> before multiplication.</param>
            <param name="scale">An optional scale factor.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Transpose(OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Transposes a matrix.
            </summary>
            <param name="src">The source matrix.</param>
            <param name="dst">The destination matrix.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CompleteSymm(OpenCV.Net.Mat,System.Boolean)">
            <summary>
            Copies the lower or the upper half of a square matrix to another half.
            </summary>
            <param name="matrix">The input-output floating point square matrix.</param>
            <param name="lowerToUpper">
            If <b>true</b>, the lower half is copied to the upper half, otherwise
            the upper half is copied to the lower half.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Flip(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.FlipMode)">
            <summary>
            Flips a 2D array around vertical, horizontal or both axes.
            </summary>
            <param name="src">The source array.</param>
            <param name="dst">The destination array. If it is <b>null</b>, the flipping is done in place.</param>
            <param name="flipMode">A value that specifies how to flip the array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.SVD(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.SvdFlags)">
            <summary>
            Performs singular value decomposition of a real floating-point matrix.
            </summary>
            <param name="A">The source MxN matrix.</param>
            <param name="W">The resulting singular value diagonal matrix or vector of singular values.</param>
            <param name="U">The optional left orthogonal matrix.</param>
            <param name="V">The optional right orthogonal matrix.</param>
            <param name="flags">The operation flags that can be used to speed up the processing.</param>
        </member>
        <member name="M:OpenCV.Net.CV.SVBkSb(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.SvdFlags)">
            <summary>
            Performs singular value back substitution.
            </summary>
            <param name="W">The matrix or vector of singular values.</param>
            <param name="U">The left orthogonal matrix (may be transposed).</param>
            <param name="V">The right orthogonal matrix (may be transposed).</param>
            <param name="B">
            The matrix to multiply the pseudo-inverse of the original matrix A by. If it is <b>null</b>
            it will be assumed to be an identity matrix of an appropriate size.
            </param>
            <param name="X">The destination matrix for the result of back substitution.</param>
            <param name="flags">The operation flags that were used to compute the singular values.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Invert(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.InversionMethod)">
            <summary>
            Finds the inverse or pseudo-inverse of a matrix.
            </summary>
            <param name="src">The source matrix.</param>
            <param name="dst">The destination matrix.</param>
            <param name="method">The inversion method.</param>
            <returns>
            The inversed condition of <paramref name="src"/> (ratio of the smallest singular value
            to the largest singular value) or 0 if <paramref name="src"/> is all zeros.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.Solve(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.InversionMethod)">
            <summary>
            Solves a linear system or least-squares problem.
            </summary>
            <param name="src1">The source matrix.</param>
            <param name="src2">The right-hand part of the linear system.</param>
            <param name="dst">The output solution.</param>
            <param name="method">The matrix inversion method.</param>
            <returns>
            If <see cref="F:OpenCV.Net.InversionMethod.LU"/> method is used, returns <b>true</b> if <paramref name="src1"/>
            is non-singular and <b>false</b> otherwise; in the latter case, <paramref name="dst"/> is not
            valid.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.Det(OpenCV.Net.Arr)">
            <summary>
            Returns the determinant of a matrix.
            </summary>
            <param name="mat">The source matrix.</param>
            <returns>The determinant of the square matrix <paramref name="mat"/>.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.Trace(OpenCV.Net.Arr)">
            <summary>
            Returns the trace of a matrix.
            </summary>
            <param name="mat">The source matrix.</param>
            <returns>The sum of the diagonal elements of the matrix <paramref name="mat"/>.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.EigenVV(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Int32,System.Int32)">
            <summary>
            Computes eigenvalues and eigenvectors of a symmetric matrix.
            </summary>
            <param name="mat">The input symmetric square matrix, modified during the processing.</param>
            <param name="evects">The output matrix of eigenvectors, stored as subsequent rows.</param>
            <param name="evals">The output vector of eigenvalues, stored in the descending order.</param>
            <param name="eps">Accuracy of diagonalization.</param>
            <param name="lowindex">Optional index of largest eigenvalue/-vector to calculate.</param>
            <param name="highindex">Optional index of smallest eigenvalue/-vector to calculate.</param>
        </member>
        <member name="M:OpenCV.Net.CV.SetIdentity(OpenCV.Net.Arr)">
            <summary>
            Initializes a scaled identity matrix.
            </summary>
            <param name="mat">The matrix to initialize (not necessarily square).</param>
        </member>
        <member name="M:OpenCV.Net.CV.SetIdentity(OpenCV.Net.Arr,OpenCV.Net.Scalar)">
            <summary>
            Initializes a scaled identity matrix.
            </summary>
            <param name="mat">The matrix to initialize (not necessarily square).</param>
            <param name="value">The value to assign to the diagonal elements.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Range(OpenCV.Net.Arr,System.Double,System.Double)">
            <summary>
            Fills a matrix with the given range of numbers.
            </summary>
            <param name="mat">
            The matrix to initialize. It should be single-channel, 32-bit
            integer or floating-point.
            </param>
            <param name="start">The lower inclusive boundary of the range.</param>
            <param name="end">The upper exclusive boundary of the range.</param>
            <returns>The source matrix if the operation was successful, <b>null</b> otherwise.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.CalcCovarMatrix(OpenCV.Net.Arr[],OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.CovarianceFlags)">
            <summary>
            Calculates covariance matrix of a set of vectors.
            </summary>
            <param name="vects">
            The input vectors, all of which must have the same type and the same size.
            The vectors do not have to be 1D, they can be 2D (e.g., images) and so forth.
            </param>
            <param name="covMat">The output covariance matrix that should be floating-point and square.</param>
            <param name="avg">
            The input or output (depending on the flags) array containing the mean (average)
            vector of the input vectors.
            </param>
            <param name="flags">A value specifying various operation flags.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CalcPCA(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.PcaFlags)">
            <summary>
            Performs PCA analysis of the vector set.
            </summary>
            <param name="data">The input data array; each vector is either a single row or a single column.</param>
            <param name="mean">The mean (average) vector.</param>
            <param name="eigenvals">The output eigenvalues of covariance matrix.</param>
            <param name="eigenvects">
            The output eigenvectors of covariance matrix (i.e. principal components); one vector per row.
            </param>
            <param name="flags">A value specifying various operation flags.</param>
        </member>
        <member name="M:OpenCV.Net.CV.ProjectPCA(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Projects vectors to the specified subspace.
            </summary>
            <param name="data">The input data array; each vector is either a single row or a single column.</param>
            <param name="mean">
            The mean (average) vector. If it is a single-row vector, then inputs are stored as rows;
            otherwise, it should be a single-column vector and inputs will be stored as columns.
            </param>
            <param name="eigenvects">The eigenvectors (principal components). One vector per row.</param>
            <param name="result">The output matrix containing the projected vectors.</param>
        </member>
        <member name="M:OpenCV.Net.CV.BackProjectPCA(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Back projects vectors from the specified subspace.
            </summary>
            <param name="proj">The input data array; each vector is either a single row or a single column.</param>
            <param name="mean">
            The mean (average) vector. If it is a single-row vector, then inputs are stored as rows;
            otherwise, it should be a single-column vector and inputs will be stored as columns.
            </param>
            <param name="eigenvects">The eigenvectors (principal components). One vector per row.</param>
            <param name="result">The output matrix containing the back projected vectors.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Mahalanobis(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the Mahalonobis distance between two vectors.
            </summary>
            <param name="vec1">The first 1D source vector.</param>
            <param name="vec2">The second 1D source vector.</param>
            <param name="mat">The inverse covariance matrix.</param>
            <returns>The weighted Mahalanobis distance between two vectors.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.Sum(OpenCV.Net.Arr)">
            <summary>
            Adds up array elements.
            </summary>
            <param name="arr">The source array.</param>
            <returns>The sum of array elements, independently for each channel.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.CountNonZero(OpenCV.Net.Arr)">
            <summary>
            Counts non-zero array elements.
            </summary>
            <param name="arr">
            The source array. Must be a single-channel array or a multi-channel
            image with COI set.
            </param>
            <returns>The number of non-zero elements in <paramref name="arr"/>.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.Avg(OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates average (mean) of array elements.
            </summary>
            <param name="arr">The source array.</param>
            <param name="mask">The optional operation mask.</param>
            <returns>The average value of array elements, independently for each channel.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.AvgSdv(OpenCV.Net.Arr,OpenCV.Net.Scalar@,OpenCV.Net.Scalar@,OpenCV.Net.Arr)">
            <summary>
            Calculates average (mean) and standard deviation of array elements.
            </summary>
            <param name="arr">The source array.</param>
            <param name="mean">The output average of array elements, independently for each channel.</param>
            <param name="stdDev">The output standard deviation, independently for each channel.</param>
            <param name="mask">The optional operation mask.</param>
        </member>
        <member name="M:OpenCV.Net.CV.MinMaxLoc(OpenCV.Net.Arr,System.Double@,System.Double@)">
            <summary>
            Finds global minimum and maximum in array or subarray.
            </summary>
            <param name="arr">The source array, single-channel or multi-channel with COI set.</param>
            <param name="minValue">The returned minimum value.</param>
            <param name="maxValue">The returned maximum value.</param>
        </member>
        <member name="M:OpenCV.Net.CV.MinMaxLoc(OpenCV.Net.Arr,System.Double@,System.Double@,OpenCV.Net.Point@)">
            <summary>
            Finds global minimum and maximum in array or subarray.
            </summary>
            <param name="arr">The source array, single-channel or multi-channel with COI set.</param>
            <param name="minValue">The returned minimum value.</param>
            <param name="maxValue">The returned maximum value.</param>
            <param name="minLocation">The returned minimum location.</param>
        </member>
        <member name="M:OpenCV.Net.CV.MinMaxLoc(OpenCV.Net.Arr,System.Double@,System.Double@,OpenCV.Net.Point@,OpenCV.Net.Point@,OpenCV.Net.Arr)">
            <summary>
            Finds global minimum and maximum in array or subarray.
            </summary>
            <param name="arr">The source array, single-channel or multi-channel with COI set.</param>
            <param name="minValue">The returned minimum value.</param>
            <param name="maxValue">The returned maximum value.</param>
            <param name="minLocation">The returned minimum location.</param>
            <param name="maxLocation">The returned maximum location.</param>
            <param name="mask">The optional mask used to select a subarray.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Norm(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.NormTypes,OpenCV.Net.Arr)">
            <summary>
            Calculates absolute array norm, absolute difference norm, or relative difference norm.
            </summary>
            <param name="arr1">The first source image.</param>
            <param name="arr2">
            The second source image. If it is <b>null</b>, the absolute norm of <paramref name="arr1"/>
            is calculated, otherwise the absolute or relative norm of
            <paramref name="arr1"/>-<paramref name="arr2"/> is calculated.
            </param>
            <param name="normType">The type of array norm.</param>
            <param name="mask">The optional operation mask.</param>
            <returns>The absolute or relative array norm.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.Normalize(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double,OpenCV.Net.NormTypes,OpenCV.Net.Arr)">
            <summary>
            Normalizes the array norm or the range.
            </summary>
            <param name="src">The source array.</param>
            <param name="dst">The destination array. Must have the same size as <paramref name="src"/>.</param>
            <param name="a">The norm value to normalize to or the lower range boundary in the case of range normalization.</param>
            <param name="b">The upper range boundary in the case of range normalization; not used for norm normalization.</param>
            <param name="normType">The normalization type.</param>
            <param name="mask">The optional operation mask.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Reduce(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,OpenCV.Net.ReduceOperation)">
            <summary>
            Reduces a matrix to a vector.
            </summary>
            <param name="src">The input matrix.</param>
            <param name="dst">The output single-row/single-column vector that accumulates all the matrix rows/columns.</param>
            <param name="dim">
            The dimension index along which the matrix is reduced. 0 means that the matrix is reduced
            to a single row, 1 means that the matrix is reduced to a single column and -1 means that the
            dimension is chosen automatically by analysing the <paramref name="dst"/> size.
            </param>
            <param name="op">The reduction operation.</param>
        </member>
        <member name="M:OpenCV.Net.CV.DFT(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.DiscreteTransformFlags,System.Int32)">
            <summary>
            Performs a forward or inverse Discrete Fourier transform of a 1D or 2D floating-point array.
            </summary>
            <param name="src">The source array, containing real or complex values.</param>
            <param name="dst">The destination array of the same size and type as <paramref name="src"/>.</param>
            <param name="flags">The transformation flags specifying the operation of the DFT.</param>
            <param name="nonzeroRows">
            The number of nonzero rows in the source array (in the case of a forward 2d transform),
            or a number of rows of interest in the destination array (in the case of an inverse
            2d transform).
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.MulSpectrums(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.DiscreteTransformFlags)">
            <summary>
            Performs per-element multiplication of two Fourier spectrums.
            </summary>
            <param name="src1">The first source array.</param>
            <param name="src2">The second source array.</param>
            <param name="dst">The destination array of the same type and size as the source arrays.</param>
            <param name="flags">
            A combination of <see cref="F:OpenCV.Net.DiscreteTransformFlags.Rows"/> and
            <see cref="F:OpenCV.Net.DiscreteTransformFlags.MultiplyConjugate"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.GetOptimalDFTSize(System.Int32)">
            <summary>
            Returns optimal DFT size for a given vector size.
            </summary>
            <param name="size0">The vector size.</param>
            <returns>
            The minimum number N that is greater than or equal to <paramref name="size0"/>, such that
            the DFT of a vector of size N can be computed fast.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.DCT(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.DiscreteTransformFlags)">
            <summary>
            Performs a forward or inverse Discrete Cosine transform of a 1D or 2D floating-point array.
            </summary>
            <param name="src">The source array, real 1D or 2D array.</param>
            <param name="dst">Destination array of the same size and type as <paramref name="src"/>.</param>
            <param name="flags">The transformation flags specifying the operation of the DCT.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Line(OpenCV.Net.Arr,OpenCV.Net.Point,OpenCV.Net.Point,OpenCV.Net.Scalar,System.Int32,OpenCV.Net.LineFlags,System.Int32)">
            <summary>
            Draws a line segment connecting two points.
            </summary>
            <param name="img">The image on which to draw.</param>
            <param name="pt1">The first point of the line segment.</param>
            <param name="pt2">The second point of the line segment.</param>
            <param name="color">The color of the line.</param>
            <param name="thickness">The thickness of the line.</param>
            <param name="lineType">The algorithm used to draw the line.</param>
            <param name="shift">The number of fractional bits in the point coordinates.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Rectangle(OpenCV.Net.Arr,OpenCV.Net.Point,OpenCV.Net.Point,OpenCV.Net.Scalar,System.Int32,OpenCV.Net.LineFlags,System.Int32)">
            <summary>
            Draws a simple, thick, or filled rectangle with the two opposite corners
            <paramref name="pt1"/> and <paramref name="pt2"/>.
            </summary>
            <param name="img">The image on which to draw.</param>
            <param name="pt1">The first point of the line segment.</param>
            <param name="pt2">The second point of the line segment.</param>
            <param name="color">The color of the rectangle.</param>
            <param name="thickness">
            The thickness of the lines that make up the rectangle if positive, otherwise this
            indicates that a filled rectangle is to be drawn.
            </param>
            <param name="lineType">The algorithm used to draw the rectangle outline.</param>
            <param name="shift">The number of fractional bits in the point coordinates.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Rectangle(OpenCV.Net.Arr,OpenCV.Net.Rect,OpenCV.Net.Scalar,System.Int32,OpenCV.Net.LineFlags,System.Int32)">
            <summary>
            Draws a simple, thick, or filled rectangle specified by a <see cref="T:OpenCV.Net.Rect"/>
            structure.
            </summary>
            <param name="img">The image on which to draw.</param>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="color">The color of the rectangle.</param>
            <param name="thickness">
            The thickness of the lines that make up the rectangle if positive, otherwise this
            indicates that a filled rectangle is to be drawn.
            </param>
            <param name="lineType">The algorithm used to draw the rectangle outline.</param>
            <param name="shift">The number of fractional bits in the rectangle coordinates.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Circle(OpenCV.Net.Arr,OpenCV.Net.Point,System.Int32,OpenCV.Net.Scalar,System.Int32,OpenCV.Net.LineFlags,System.Int32)">
            <summary>
            Draws a circle with the specified <paramref name="center"/> and <paramref name="radius"/>.
            </summary>
            <param name="img">The image on which to draw.</param>
            <param name="center">The center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="color">The color of the circle.</param>
            <param name="thickness">
            The thickness of the circle outline if positive, otherwise this indicates that a filled
            circle is to be drawn.
            </param>
            <param name="lineType">The algorithm used to draw the circle boundary.</param>
            <param name="shift">The number of fractional bits in the center coordinates and radius value.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Ellipse(OpenCV.Net.Arr,OpenCV.Net.Point,OpenCV.Net.Size,System.Double,System.Double,System.Double,OpenCV.Net.Scalar,System.Int32,OpenCV.Net.LineFlags,System.Int32)">
            <summary>
            Draws ellipse outline, filled ellipse, elliptic arc or filled elliptic sector,
            depending on <paramref name="thickness"/>, <paramref name="startAngle"/> and
            <paramref name="endAngle"/> parameters. The resultant figure is rotated by
            <paramref name="angle"/>. All the angles are in degrees.
            </summary>
            <param name="img">The image on which to draw.</param>
            <param name="center">The center of the ellipse.</param>
            <param name="axes">The length of the ellipse axes.</param>
            <param name="angle">The rotation angle.</param>
            <param name="startAngle">The starting angle of the elliptic arc.</param>
            <param name="endAngle">The ending angle of the elliptic arc.</param>
            <param name="color">The color of the ellipse.</param>
            <param name="thickness">
            The thickness of the ellipse boundary if positive, otherwise this indicates that
            a filled ellipse sector is to be drawn.
            </param>
            <param name="lineType">The algorithm used to draw the ellipse boundary.</param>
            <param name="shift">The number of fractional bits in the center coordinates and axes' values.</param>
        </member>
        <member name="M:OpenCV.Net.CV.EllipseBox(OpenCV.Net.Arr,OpenCV.Net.RotatedRect,OpenCV.Net.Scalar,System.Int32,OpenCV.Net.LineFlags,System.Int32)">
            <summary>
            Draws a simple or thick ellipse from the specified enclosing <paramref name="box"/>.
            </summary>
            <param name="img">The image on which to draw.</param>
            <param name="box">The enclosing box of the ellipse.</param>
            <param name="color">The color of the ellipse.</param>
            <param name="thickness">
            The thickness of the ellipse boundary if positive, otherwise this indicates that
            a filled ellipse is to be drawn.
            </param>
            <param name="lineType">The algorithm used to draw the ellipse boundary.</param>
            <param name="shift">The number of fractional bits in the center coordinates and axes' values.</param>
        </member>
        <member name="M:OpenCV.Net.CV.FillConvexPoly(OpenCV.Net.Arr,OpenCV.Net.Point[],OpenCV.Net.Scalar,OpenCV.Net.LineFlags,System.Int32)">
            <summary>
            Fills a convex polygon.
            </summary>
            <param name="img">The image on which to draw.</param>
            <param name="pts">The array of points specifying a single convex polygon.</param>
            <param name="color">The color of the polygon.</param>
            <param name="lineType">The algorithm used to draw the polygon boundaries.</param>
            <param name="shift">The number of fractional bits in the vertex coordinates.</param>
        </member>
        <member name="M:OpenCV.Net.CV.FillPoly(OpenCV.Net.Arr,OpenCV.Net.Point[][],OpenCV.Net.Scalar,OpenCV.Net.LineFlags,System.Int32)">
            <summary>
            Fills an area bounded by several polygonal contours.
            </summary>
            <param name="img">The image on which to draw.</param>
            <param name="pts">The array of polygons bounding the area to fill.</param>
            <param name="color">The color of the filled area.</param>
            <param name="lineType">The algorithm used to draw the polygon boundaries.</param>
            <param name="shift">The number of fractional bits in the vertex coordinates.</param>
        </member>
        <member name="M:OpenCV.Net.CV.PolyLine(OpenCV.Net.Arr,OpenCV.Net.Point[][],System.Boolean,OpenCV.Net.Scalar,System.Int32,OpenCV.Net.LineFlags,System.Int32)">
            <summary>
            Draws one or more polygonal curves.
            </summary>
            <param name="img">The image on which to draw.</param>
            <param name="pts">The array of polygons to draw.</param>
            <param name="isClosed">
            A value indicating whether the polylines must be drawn closed. If closed, the function
            draws the line from the last vertex of every contour to the first vertex.
            </param>
            <param name="color">The color of the polygons.</param>
            <param name="thickness">The thickness of the polyline edges.</param>
            <param name="lineType">The algorithm used to draw the polygon boundaries.</param>
            <param name="shift">The number of fractional bits in the vertex coordinates.</param>
        </member>
        <member name="M:OpenCV.Net.CV.ClipLine(OpenCV.Net.Size,OpenCV.Net.Point@,OpenCV.Net.Point@)">
            <summary>
            Clips the line against the image rectangle.
            </summary>
            <param name="imgSize">The size of the image.</param>
            <param name="pt1">The first ending point of the line segment.</param>
            <param name="pt2">The second ending point of the line segment.</param>
            <returns>
            <b>true</b> if some portion of the line segment is inside the image, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.LineIterator(OpenCV.Net.Arr,OpenCV.Net.Point,OpenCV.Net.Point,OpenCV.Net.LineType,System.Boolean)">
            <summary>
            Steps through all image points on the raster line between <paramref name="pt1"/> and <paramref name="pt2"/>.
            </summary>
            <param name="image">The image to sample the line from.</param>
            <param name="pt1">The first ending point of the line segment.</param>
            <param name="pt2">The second ending point of the line segment.</param>
            <param name="connectivity">The scanned line connectivity for Bresenham's algorithm, either 4 or 8.</param>
            <param name="leftToRight">
            If <b>true</b> the line is scanned from the leftmost point to the rightmost point, otherwise it
            will be scanned in the specified order, from <paramref name="pt1"/> to <paramref name="pt2"/>.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of scanning the image points
            along the raster line between <paramref name="pt1"/> and <paramref name="pt2"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.PutText(OpenCV.Net.Arr,System.String,OpenCV.Net.Point,OpenCV.Net.Font,OpenCV.Net.Scalar)">
            <summary>
            Renders text strokes with the specified <paramref name="font"/> and <paramref name="color"/>
            at the specified location.
            </summary>
            <param name="img">The image on which to draw.</param>
            <param name="text">The text string to print.</param>
            <param name="origin">The coordinates of the bottom-left corner of the first letter.</param>
            <param name="font">The font style used to render the text strokes.</param>
            <param name="color">The color of the text.</param>
        </member>
        <member name="M:OpenCV.Net.CV.GetTextSize(System.String,OpenCV.Net.Font,OpenCV.Net.Size@,System.Int32@)">
            <summary>
            Retrieves the width and height of a text string.
            </summary>
            <param name="text">The input string that is to be measured.</param>
            <param name="font">The font style used to render the text strokes.</param>
            <param name="textSize">
            The resultant size of the text string. Height of the text does not include the height
            of character parts that are below the baseline.
            </param>
            <param name="baseline">
            The y-coordinate of the baseline relative to the bottom-most text point.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.EllipseToPoly(OpenCV.Net.Point,OpenCV.Net.Size,System.Int32,System.Int32,System.Int32,OpenCV.Net.Point[],System.Int32)">
            <summary>
            Returns the polygon points which make up the given ellipse.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="axes">The length of the ellipse axes.</param>
            <param name="angle">The rotation angle.</param>
            <param name="startAngle">The starting angle of the elliptic arc.</param>
            <param name="endAngle">The ending angle of the elliptic arc.</param>
            <param name="pts">
            The array of points that define the polygon. The array must be large enough
            to hold the result.
            </param>
            <param name="delta">
            The angle between the subsequent polyline vertices. It defines the
            approximation accuracy.
            </param>
            <returns>The total number of points stored into <paramref name="pts"/>.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.DrawContours(OpenCV.Net.Arr,OpenCV.Net.Seq,OpenCV.Net.Scalar,OpenCV.Net.Scalar,System.Int32,System.Int32,OpenCV.Net.LineFlags)">
            <summary>
            Draws contour outlines or filled interiors in an image.
            </summary>
            <param name="img">The image where the contours are to be drawn.</param>
            <param name="contour">The first contour to draw.</param>
            <param name="externalColor">The color of the external contours.</param>
            <param name="holeColor">The color of the internal holes.</param>
            <param name="maxLevel">
            The maximal level for drawn contours. If 0, only <paramref name="contour"/> is drawn. If 1, the
            <paramref name="contour"/> and all contours following it on the same level are drawn. If 2, all
            contours following <paramref name="contour"/> and all contours one level below the contours are drawn,
            and so forth. If the value is negative, the function does not draw the contours following
            <paramref name="contour"/> contour but draws the child contours of <paramref name="contour"/> up to the
            max level minus one.
            </param>
            <param name="thickness">
            The thickness of the lines the contours are drawn with. If negative, the contour interiors
            are drawn.
            </param>
            <param name="lineType">The algorithm used to draw the contour boundaries.</param>
        </member>
        <member name="M:OpenCV.Net.CV.DrawContours(OpenCV.Net.Arr,OpenCV.Net.Seq,OpenCV.Net.Scalar,OpenCV.Net.Scalar,System.Int32,System.Int32,OpenCV.Net.LineFlags,OpenCV.Net.Point)">
            <summary>
            Draws contour outlines or filled interiors in an image.
            </summary>
            <param name="img">The image where the contours are to be drawn.</param>
            <param name="contour">The first contour to draw.</param>
            <param name="externalColor">The color of the external contours.</param>
            <param name="holeColor">The color of the internal holes.</param>
            <param name="maxLevel">
            The maximal level for drawn contours. If 0, only <paramref name="contour"/> is drawn. If 1, the
            <paramref name="contour"/> and all contours following it on the same level are drawn. If 2, all
            contours following <paramref name="contour"/> and all contours one level below the contours are drawn,
            and so forth. If the value is negative, the function does not draw the contours following
            <paramref name="contour"/> contour but draws the child contours of <paramref name="contour"/> up to the
            max level minus one.
            </param>
            <param name="thickness">
            The thickness of the lines the contours are drawn with. If negative, the contour interiors
            are drawn.
            </param>
            <param name="lineType">The algorithm used to draw the contour boundaries.</param>
            <param name="offset">An offset to apply to all contour vertices.</param>
        </member>
        <member name="M:OpenCV.Net.CV.LUT(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Performs a look-up transformation of the source array.
            </summary>
            <param name="src">The input array.</param>
            <param name="dst">The destination array.</param>
            <param name="lut">
            The look-up table array. Elements of <paramref name="src"/> are
            used as indices in this 256-element table.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.KMeans2(OpenCV.Net.Arr,System.Int32,OpenCV.Net.Arr,OpenCV.Net.TermCriteria,System.Int32)">
            <summary>
            Finds centers of clusters and groups input samples around the clusters.
            </summary>
            <param name="samples">The floating-point matrix of input samples, one row per sample.</param>
            <param name="clusterCount">The number of clusters to split the set by.</param>
            <param name="labels">The input/output integer array that stores the cluster indices for every sample.</param>
            <param name="criteria">
            The algorithm termination criteria, that is, the maximum number of iterations
            and/or the desired accuracy.
            </param>
            <param name="attempts">
            Specifies the number of times the algorithm is executed using different initial labelings.
            The algorithm returns the labels that yield the best compactness (see the last parameter).
            </param>
            <returns>The compactness measure for the best clustering attempt.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.KMeans2(OpenCV.Net.Arr,System.Int32,OpenCV.Net.Arr,OpenCV.Net.TermCriteria,System.Int32,System.UInt64@,OpenCV.Net.KMeansFlags,OpenCV.Net.Arr)">
            <summary>
            Finds centers of clusters and groups input samples around the clusters.
            </summary>
            <param name="samples">The floating-point matrix of input samples, one row per sample.</param>
            <param name="clusterCount">The number of clusters to split the set by.</param>
            <param name="labels">The input/output integer array that stores the cluster indices for every sample.</param>
            <param name="criteria">
            The algorithm termination criteria, that is, the maximum number of iterations
            and/or the desired accuracy.
            </param>
            <param name="attempts">
            Specifies the number of times the algorithm is executed using different initial labelings.
            The algorithm returns the labels that yield the best compactness (see the last parameter).
            </param>
            <param name="rng">The random number generator state initialized by <see cref="M:OpenCV.Net.CV.Rng(System.Int64)"/>.</param>
            <param name="flags">The operation flags for the k-means algorithm.</param>
            <param name="centers">The output matrix of the cluster centers, one row per each cluster center.</param>
            <returns>The compactness measure for the best clustering attempt.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.KMeans2(OpenCV.Net.Arr,System.Int32,OpenCV.Net.Arr,OpenCV.Net.TermCriteria,System.Int32,System.UInt64@,OpenCV.Net.KMeansFlags,OpenCV.Net.Arr,System.Double@)">
            <summary>
            Finds centers of clusters and groups input samples around the clusters.
            </summary>
            <param name="samples">The floating-point matrix of input samples, one row per sample.</param>
            <param name="clusterCount">The number of clusters to split the set by.</param>
            <param name="labels">The input/output integer array that stores the cluster indices for every sample.</param>
            <param name="criteria">
            The algorithm termination criteria, that is, the maximum number of iterations
            and/or the desired accuracy.
            </param>
            <param name="attempts">
            Specifies the number of times the algorithm is executed using different initial labelings.
            The algorithm returns the labels that yield the best compactness (see the last parameter).
            </param>
            <param name="rng">The random number generator state initialized by <see cref="M:OpenCV.Net.CV.Rng(System.Int64)"/>.</param>
            <param name="flags">The operation flags for the k-means algorithm.</param>
            <param name="centers">The output matrix of the cluster centers, one row per each cluster center.</param>
            <param name="compactness">
            When this method returns, contains the compactness measure for the best clustering attempt.
            </param>
            <returns>The compactness measure for the best clustering attempt.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.Save``1(System.String,``0,System.String,System.String,OpenCV.Net.AttrList)">
            <summary>
            Saves an object to a file.
            </summary>
            <typeparam name="TElement">The type of object to save.</typeparam>
            <param name="fileName">The file path to be saved.</param>
            <param name="element">The object to save.</param>
            <param name="name">
            Optional object name. If it is <b>null</b>, the name will be formed from <paramref name="fileName"/>.
            </param>
            <param name="comment">Optional comment to put in the beginning of the file.</param>
            <param name="attributes">A list of attributes used to customize the writing procedure.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Load``1(System.String,OpenCV.Net.MemStorage,System.String)">
            <summary>
            Loads an object from a file.
            </summary>
            <typeparam name="TElement">The type of object to load.</typeparam>
            <param name="fileName">The file path to be loaded.</param>
            <param name="storage">
            Memory storage for dynamic structures, such as <see cref="T:OpenCV.Net.Seq"/> or <see cref="T:OpenCV.Net.Graph"/>.
            It is not used for matrices or images.
            </param>
            <param name="name">
            Optional object name. If it is <b>null</b>, the first top-level object in the storage will be loaded.
            </param>
            <returns>The loaded object instance.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.Load``1(System.String,OpenCV.Net.MemStorage,System.String,System.String@)">
            <summary>
            Loads an object from a file.
            </summary>
            <typeparam name="TElement">The type of object to load.</typeparam>
            <param name="fileName">The file path to be loaded.</param>
            <param name="storage">
            Memory storage for dynamic structures, such as <see cref="T:OpenCV.Net.Seq"/> or <see cref="T:OpenCV.Net.Graph"/>.
            It is not used for matrices or images.
            </param>
            <param name="name">
            Optional object name. If it is <b>null</b>, the first top-level object in the storage will be loaded.
            </param>
            <param name="realName">Optional output parameter that will contain the name of the loaded object.</param>
            <returns>The loaded object instance.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.AddText(OpenCV.Net.Arr,System.String,OpenCV.Net.Point,OpenCV.Net.Font)">
            <summary>
            Draws text on the specified image <paramref name="img"/> using the specific <paramref name="font"/>.
            </summary>
            <param name="img">Image where the text should be drawn.</param>
            <param name="text">Text to write on the image.</param>
            <param name="location">The point where the text should start on the image.</param>
            <param name="font">Font used to draw the text.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CreateButton(System.String,OpenCV.Net.ButtonCallback,OpenCV.Net.ButtonType,System.Boolean)">
            <summary>
            Creates and attaches a button to the shared control panel.
            </summary>
            <param name="buttonName">The name of the button.</param>
            <param name="onChange">
            The callback method that will be called every time the button changes state.
            </param>
            <param name="buttonType">The type of button to create.</param>
            <param name="initialButtonState">The initial state of the button.</param>
            <returns>
            <b>true</b> if the button was created successfully; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.LoadImage(System.String,OpenCV.Net.LoadImageFlags)">
            <summary>
            Loads an image from a file as an <see cref="T:OpenCV.Net.IplImage"/>.
            </summary>
            <param name="fileName">Name of file to be loaded.</param>
            <param name="colorType">Specific color type of the loaded image.</param>
            <returns>The newly loaded image.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.LoadImageM(System.String,OpenCV.Net.LoadImageFlags)">
            <summary>
            Loads an image from a file as a <see cref="T:OpenCV.Net.Mat"/>.
            </summary>
            <param name="fileName">Name of file to be loaded.</param>
            <param name="colorType">Specific color type of the loaded image.</param>
            <returns>The newly loaded image.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.SaveImage(System.String,OpenCV.Net.Arr,System.Int32[])">
            <summary>
            Saves an image to a specified file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="image">Image to be saved.</param>
            <param name="parameters">Optional image compression parameters.</param>
            <returns>
            <b>true</b> if the image was saved successfully; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.DecodeImage(OpenCV.Net.Mat,OpenCV.Net.LoadImageFlags)">
            <summary>
            Reads an image from a buffer in memory as an <see cref="T:OpenCV.Net.IplImage"/>.
            </summary>
            <param name="buf">Input array of bytes.</param>
            <param name="colorType">Specific color type of the loaded image.</param>
            <returns>The newly loaded image.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.DecodeImageM(OpenCV.Net.Mat,OpenCV.Net.LoadImageFlags)">
            <summary>
            Reads an image from a buffer in memory as a <see cref="T:OpenCV.Net.Mat"/>.
            </summary>
            <param name="buf">Input array of bytes.</param>
            <param name="colorType">Specific color type of the loaded image.</param>
            <returns>The newly loaded image.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.EncodeImage(System.String,OpenCV.Net.Arr,System.Int32[])">
            <summary>
            Encodes an image into a memory buffer.
            </summary>
            <param name="ext">File extension that defines the output format.</param>
            <param name="image">Image to be written.</param>
            <param name="parameters">Optional image compression parameters.</param>
            <returns>
            A newly created <see cref="T:OpenCV.Net.Mat"/> containing the encoded image bytes.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.ConvertImage(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.ConvertImageFlags)">
            <summary>
            Converts one image to another with an optional vertical flip.
            </summary>
            <param name="src">Source image.</param>
            <param name="dst">Destination image.</param>
            <param name="flags">The operation flags.</param>
        </member>
        <member name="M:OpenCV.Net.CV.WaitKey(System.Int32)">
            <summary>
            Waits for a pressed key.
            </summary>
            <param name="delay">
            Maximum delay in milliseconds for which to wait for a key press.
            </param>
            <returns>
            The pressed key code or -1 if no key was pressed before the specified
            time had elapsed.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.Acc(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Adds a frame to an accumulator.
            </summary>
            <param name="image">
            Input image, 1- or 3-channel, 8-bit or 32-bit floating point. Each channel of
            multi-channel image is processed independently.
            </param>
            <param name="sum">
            Accumulator with the same number of channels as input image, 32-bit or
            64-bit floating-point.
            </param>
            <param name="mask">Optional operation mask.</param>
        </member>
        <member name="M:OpenCV.Net.CV.SquareAcc(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Adds the square of the source image to the accumulator.
            </summary>
            <param name="image">
            Input image, 1- or 3-channel, 8-bit or 32-bit floating point. Each channel of
            multi-channel image is processed independently.
            </param>
            <param name="sqsum">
            Accumulator with the same number of channels as input image, 32-bit or
            64-bit floating-point.
            </param>
            <param name="mask">Optional operation mask.</param>
        </member>
        <member name="M:OpenCV.Net.CV.MultiplyAcc(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Adds the product of two input images to the accumulator.
            </summary>
            <param name="image1">
            First input image, 1- or 3-channel, 8-bit or 32-bit floating point. Each channel of
            multi-channel image is processed independently.
            </param>
            <param name="image2">Second input image, the same format as the first one.</param>
            <param name="acc">
            Accumulator with the same number of channels as input images, 32-bit or
            64-bit floating-point.
            </param>
            <param name="mask">Optional operation mask.</param>
        </member>
        <member name="M:OpenCV.Net.CV.RunningAvg(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,OpenCV.Net.Arr)">
            <summary>
            Calculates the weighted sum of the input image <paramref name="image"/> and the
            accumulator <paramref name="acc"/> so that <paramref name="acc"/> becomes a running
            average of frame sequence.
            </summary>
            <param name="image">
            Input image, 1- or 3-channel, 8-bit or 32-bit floating point. Each channel of
            multi-channel image is processed independently.
            </param>
            <param name="acc">
            Accumulator with the same number of channels as input images, 32-bit or
            64-bit floating-point.
            </param>
            <param name="alpha">
            Weight of the input image. This parameter regulates how fast the accumulator
            forgets about previous frames.
            </param>
            <param name="mask">Optional operation mask.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CopyMakeBorder(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Point,OpenCV.Net.IplBorder)">
            <summary>
            Copies an image and makes a border around it.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="offset">
            Coordinates of the top-left corner (or bottom-left in the case of images with bottom-left origin)
            of the destination image rectangle where the source image (or its ROI) is copied.
            </param>
            <param name="borderType">Type of the border to create around the copied source image rectangle.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CopyMakeBorder(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Point,OpenCV.Net.IplBorder,OpenCV.Net.Scalar)">
            <summary>
            Copies an image and makes a border around it.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="offset">
            Coordinates of the top-left corner (or bottom-left in the case of images with bottom-left origin)
            of the destination image rectangle where the source image (or its ROI) is copied.
            </param>
            <param name="borderType">Type of the border to create around the copied source image rectangle.</param>
            <param name="value">
            Value of the border pixels if <paramref name="borderType"/> is <see cref="F:OpenCV.Net.IplBorder.Constant"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Smooth(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.SmoothMethod,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Smooths the image in one of several ways.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="smoothType">Type of the smoothing.</param>
            <param name="size1">
            The first parameter of the smoothing operation, the aperture width. Must be a positive
            odd number (e.g. 1, 3, 5, ...).
            </param>
            <param name="size2">
            The second parameter of the smoothing operation, the aperture height. Ignored by
            <see cref="F:OpenCV.Net.SmoothMethod.Median"/> and <see cref="F:OpenCV.Net.SmoothMethod.Bilateral"/> methods.
            In the case of simple scaled/non-scaled and Gaussian blur, if <paramref name="size2"/>
            is zero, it is set to <paramref name="size1"/>. Otherwise it must be a positive odd number.
            </param>
            <param name="sigma1">
            In the case of a <see cref="F:OpenCV.Net.SmoothMethod.Gaussian"/> smoothing, this parameter may
            specify the standard deviation. If it is zero, it is calculated from the kernel size.
            If <paramref name="sigma1"/> is not zero but <paramref name="size1"/> and <paramref name="size2"/>
            are zeros, the kernel size is calculated from <paramref name="sigma1"/>.
            </param>
            <param name="sigma2">
            Optionally specifies the standard deviation for the second dimension.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Filter2D(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat)">
            <summary>
            Convolves an image with the kernel.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">
            The destination image of the same size and number of channels as <paramref name="src"/>.
            </param>
            <param name="kernel">
            The convolution kernel (or rather a correlation kernel), a single-channel
            floating point matrix.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Filter2D(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat,OpenCV.Net.Point)">
            <summary>
            Convolves an image with the kernel.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">
            The destination image of the same size and number of channels as <paramref name="src"/>.
            </param>
            <param name="kernel">
            The convolution kernel (or rather a correlation kernel), a single-channel
            floating point matrix.
            </param>
            <param name="anchor">
            The anchor of the kernel that indicates the relative position of a filtered point
            within the kernel; the anchor should lie within the kernel; default value (-1,-1)
            means that the anchor is at the kernel center.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Integral(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Calculates the integral of an image.
            </summary>
            <param name="image">The source image, W x H, 8-bit or floating-point (32f or 64f).</param>
            <param name="sum">The integral image, (W + 1) x (H + 1), 32-bit integer or double precision floating-point (64f).</param>
            <param name="sqsum">
            The optional integral image for squared pixel values, (W + 1) x (H + 1), double precision
            floating-point (64f).
            </param>
            <param name="tiltedSum">
            The integral for the image rotated by 45 degrees, the same data type as <paramref name="sum"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.PyrDown(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.PyramidDecompositionFilter)">
            <summary>
            Blurs an image and downsamples it.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image, with the same type as <paramref name="src"/>.</param>
            <param name="filter">The type of filter used for convolution.</param>
        </member>
        <member name="M:OpenCV.Net.CV.PyrUp(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.PyramidDecompositionFilter)">
            <summary>
            Upsamples an image and then blurs it.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image, with the same type as <paramref name="src"/>.</param>
            <param name="filter">The type of filter used for convolution.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CreatePyramid(OpenCV.Net.Arr,System.Int32,System.Double,OpenCV.Net.Size[],OpenCV.Net.Arr,System.Boolean,OpenCV.Net.PyramidDecompositionFilter)">
            <summary>
            Builds pyramid representation of an image.
            </summary>
            <param name="img">The source image.</param>
            <param name="extraLayers">The number of extra pyramid layers.</param>
            <param name="rate">
            The size scale factor between each pyramid layer. Used if <paramref name="layerSizes"/>
            is <b>null</b>.
            </param>
            <param name="layerSizes">The size of each pyramid layer.</param>
            <param name="buffer">An image buffer on which the pyramids will be stored.</param>
            <param name="calc">
            A value indicating whether to compute the actual pyramids. If it is <b>false</b>, only the memory
            for the pyramids is allocated.
            </param>
            <param name="filter">The type of filter used for convolution.</param>
            <returns>
            A set of matrix handles representing the pyramid of <paramref name="img"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.PyrMeanShiftFiltering(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double,System.Int32)">
            <summary>
            Performs initial step of meanshift segmentation of an image.
            </summary>
            <param name="src">The source 8-bit, 3-channel image.</param>
            <param name="dst">The destination image of the same format and the same size as <paramref name="src"/>.</param>
            <param name="sp">The spatial window radius.</param>
            <param name="sr">The color window radius.</param>
            <param name="maxLevel">Maximum level of the pyramid for the segmentation.</param>
        </member>
        <member name="M:OpenCV.Net.CV.PyrMeanShiftFiltering(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double,System.Int32,OpenCV.Net.TermCriteria)">
            <summary>
            Performs initial step of meanshift segmentation of an image.
            </summary>
            <param name="src">The source 8-bit, 3-channel image.</param>
            <param name="dst">The destination image of the same format and the same size as <paramref name="src"/>.</param>
            <param name="sp">The spatial window radius.</param>
            <param name="sr">The color window radius.</param>
            <param name="maxLevel">Maximum level of the pyramid for the segmentation.</param>
            <param name="termcrit">Termination criteria: when to stop meanshift iterations.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Watershed(OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Performs marker-based image segmentation using the watershed algorithm.
            </summary>
            <param name="image">The input 8-bit 3-channel image.</param>
            <param name="markers">
            The input/output 32-bit single-channel image (map) of markers. It should have the
            same size as <paramref name="image"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Sobel(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the first, second, third or mixed image derivatives using an extended Sobel operator.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="xorder">The order of the derivative x.</param>
            <param name="yorder">The order of the derivative y.</param>
            <param name="apertureSize">Size of the extended Sobel kernel, must be 1, 3, 5 or 7.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Laplace(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32)">
            <summary>
            Calculates the Laplacian of an image.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="apertureSize">
            Size of the extended Sobel kernel used to compute derivatives,
            must be 1, 3, 5 or 7.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.CvtColor(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.ColorConversion)">
            <summary>
            Converts an image from one color space to another.
            </summary>
            <param name="src">The input image, 8-bit unsigned, 16-bit unsigned or single-precision floating-point.</param>
            <param name="dst">The output image of the same size and depth as <paramref name="src"/>.</param>
            <param name="code">The color space conversion to apply.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Resize(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.SubPixelInterpolation)">
            <summary>
            Resizes an image.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="interpolation">The interpolation method.</param>
        </member>
        <member name="M:OpenCV.Net.CV.WarpAffine(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat,OpenCV.Net.WarpFlags)">
            <summary>
            Applies an affine transformation to an image.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="mapMatrix">The 2 x 3 transformation matrix.</param>
            <param name="flags">A combination of interpolation methods and operational flags.</param>
        </member>
        <member name="M:OpenCV.Net.CV.WarpAffine(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat,OpenCV.Net.WarpFlags,OpenCV.Net.Scalar)">
            <summary>
            Applies an affine transformation to an image.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="mapMatrix">The 2 x 3 transformation matrix.</param>
            <param name="flags">A combination of interpolation methods and operational flags.</param>
            <param name="fillval">A value used to fill outliers.</param>
        </member>
        <member name="M:OpenCV.Net.CV.GetAffineTransform(OpenCV.Net.Point2f[],OpenCV.Net.Point2f[],OpenCV.Net.Mat)">
            <summary>
            Calculates the affine transform from three corresponding points.
            </summary>
            <param name="src">Coordinates of three triangle vertices in the source image.</param>
            <param name="dst">Coordinates of the three corresponding triangle vertices in the destination image.</param>
            <param name="mapMatrix">The destination 2 x 3 transformation matrix.</param>
            <returns>The destination 2 x 3 transformation matrix.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.GetRotationMatrix2D(OpenCV.Net.Point2f,System.Double,System.Double,OpenCV.Net.Mat)">
            <summary>
            Calculates the affine matrix of 2d rotation.
            </summary>
            <param name="center">Center of the rotation in the source image.</param>
            <param name="angle">
            The rotation angle in degrees. Positive values mean counter-clockwise rotation
            (the coordinate origin is assumed to be the top-left corner).
            </param>
            <param name="scale">Isotropic scale factor.</param>
            <param name="mapMatrix">The destination 2 x 3 transformation matrix.</param>
            <returns>The destination 2 x 3 transformation matrix.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.WarpPerspective(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat,OpenCV.Net.WarpFlags)">
            <summary>
            Applies a perspective transformation to an image.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="mapMatrix">The 3 x 3 transformation matrix.</param>
            <param name="flags">A combination of interpolation methods and operational flags.</param>
        </member>
        <member name="M:OpenCV.Net.CV.WarpPerspective(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat,OpenCV.Net.WarpFlags,OpenCV.Net.Scalar)">
            <summary>
            Applies a perspective transformation to an image.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="mapMatrix">The 3 x 3 transformation matrix.</param>
            <param name="flags">A combination of interpolation methods and operational flags.</param>
            <param name="fillval">A value used to fill outliers.</param>
        </member>
        <member name="M:OpenCV.Net.CV.GetPerspectiveTransform(OpenCV.Net.Point2f[],OpenCV.Net.Point2f[],OpenCV.Net.Mat)">
            <summary>
            Calculates the perspective transform from four corresponding points.
            </summary>
            <param name="src">Coordinates of four quadrangle vertices in the source image.</param>
            <param name="dst">Coordinates of the four corresponding quadrangle vertices in the destination image.</param>
            <param name="mapMatrix">The destination 3 x 3 transformation matrix.</param>
            <returns>The destination 3 x 3 transformation matrix.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.Remap(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.WarpFlags)">
            <summary>
            Applies a generic geometrical transformation to the image. The method transforms the source image
            using the specified map for each individual pixel coordinates.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="mapx">
            The map of x-coordinates, 32-bit single-channel floating-point image or
            16-bit 2-channel signed integer image. Fixed-point version is faster.
            </param>
            <param name="mapy">
            The map of y-coordinates, 32-bit single-channel floating-point image or
            16-bit single-channel unsigned integer image. Fixed-point version is faster.
            </param>
            <param name="flags">A combination of interpolation methods and operational flags.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Remap(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.WarpFlags,OpenCV.Net.Scalar)">
            <summary>
            Applies a generic geometrical transformation to the image. The method transforms the source image
            using the specified map for each individual pixel coordinates.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="mapx">
            The map of x-coordinates, 32-bit single-channel floating-point image or
            16-bit 2-channel signed integer image.
            </param>
            <param name="mapy">
            The map of y-coordinates, 32-bit single-channel floating-point image or
            16-bit single-channel unsigned integer image.
            </param>
            <param name="flags">A combination of interpolation methods and operational flags.</param>
            <param name="fillval">A value used to fill outliers.</param>
        </member>
        <member name="M:OpenCV.Net.CV.ConvertMaps(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Converts image transformation maps from floating-point to integer fixed-point for
            fast remapping operation.
            </summary>
            <param name="mapx">The map of x-coordinates, 32-bit single-channel floating-point image.</param>
            <param name="mapy">The map of y-coordinates, 32-bit single-channel floating-point image.</param>
            <param name="mapxy">The output map of xy-coordinates, 16-bit 2-channel signed integer image.</param>
            <param name="mapalpha">The output alpha map, 16-bit single-channel unsigned integer image.</param>
        </member>
        <member name="M:OpenCV.Net.CV.LogPolar(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Point2f,System.Double,OpenCV.Net.WarpFlags)">
            <summary>
            Performs forward or inverse log-polar image transform. The function emulates
            human "foveal" vision. In-place operation is not supported.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="center">The transformation center; where the output precision is maximal.</param>
            <param name="M">Magnitude scale parameter for polar transformation.</param>
            <param name="flags">A combination of interpolation methods and operational flags.</param>
        </member>
        <member name="M:OpenCV.Net.CV.LinearPolar(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Point2f,System.Double,OpenCV.Net.WarpFlags)">
            <summary>
            Performs forward or inverse linear-polar image transform. The function emulates
            human "foveal" vision. In-place operation is not supported.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="center">The transformation center; where the output precision is maximal.</param>
            <param name="maxRadius">The maximum radius of polar transformation.</param>
            <param name="flags">A combination of interpolation methods and operational flags.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Undistort2(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Transforms an image to compensate for lens distortion.
            </summary>
            <param name="src">The input (distorted) image.</param>
            <param name="dst">The output (corrected) image with same size and type as <paramref name="src"/>.</param>
            <param name="cameraMatrix">The input camera matrix.</param>
            <param name="distortionCoeffs">The vector of distortion coefficients.</param>
            <param name="newCameraMatrix">
            Regulates the particular subset of the source image that will be visible in the corrected image.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.InitUndistortMap(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Computes an undistortion map.
            </summary>
            <param name="cameraMatrix">The input camera matrix.</param>
            <param name="distortionCoeffs">The 4 or 5 element vector of distortion coefficients.</param>
            <param name="mapx">
            The output map of x-coordinates, 32-bit single-channel floating-point image or
            16-bit 2-channel signed integer image. Fixed-point version is faster.
            </param>
            <param name="mapy">
            The output map of y-coordinates, 32-bit single-channel floating-point image or
            16-bit single-channel unsigned integer image. Fixed-point version is faster.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.InitUndistortRectifyMap(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Computes the undistortion and rectification transformation map.
            </summary>
            <param name="cameraMatrix">The input camera matrix.</param>
            <param name="distortionCoeffs">The 4 or 5 element vector of distortion coefficients.</param>
            <param name="R">
            The optional rectification transformation in object space (3x3 matrix). If it is <b>null</b>
            the identity transform is used.
            </param>
            <param name="newCameraMatrix">The new camera matrix.</param>
            <param name="mapx">
            The output map of x-coordinates, 32-bit single-channel floating-point image or
            16-bit 2-channel signed integer image. Fixed-point version is faster.
            </param>
            <param name="mapy">
            The output map of y-coordinates, 32-bit single-channel floating-point image or
            16-bit single-channel unsigned integer image. Fixed-point version is faster.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.UndistortPoints(OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Computes the ideal point coordinates from the observed point coordinates.
            </summary>
            <param name="src">The observed point coordinates, 2xN or Nx2 single-channel or 1xN or Nx1 2-channel.</param>
            <param name="dst">
            The output ideal point coordinates, after undistortion and reverse perspective transformation,
            same format as <paramref name="src"/>.
            </param>
            <param name="cameraMatrix">The input camera matrix.</param>
            <param name="distortionCoeffs">The 4 or 5 element vector of distortion coefficients.</param>
            <param name="R">
            The optional rectification transformation in object space (3x3 matrix). If it is <b>null</b>
            the identity transform is used.
            </param>
            <param name="P">
            The optional new camera matrix (3x3) or the new projection matrix (3x4). If it is <b>null</b>
            the identity new camera matrix is used.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Erode(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.IplConvKernel,System.Int32)">
            <summary>
            Erodes an image by using a specific structuring element.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="element">
            The structuring element used for erosion. If it is <b>null</b>, a 3x3 rectangular
            structuring element is used.
            </param>
            <param name="iterations">The number of times erosion is applied.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Dilate(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.IplConvKernel,System.Int32)">
            <summary>
            Dilates an image by using a specific structuring element.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="element">
            The structuring element used for dilation. If it is <b>null</b>, a 3x3 rectangular
            structuring element is used.
            </param>
            <param name="iterations">The number of times dilation is applied.</param>
        </member>
        <member name="M:OpenCV.Net.CV.MorphologyEx(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.IplConvKernel,OpenCV.Net.MorphologicalOperation,System.Int32)">
            <summary>
            Performs advanced morphological transformations.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image.</param>
            <param name="temp">
            Temporary image, required for <see cref="F:OpenCV.Net.MorphologicalOperation.Gradient"/> and in-place
            operation of <see cref="F:OpenCV.Net.MorphologicalOperation.TopHat"/> and <see cref="F:OpenCV.Net.MorphologicalOperation.BlackHat"/>.
            </param>
            <param name="element">The structuring element used for morphological transformation.</param>
            <param name="operation">The type of morphological transformation applied.</param>
            <param name="iterations">The number of times erosion and dilation are applied.</param>
        </member>
        <member name="M:OpenCV.Net.CV.SampleLine``1(OpenCV.Net.Arr,OpenCV.Net.Point,OpenCV.Net.Point,OpenCV.Net.LineType)">
            <summary>
            Samples the raster line elements.
            </summary>
            <typeparam name="TElement">The type of the elements in the image.</typeparam>
            <param name="image">The image to sample the line from.</param>
            <param name="pt1">Starting line point.</param>
            <param name="pt2">Ending line point.</param>
            <param name="connectivity">The scanned line connectivity for Bresenham's algorithm, either 4 or 8.</param>
            <returns>The buffer containing the sampled line elements.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.GetRectSubPix(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Point2f)">
            <summary>
            Retrieves the pixel rectangle from an image with sub-pixel accuracy.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image containing the extracted rectangle.</param>
            <param name="center">
            Floating point coordinates of the extracted rectangle center within the source image.
            The center must be inside the image.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.GetQuadrangleSubPix(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat)">
            <summary>
            Retrieves the pixel quadrangle from an image with sub-pixel accuracy.
            </summary>
            <param name="src">The source image.</param>
            <param name="dst">The destination image containing the extracted quadrangle.</param>
            <param name="mapMatrix">The 2 x 3 transformation matrix.</param>
        </member>
        <member name="M:OpenCV.Net.CV.MatchTemplate(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.TemplateMatchingMethod)">
            <summary>
            Compares a template against overlapped image regions.
            </summary>
            <param name="image">The image where the search is running; should be 8-bit or 32-bit floating-point.</param>
            <param name="templ">
            Searched template; must not be greater than <paramref name="image"/> and have the same data type.
            </param>
            <param name="result">A map of comparison results; single-channel 32-bit floating-point.</param>
            <param name="method">Specifies the way the template must be compared with the image regions.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CalcEMD2(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.DistanceType,System.Func{System.Single,System.Single,System.Single},OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Computes the earth mover distance between two weighted point sets (signatures).
            </summary>
            <param name="signature1">
            The first signature array. Must be floating-point and consist of rows containing the
            histogram bin count followed by its coordinates.
            </param>
            <param name="signature2">
            The second signature array. Must be floating-point and consist of rows containing the
            histogram bin count followed by its coordinates.
            </param>
            <param name="distanceType">The type of metric to use for computing the earth mover distance.</param>
            <param name="distanceFunc">The custom distance function used for computing the earth mover distance.</param>
            <param name="costMatrix">The user-defined cost matrix.</param>
            <param name="flow">The resultant flow matrix.</param>
            <returns>The earth mover distance between the two signatures.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.CalcEMD2(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.DistanceType,System.Func{System.Single,System.Single,System.Single},OpenCV.Net.Arr,OpenCV.Net.Arr,System.Single@)">
            <summary>
            Computes the earth mover distance between two weighted point sets (signatures).
            </summary>
            <param name="signature1">
            The first signature array. Must be floating-point and consist of rows containing the
            histogram bin count followed by its coordinates.
            </param>
            <param name="signature2">
            The second signature array. Must be floating-point and consist of rows containing the
            histogram bin count followed by its coordinates.
            </param>
            <param name="distanceType">The type of metric to use for computing the earth mover distance.</param>
            <param name="distanceFunc">The custom distance function used for computing the earth mover distance.</param>
            <param name="costMatrix">The user-defined cost matrix.</param>
            <param name="flow">The resultant flow matrix.</param>
            <param name="lowerBound">
            The optional lower boundary of the distance between the two signatures that is a distance between
            mass centers.
            </param>
            <returns>The earth mover distance between the two signatures.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.FindContours(OpenCV.Net.Arr,OpenCV.Net.MemStorage,OpenCV.Net.Seq@)">
            <summary>
            Finds the contours in a binary image.
            </summary>
            <param name="image">
            The source image, 8-bit single channel. Non-zero pixels are treated as ones,
            zero pixels remain zero, i.e. the image is treated as binary.
            </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="firstContour">The reference to the first outer contour.</param>
            <returns>The number of retrieved contours.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.FindContours(OpenCV.Net.Arr,OpenCV.Net.MemStorage,OpenCV.Net.Seq@,System.Int32,OpenCV.Net.ContourRetrieval,OpenCV.Net.ContourApproximation)">
            <summary>
            Finds the contours in a binary image.
            </summary>
            <param name="image">
            The source image, 8-bit single channel. Non-zero pixels are treated as ones,
            zero pixels remain zero, i.e. the image is treated as binary.
            </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="firstContour">The reference to the first outer contour.</param>
            <param name="headerSize">Size of the sequence header.</param>
            <param name="mode">Specifies the contour retrieval mode.</param>
            <param name="method">Specifies the contour approximation method.</param>
            <returns>The number of retrieved contours.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.FindContours(OpenCV.Net.Arr,OpenCV.Net.MemStorage,OpenCV.Net.Seq@,System.Int32,OpenCV.Net.ContourRetrieval,OpenCV.Net.ContourApproximation,OpenCV.Net.Point)">
            <summary>
            Finds the contours in a binary image.
            </summary>
            <param name="image">The 8-bit, single channel, binary source image.</param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="firstContour">The reference to the first outer contour.</param>
            <param name="headerSize">Size of the sequence header.</param>
            <param name="mode">Specifies the contour retrieval mode.</param>
            <param name="method">Specifies the contour approximation method.</param>
            <param name="offset">
            An offset, by which every contour point is shifted. This is useful if the
            contours are extracted from an image ROI but should then be analyzed in
            the whole image context.
            </param>
            <returns>The number of retrieved contours.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.StartFindContours(OpenCV.Net.Arr,OpenCV.Net.MemStorage,System.Int32,OpenCV.Net.ContourRetrieval,OpenCV.Net.ContourApproximation,OpenCV.Net.Point)">
            <summary>
            Initializes the contour scanning process.
            </summary>
            <param name="image">The 8-bit, single channel, binary source image.</param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="headerSize">Size of the sequence header.</param>
            <param name="mode">Specifies the contour retrieval mode.</param>
            <param name="method">Specifies the contour approximation method.</param>
            <param name="offset">
            An offset, by which every contour point is shifted. This is useful if the
            contours are extracted from an image ROI but should then be analyzed in
            the whole image context.
            </param>
            <returns>
            A reference to the <see cref="T:OpenCV.Net.ContourScanner"/> instance that can be
            used to iterate over the retrieved contours.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.ApproxChains(OpenCV.Net.Seq,OpenCV.Net.MemStorage,OpenCV.Net.ContourApproximation,System.Double,System.Int32,System.Boolean)">
            <summary>
            Approximates Freeman chain(s) with a polygonal curve.
            </summary>
            <param name="srcSeq">The Freeman chain that can refer to other chains.</param>
            <param name="storage">Storage location for the resulting polylines.</param>
            <param name="method">Specifies the contour approximation method.</param>
            <param name="parameter">Not used.</param>
            <param name="minimalPerimeter">
            Approximates only those contours whose perimeters are greater or equal than <paramref name="minimalPerimeter"/>.
            Other chains are removed from the resulting structure.
            </param>
            <param name="recursive">
            If <b>true</b>, the function approximates all chains that can be accessed from
            <paramref name="srcSeq"/> by using either <see cref="P:OpenCV.Net.Seq.HNext"/> or <see cref="P:OpenCV.Net.Seq.VPrev"/>
            links; otherwise, the single chain is approximated.
            </param>
            <returns>The function returns the reference to the first resultant contour.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.ApproxPoly(OpenCV.Net.Seq,System.Int32,OpenCV.Net.MemStorage,OpenCV.Net.PolygonApproximation,System.Double,System.Boolean)">
            <summary>
            Approximates polygonal curve(s) with the specified precision.
            </summary>
            <param name="srcSeq">The input sequence.</param>
            <param name="headerSize">Header size of the approximated curve(s).</param>
            <param name="storage">
            Container for the approximated contours. If <b>null</b>, the input sequence
            storage is used.
            </param>
            <param name="method">The polygon approximation method.</param>
            <param name="parameter">
            Method-specific parameter. In case of <see cref="F:OpenCV.Net.PolygonApproximation.DouglasPeucker"/>
            it is a desired approximation accuracy.
            </param>
            <param name="parameter2">
            Indicates whether the single sequence should be approximated, or all the sequences
            on the same level and below <paramref name="srcSeq"/>.
            </param>
            <returns>
            A reference to the first approximated curve.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.ArcLength(OpenCV.Net.CVHandle)">
            <summary>
            Calculates the contour perimeter or the curve length.
            </summary>
            <param name="curve">Sequence or array of the curve points.</param>
            <returns>
            The length of the curve as the sum of the lengths of segments between subsequent points.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.ArcLength(OpenCV.Net.CVHandle,OpenCV.Net.SeqSlice,System.Nullable{System.Boolean})">
            <summary>
            Calculates the contour perimeter or the curve length.
            </summary>
            <param name="curve">Sequence or array of the curve points.</param>
            <param name="slice">
            Starting and ending points of the curve. By default, the whole curve length is calculated.
            </param>
            <param name="isClosed">
            Indicates whether or not the curve is closed. If <b>null</b> and the input is a sequence,
            the sequence flags are examined to determine whether the curve is closed. Otherwise,
            it is assumed unclosed.
            </param>
            <returns>
            The length of the curve as the sum of the lengths of segments between subsequent points.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.ContourPerimeter(OpenCV.Net.CVHandle)">
            <summary>
            Calculates the contour perimeter.
            </summary>
            <param name="contour">Sequence or array of the contour points.</param>
            <returns>
            The perimeter of the closed contour as the sum of the lengths of segments between
            subsequent points.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.BoundingRect(OpenCV.Net.CVHandle,System.Boolean)">
            <summary>
            Calculates the up-right bounding rectangle of a point set.
            </summary>
            <param name="points">Sequence or array of points.</param>
            <param name="update">
            Indicates whether or not to update the <see cref="P:OpenCV.Net.Contour.Rect"/> field.
            </param>
            <returns>The up-right bounding rectangle for a 2d point set.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.ContourArea(OpenCV.Net.CVHandle)">
            <summary>
            Calculates the area of a whole contour or contour section.
            </summary>
            <param name="contour">Sequence or array of vertices.</param>
            <returns>The area of the whole contour or contour section.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.ContourArea(OpenCV.Net.CVHandle,OpenCV.Net.SeqSlice,System.Boolean)">
            <summary>
            Calculates the area of a whole contour or contour section.
            </summary>
            <param name="contour">Sequence or array of vertices.</param>
            <param name="slice">
            Starting and ending points of the contour section of interest. By default, the
            area of the whole contour is calculated.
            </param>
            <param name="oriented">
            If <b>false</b>, the absolute area will be returned; otherwise the returned value
            might be negative.
            </param>
            <returns>The area of the whole contour or contour section.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.MinAreaRect2(OpenCV.Net.CVHandle,OpenCV.Net.MemStorage)">
            <summary>
            Finds the circumscribed rectangle of minimal area for a given 2D point set.
            </summary>
            <param name="points">Sequence or array of points.</param>
            <param name="storage">Optional temporary memory storage.</param>
            <returns>The oriented rectangle with minimal area for the specified <paramref name="points"/>.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.MinEnclosingCircle(OpenCV.Net.CVHandle,OpenCV.Net.Point2f@,System.Single@)">
            <summary>
            Finds the circumscribed circle of minimal area for a given 2D point set.
            </summary>
            <param name="points">Sequence or array of points.</param>
            <param name="center">Output parameter; the center of the enclosing circle.</param>
            <param name="radius">Output parameter; the radius of the enclosing circle.</param>
            <returns>
            <b>true</b> if the resulting circle contains all the input points and <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.MatchShapes(OpenCV.Net.CVHandle,OpenCV.Net.CVHandle,OpenCV.Net.ShapeMatchingMethod,System.Double)">
            <summary>
            Compares two shapes using their Hu moments.
            </summary>
            <param name="object1">First contour or grayscale image.</param>
            <param name="object2">Second contour or grayscale image.</param>
            <param name="method">The shape comparison method.</param>
            <param name="parameter">Method-specific parameter (not used).</param>
            <returns>The distance between the two shapes.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.ConvexHull2(OpenCV.Net.CVHandle,OpenCV.Net.CVHandle,OpenCV.Net.ShapeOrientation,System.Boolean)">
            <summary>
            Finds the convex hull of a point set.
            </summary>
            <param name="input">Sequence or array of points.</param>
            <param name="hullStorage">The array or memory storage that will store the convex hull.</param>
            <param name="orientation">Desired orientation of the convex hull.</param>
            <param name="returnPoints">
            If <b>true</b>, the points themselves will be stored in the hull instead of the indices.
            </param>
            <returns>A sequence containing the points in the convex hull.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.CheckContourConvexity(OpenCV.Net.CVHandle)">
            <summary>
            Tests contour convexity. The contour must be simple, without self-intersections.
            </summary>
            <param name="contour">Sequence or array of points.</param>
            <returns>
            A value indicating whether or not the <paramref name="contour"/> is convex.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.ConvexityDefects(OpenCV.Net.CVHandle,OpenCV.Net.Seq,OpenCV.Net.MemStorage)">
            <summary>
            Finds the convexity defects of a contour.
            </summary>
            <param name="contour">Input contour.</param>
            <param name="convexhull">
            Convex hull obtained using <see cref="M:OpenCV.Net.CV.ConvexHull2(OpenCV.Net.CVHandle,OpenCV.Net.CVHandle,OpenCV.Net.ShapeOrientation,System.Boolean)"/> that should contain pointers or indices
            to the contour points, not the hull points themselves (i.e. the returnPoints of <see cref="M:OpenCV.Net.CV.ConvexHull2(OpenCV.Net.CVHandle,OpenCV.Net.CVHandle,OpenCV.Net.ShapeOrientation,System.Boolean)"/>
            parameter should be <b>false</b>).
            </param>
            <param name="storage">Container for the output sequence of convexity defects.</param>
            <returns>A sequence of <see cref="T:OpenCV.Net.ConvexityDefect"/> structures.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.FitEllipse2(OpenCV.Net.CVHandle)">
            <summary>
            Fits an ellipse around a set of 2D points.
            </summary>
            <param name="points">Sequence or array of points.</param>
            <returns>
            The rotated rectangle representing the ellipse best fit around the point set.
            The size of the box represents the full lengths of the ellipse axes.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.MaxRect(OpenCV.Net.Rect,OpenCV.Net.Rect)">
            <summary>
            Finds minimum rectangle containing two given rectangles.
            </summary>
            <param name="rect1">The first rectangle.</param>
            <param name="rect2">The second rectangle.</param>
            <returns>
            The minimum rectangle containing <paramref name="rect1"/> and <paramref name="rect2"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.BoxPoints(OpenCV.Net.RotatedRect,OpenCV.Net.Point2f[])">
            <summary>
            Finds the box vertices.
            </summary>
            <param name="box">The input rotated rectangle.</param>
            <param name="pt">The array of box vertices.</param>
        </member>
        <member name="M:OpenCV.Net.CV.PointPolygonTest(OpenCV.Net.CVHandle,OpenCV.Net.Point2f,System.Boolean)">
            <summary>
            Point in contour test.
            </summary>
            <param name="contour">Input contour.</param>
            <param name="pt">The point to be tested against the <paramref name="contour"/>.</param>
            <param name="measureDist">
            If <b>true</b> the method estimates the distance from the point to the nearest
            contour edge. Otherwise, only the test result itself is stored.
            </param>
            <returns>
            If <paramref name="measureDist"/> is <b>true</b>, the return value is a signed distance
            between the point and the nearest contour edge. Otherwise, +1, -1 and 0 are returned,
            respectively, when the point is inside the contour, outside or lies on an edge.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.CalcBayesianProb(OpenCV.Net.Histogram[],OpenCV.Net.Histogram[])">
            <summary>
            Calculates bayesian probabilistic histograms.
            </summary>
            <param name="src">The source histograms.</param>
            <param name="dst">The destination histograms.</param>
        </member>
        <member name="M:OpenCV.Net.CV.EqualizeHist(OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Equalizes the histogram of a grayscale image.
            </summary>
            <param name="src">Source 8-bit single channel image.</param>
            <param name="dst">Destination image of the same size and type as <paramref name="src"/>.</param>
        </member>
        <member name="M:OpenCV.Net.CV.DistTransform(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.DistanceType,System.Int32,System.Single[],OpenCV.Net.Arr,OpenCV.Net.DistanceLabel)">
            <summary>
            Calculates the distance to the closest zero pixel for all non-zero pixels of the source image.
            </summary>
            <param name="src">8-bit, single-channel (binary) source image.</param>
            <param name="dst">Output image with calculated distances (32-bit floating-point, single-channel).</param>
            <param name="distanceType">The type of distance to use.</param>
            <param name="maskSize">Size of the distance transform mask; can be 3 or 5.</param>
            <param name="mask">
            User-defined mask in the case of a user-defined distance. It consists of 2 numbers
            (horizontal/vertical shift cost, diagonal shift cost) in the case of a 3x3 mask and 3 numbers
            (horizontal/vertical shift cost, diagonal shift cost, knight’s move cost) in the case of a 5x5 mask.
            </param>
            <param name="labels">
            The optional output 2d array of integer type labels, the same size as <paramref name="src"/>
            and <paramref name="dst"/>.
            </param>
            <param name="labelType">Specifies the content of the output label array.</param>
        </member>
        <member name="M:OpenCV.Net.CV.Threshold(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double,OpenCV.Net.ThresholdTypes)">
            <summary>
            Applies a fixed-level threshold to array elements.
            </summary>
            <param name="src">Source array.</param>
            <param name="dst">Destination array; must be either the same type as <paramref name="src"/> or 8-bit.</param>
            <param name="threshold">Threshold value.</param>
            <param name="maxValue">
            Maximum value to use with <see cref="F:OpenCV.Net.ThresholdTypes.Binary"/> and <see cref="F:OpenCV.Net.ThresholdTypes.BinaryInv"/>.
            </param>
            <param name="thresholdType">The type of threshold to apply.</param>
            <returns>The computed threshold value in case <see cref="F:OpenCV.Net.ThresholdTypes.Otsu"/> is used.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.AdaptiveThreshold(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,OpenCV.Net.AdaptiveThresholdMethod,OpenCV.Net.ThresholdTypes,System.Int32,System.Double)">
            <summary>
            Applies an adaptive threshold to an array.
            </summary>
            <param name="src">Source 8-bit single-channel image.</param>
            <param name="dst">Destination image; will have the same size and the same type as <paramref name="src"/>.</param>
            <param name="maxValue">The non-zero value assigned to the pixels for which the condition is satisfied.</param>
            <param name="adaptiveMethod">The adaptive thresholding algorithm to use.</param>
            <param name="thresholdType">The type of threshold to apply.</param>
            <param name="blockSize">
            The size of a pixel neighborhood that is used to calculate a threshold value for the pixel, must be
            an odd number greater or equal to 3.
            </param>
            <param name="C">The constant subtracted from the mean or weighted mean.</param>
        </member>
        <member name="M:OpenCV.Net.CV.FloodFill(OpenCV.Net.Arr,OpenCV.Net.Point,OpenCV.Net.Scalar)">
            <summary>
            Fills a connected component with the given color.
            </summary>
            <param name="image">
            Input/output 1- or 3-channel, 8-bit or floating-point image. It is modified by the
            function unless <see cref="F:OpenCV.Net.FloodFillFlags.MaskOnly"/> is set.
            </param>
            <param name="seedPoint">The starting point.</param>
            <param name="newVal">New value of the repainted domain pixels.</param>
        </member>
        <member name="M:OpenCV.Net.CV.FloodFill(OpenCV.Net.Arr,OpenCV.Net.Point,OpenCV.Net.Scalar,OpenCV.Net.Scalar)">
            <summary>
            Fills a connected component with the given color.
            </summary>
            <param name="image">
            Input/output 1- or 3-channel, 8-bit or floating-point image. It is modified by the
            function unless <see cref="F:OpenCV.Net.FloodFillFlags.MaskOnly"/> is set.
            </param>
            <param name="seedPoint">The starting point.</param>
            <param name="newVal">New value of the repainted domain pixels.</param>
            <param name="lowerDiff">
            Maximal lower brightness/color difference between the currently observed pixel and
            one of its neighbors belonging to the component, or a seed pixel being added to the
            component.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.FloodFill(OpenCV.Net.Arr,OpenCV.Net.Point,OpenCV.Net.Scalar,OpenCV.Net.Scalar,OpenCV.Net.Scalar)">
            <summary>
            Fills a connected component with the given color.
            </summary>
            <param name="image">
            Input/output 1- or 3-channel, 8-bit or floating-point image. It is modified by the
            function unless <see cref="F:OpenCV.Net.FloodFillFlags.MaskOnly"/> is set.
            </param>
            <param name="seedPoint">The starting point.</param>
            <param name="newVal">New value of the repainted domain pixels.</param>
            <param name="lowerDiff">
            Maximal lower brightness/color difference between the currently observed pixel and
            one of its neighbors belonging to the component, or a seed pixel being added to the
            component.
            </param>
            <param name="upperDiff">
            Maximal upper brightness/color difference between the currently observed pixel and
            one of its neighbors belonging to the component, or a seed pixel being added to the
            component.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.FloodFill(OpenCV.Net.Arr,OpenCV.Net.Point,OpenCV.Net.Scalar,OpenCV.Net.Scalar,OpenCV.Net.Scalar,OpenCV.Net.ConnectedComp@,OpenCV.Net.FloodFillFlags,OpenCV.Net.Arr)">
            <summary>
            Fills a connected component with the given color.
            </summary>
            <param name="image">
            Input/output 1- or 3-channel, 8-bit or floating-point image. It is modified by the
            function unless <see cref="F:OpenCV.Net.FloodFillFlags.MaskOnly"/> is set.
            </param>
            <param name="seedPoint">The starting point.</param>
            <param name="newVal">New value of the repainted domain pixels.</param>
            <param name="lowerDiff">
            Maximal lower brightness/color difference between the currently observed pixel and
            one of its neighbors belonging to the component, or a seed pixel being added to the
            component.
            </param>
            <param name="upperDiff">
            Maximal upper brightness/color difference between the currently observed pixel and
            one of its neighbors belonging to the component, or a seed pixel being added to the
            component.
            </param>
            <param name="comp">
            Output parameter that will be initialized with information about the repainted domain.
            </param>
            <param name="flags">The operation flags.</param>
            <param name="mask">
            Operation mask, should be a single-channel 8-bit image, 2 pixels wider and 2 pixels taller
            than <paramref name="image"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Canny(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double,System.Int32)">
            <summary>
            Implements the Canny algorithm for edge detection.
            </summary>
            <param name="image">Input image.</param>
            <param name="edges">Single-channel image to store the edges found by the function.</param>
            <param name="threshold1">
            The first threshold. The smallest value between <paramref name="threshold1"/> and
            <paramref name="threshold2"/> is used for edge linking, the largest value is used
            to find the initial segments of strong edges.
            </param>
            <param name="threshold2">
            The second threshold. The smallest value between <paramref name="threshold1"/> and
            <paramref name="threshold2"/> is used for edge linking, the largest value is used
            to find the initial segments of strong edges.
            </param>
            <param name="apertureSize">
            Aperture parameter for the Sobel operator (see <see cref="M:OpenCV.Net.CV.Sobel(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32,System.Int32)"/>).
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.PreCornerDetect(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32)">
            <summary>
            Calculates the feature map for corner detection.
            </summary>
            <param name="image">Input image.</param>
            <param name="corners">Image to store the corner candidates.</param>
            <param name="apertureSize">
            Aperture parameter for the Sobel operator (see <see cref="M:OpenCV.Net.CV.Sobel(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32,System.Int32)"/>).
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.CornerEigenValsAndVecs(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32)">
            <summary>
            Calculates eigenvalues and eigenvectors of image blocks for corner detection.
            </summary>
            <param name="image">Input image.</param>
            <param name="eigenvv">Image to store the results. It must be 6 times wider than the input image.</param>
            <param name="blockSize">
            The pixel neighborhood size. The method calculates the covariance matrix of derivatives
            over the neighborhood and finds its eigenvectors and eigenvalues.
            </param>
            <param name="apertureSize">
            Aperture parameter for the Sobel operator (see <see cref="M:OpenCV.Net.CV.Sobel(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32,System.Int32)"/>).
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.CornerMinEigenVal(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32)">
            <summary>
            Calculates the minimal eigenvalue of gradient matrices for corner detection.
            </summary>
            <param name="image">Input image.</param>
            <param name="eigenval">
            Image to store the minimal eigenvalues. Should have the same size as <paramref name="image"/>.
            </param>
            <param name="blockSize">
            The pixel neighborhood size (see <see cref="M:OpenCV.Net.CV.CornerEigenValsAndVecs(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32)"/>).
            </param>
            <param name="apertureSize">
            Aperture parameter for the Sobel operator (see <see cref="M:OpenCV.Net.CV.Sobel(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32,System.Int32)"/>).
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.CornerHarris(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32,System.Double)">
            <summary>
            Implements the Harris edge detector.
            </summary>
            <param name="image">Input image.</param>
            <param name="harrisResponse">
            Image to store the Harris detector responses. Should have the same size as <paramref name="image"/>.
            </param>
            <param name="blockSize">
            The pixel neighborhood size (see <see cref="M:OpenCV.Net.CV.CornerEigenValsAndVecs(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32)"/>).
            </param>
            <param name="apertureSize">
            Aperture parameter for the Sobel operator (see <see cref="M:OpenCV.Net.CV.Sobel(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32,System.Int32)"/>).
            </param>
            <param name="k">Harris detector free parameter.</param>
        </member>
        <member name="M:OpenCV.Net.CV.FindCornerSubPix(OpenCV.Net.Arr,OpenCV.Net.Point2f[],OpenCV.Net.Size,OpenCV.Net.Size,OpenCV.Net.TermCriteria)">
            <summary>
            Refines the corner locations.
            </summary>
            <param name="image">Input image.</param>
            <param name="corners">Initial coordinates of the input corners; refined coordinates on output.</param>
            <param name="win">Half of the side length of the search window.</param>
            <param name="zeroZone">
            Half of the size of the dead region in the middle of the search zone over which the summation
            is not done. It is used sometimes to avoid possible singularities of the autocorrelation matrix.
            The value of (-1,-1) indicates that there is no such size.
            </param>
            <param name="criteria">
            Criteria for termination of the iterative process of corner refinement.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.GoodFeaturesToTrack(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Point2f[],System.Int32@,System.Double,System.Double,OpenCV.Net.Arr,System.Int32,System.Boolean,System.Double)">
            <summary>
            Determines strong corners on an image.
            </summary>
            <param name="image">The source 8-bit or floating-point 32-bit, single-channel image.</param>
            <param name="eigImage">
            Temporary floating-point 32-bit image, the same size as <paramref name="image"/>.
            </param>
            <param name="tempImage">
            Another temporary image, the same size and format as <paramref name="eigImage"/>.
            </param>
            <param name="corners">Output parameter; detected corners.</param>
            <param name="cornerCount">Output parameter; number of detected corners.</param>
            <param name="qualityLevel">
            Multiplier for the max/min eigenvalue; specifies the minimal accepted quality of image corners.
            </param>
            <param name="minDistance">
            Limit, specifying the minimum possible distance between the returned corners; Euclidian distance
            is used.
            </param>
            <param name="mask">
            Region of interest. The function selects points either in the specified region or in the whole
            image if the mask is <b>null</b>.
            </param>
            <param name="blockSize">
            Size of the averaging block, passed to the underlying corner detection method.
            </param>
            <param name="useHarris">
            If <b>true</b>, Harris operator (<see cref="M:OpenCV.Net.CV.CornerHarris(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32,System.Double)"/>) is used instead of default
            (<see cref="M:OpenCV.Net.CV.CornerMinEigenVal(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32)"/>).
            </param>
            <param name="k">
            Free parameter of Harris detector; used only if <paramref name="useHarris"/> is <b>true</b>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.HoughLines2(OpenCV.Net.Arr,OpenCV.Net.CVHandle,OpenCV.Net.HoughLinesMethod,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Finds lines in a binary image using a Hough transform.
            </summary>
            <param name="image">
            The 8-bit, single-channel, binary source image. In the case of a probabilistic method,
            the image is modified by the function.
            </param>
            <param name="lineStorage">
            The storage for the lines that are detected. It can be a memory storage (in this case
            a sequence of lines is created in the storage and returned by the function) or single
            row/single column matrix (<see cref="T:OpenCV.Net.Mat"/>) of a particular type.
            </param>
            <param name="method">The Hough transform variant.</param>
            <param name="rho">Distance resolution in pixel-related units.</param>
            <param name="theta">Angle resolution measured in radians.</param>
            <param name="threshold">
            Threshold parameter. A line is returned by the function if the corresponding accumulator
            value is greater than <paramref name="threshold"/>.
            </param>
            <param name="param1">
            The first method-dependent parameter. For the classical Hough transform it is not used.
            For the probabilistic Hough transform it is the minimum line length. For the multi-scale
            Hough transform it is the divisor for the distance resolution <paramref name="rho"/>.
            </param>
            <param name="param2">
            The second method-dependent parameter. For the classical Hough transform it is not used.
            For the probabilistic Hough transform it is the maximum gap between line segments lying on
            the same line to treat them as a single line segment (i.e. to join them). For the multi-scale
            Hough transform it is the divisor for the angle resolution <paramref name="theta"/>.
            </param>
            <returns>
            A sequence of lines in case <paramref name="lineStorage"/> is a memory storage.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.HoughCircles(OpenCV.Net.Arr,OpenCV.Net.CVHandle,OpenCV.Net.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Finds circles in a grayscale image using a Hough transform.
            </summary>
            <param name="image">The 8-bit, single-channel, grayscale input image.</param>
            <param name="circleStorage">
            The storage for the circles that are detected. It can be a memory storage (in this case
            a sequence of circles is created in the storage and returned by the function) or single
            row/single column matrix (<see cref="T:OpenCV.Net.Mat"/>) of a particular type.
            </param>
            <param name="method">
            The Hough transform method. Currently, only <see cref="F:OpenCV.Net.HoughCirclesMethod.Gradient"/>
            is implemented.
            </param>
            <param name="dp">
            The inverse ratio of the accumulator resolution to the image resolution. For example, if
            <paramref name="dp"/> = 1, the accumulator will have the same resolution as the input image,
            if <paramref name="dp"/> = 2 the accumulator will have half as big width and height, etc.
            </param>
            <param name="minDist">
            Minimum distance between the centers of the detected circles. If the parameter is too small,
            multiple neighbor circles may be falsely detected in addition to a true one. If it is too large,
            some circles may be missed.
            </param>
            <param name="param1">
            The first method-specific parameter. in the case of <see cref="F:OpenCV.Net.HoughCirclesMethod.Gradient"/>
            it is the higher threshold of the two passed to the canny edge detector (the lower one will be
            twice smaller).
            </param>
            <param name="param2">
            The second method-specific parameter. in the case of <see cref="F:OpenCV.Net.HoughCirclesMethod.Gradient"/>
            it is the accumulator threshold at the center detection stage. The smaller it is, the more false
            circles may be detected. Circles, corresponding to the larger accumulator values, will be
            returned first.
            </param>
            <param name="minRadius">Minimum circle radius.</param>
            <param name="maxRadius">Maximum circle radius.</param>
            <returns>
            A sequence of lines in case <paramref name="circleStorage"/> is a memory storage.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.FitLine(OpenCV.Net.Arr,OpenCV.Net.DistanceType,System.Double,System.Double,System.Double,System.Single[])">
            <summary>
            Fits line to 2D or 3D point set.
            </summary>
            <param name="points">
            Sequence or array of 2D or 3D points with 32-bit integer or floating-point coordinates.
            </param>
            <param name="distType">The distance used for fitting.</param>
            <param name="param">
            Numerical parameter (C) for some types of distances, if 0 then some optimal value is chosen.
            </param>
            <param name="reps">
            Sufficient accuracy for radius (distance between the coordinate origin and the line);
            0.01 would be a good default.
            </param>
            <param name="aeps">Sufficient accuracy for angle; 0.01 would be a good default.</param>
            <param name="line">
            The output line parameters. In case of 2D fitting it is an array of 4 floats (vx, vy, x0, y0)
            where (vx, vy) is a normalized vector collinear to the line and (x0, y0) is some point on the line.
            In case of 3D fitting it is an array of 6 floats (vx, vy, vz, x0, y0, z0) where (vx, vy, vz) is a
            normalized vector collinear to the line and (x0, y0, z0) is some point on the line.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.Inpaint(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,OpenCV.Net.InpaintMethod)">
            <summary>
            Restores the selected region in an image using the region neighborhood.
            </summary>
            <param name="src">Input 8-bit 1-channel or 3-channel image.</param>
            <param name="inpaintMask">
            Inpainting mask, 8-bit 1-channel image. Non-zero pixels indicate the area that needs to be inpainted.
            </param>
            <param name="dst">Output image with the same size and type as <paramref name="src"/>.</param>
            <param name="inpaintRange">
            Radius of a circular neighborhood of each point inpainted that is considered by the algorithm.
            </param>
            <param name="flags">Specifies the inpainting method.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CalcOpticalFlowPyrLK(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Point2f[],OpenCV.Net.Point2f[],OpenCV.Net.Size,System.Int32,System.Byte[],System.Single[],OpenCV.Net.TermCriteria,OpenCV.Net.LKFlowFlags)">
            <summary>
            Calculates the optical flow for a sparse feature set using the iterative Lucas-Kanade method with pyramids.
            </summary>
            <param name="prev">First frame.</param>
            <param name="curr">Second frame.</param>
            <param name="prevPyr">
            Buffer for the pyramid for the first frame. If it is not <b>null</b>, the buffer must have a sufficient
            size to store the pyramid from level 1 to level <paramref name="level"/>; the total size of
            (width + 8) * height / 3 bytes is sufficient.
            </param>
            <param name="currPyr">
            The same as <paramref name="prevPyr"/>, for the second frame.
            </param>
            <param name="prevFeatures">Array of points for which the flow needs to be found.</param>
            <param name="currFeatures">
            Array of 2D points containing the calculated new positions of the input features in the second image.
            </param>
            <param name="winSize">Size of the search window of each pyramid level.</param>
            <param name="level">
            Maximal pyramid level number. If 0 , pyramids are not used (single level), if 1, two levels are used, etc.
            </param>
            <param name="status">
            Every element of the status array is set to either 1, if the flow for the corresponding feature has been
            found, or 0 otherwise.
            </param>
            <param name="trackError">
            Array of numbers containing the difference between patches around the original and moved points.
            Optional parameter; can be <b>null</b>.
            </param>
            <param name="criteria">
            Specifies when the iteration process of finding the flow for each point on each pyramid level should be stopped.
            </param>
            <param name="flags">Specifies operation flags.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CalcAffineFlowPyrLK(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Point2f[],OpenCV.Net.Point2f[],System.Single[],OpenCV.Net.Size,System.Int32,System.Byte[],System.Single[],OpenCV.Net.TermCriteria,OpenCV.Net.LKFlowFlags)">
            <summary>
            Calculates the affine optical flow for a sparse feature set using a modification of the iterative
            Lucas-Kanade method with pyramids.
            </summary>
            <param name="prev">First frame.</param>
            <param name="curr">Second frame.</param>
            <param name="prevPyr">
            Buffer for the pyramid for the first frame. If it is not <b>null</b>, the buffer must have a sufficient
            size to store the pyramid from level 1 to level <paramref name="level"/>; the total size of
            (width + 8) * height / 3 bytes is sufficient.
            </param>
            <param name="currPyr">
            The same as <paramref name="prevPyr"/>, for the second frame.
            </param>
            <param name="prevFeatures">Array of points for which the flow needs to be found.</param>
            <param name="currFeatures">
            Array of 2D points containing the calculated new positions of the input features in the second image.
            </param>
            <param name="matrices">
            The array of affine transformation matrices for each feature point. Matrices are stored sequentially with
            the format m(i) = [a00, a01, a10, a11] for each feature index, i.
            </param>
            <param name="winSize">Size of the search window of each pyramid level.</param>
            <param name="level">
            Maximal pyramid level number. If 0 , pyramids are not used (single level), if 1, two levels are used, etc.
            </param>
            <param name="status">
            Every element of the status array is set to either 1, if the flow for the corresponding feature has been
            found, or 0 otherwise.
            </param>
            <param name="trackError">
            Array of numbers containing the difference between patches around the original and moved points.
            Optional parameter; can be <b>null</b>.
            </param>
            <param name="criteria">
            Specifies when the iteration process of finding the flow for each point on each pyramid level should be stopped.
            </param>
            <param name="flags">Specifies operation flags.</param>
        </member>
        <member name="M:OpenCV.Net.CV.EstimateRigidTransform(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Mat,System.Boolean)">
            <summary>
            Estimates the optimal affine transformation between two images or two point sets.
            </summary>
            <param name="A">
            First input 2D point set stored as a <see cref="T:OpenCV.Net.Mat"/>, or an image.
            </param>
            <param name="B">
            Second input 2D point set of the same size and the same type as <paramref name="A"/>, or another image.
            </param>
            <param name="M">The output optimal 2x3 affine transformation matrix.</param>
            <param name="fullAffine">
            If <b>true</b>, the function finds an optimal affine transformation with no additional restrictions
            (6 degrees of freedom). Otherwise, the class of transformations to choose from is limited to
            combinations of translation, rotation, and uniform scaling (5 degrees of freedom).
            </param>
            <returns>
            <b>true</b> if the optimal affine transformation was successfully found; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.CalcOpticalFlowFarneback(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,OpenCV.Net.FarnebackFlowFlags)">
            <summary>
            Computes dense optical flow using Gunnar Farneback’s algorithm.
            </summary>
            <param name="prev">The first 8-bit single-channel input image.</param>
            <param name="next">The second input image of the same size and the same type as <paramref name="prev"/>.</param>
            <param name="flow">
            The computed flow image; will have the same size as <paramref name="prev"/> and two 32-bit floating-point channels.
            </param>
            <param name="pyrScale">
            Specifies the image scale (less than 1) to build the pyramids for each image. 0.5 means the classical pyramid,
            where each next layer is twice smaller than the previous.
            </param>
            <param name="levels">
            The number of pyramid layers, including the initial image. 1 means that no extra layers are created and only
            the original images are used.
            </param>
            <param name="winSize">
            The averaging window size; The larger values increase the algorithm robustness to image noise and give more
            chances for fast motion detection, but yield a more blurred motion field.
            </param>
            <param name="iterations">The number of iterations the algorithm does at each pyramid level.</param>
            <param name="polyN">
            Size of the pixel neighborhood used to find polynomial expansion in each pixel. The larger values mean that
            the image will be approximated with smoother surfaces, yielding a more robust algorithm and a more blurred
            motion field. Typically, <paramref name="polyN"/> is set to 5 or 7.
            </param>
            <param name="polySigma">
            Standard deviation of the Gaussian that is used to smooth derivatives that are used as a basis for the
            polynomial expansion. For a <paramref name="polyN"/> of 5 you can set <paramref name="polySigma"/> to 1.1,
            while for a <paramref name="polyN"/> of 7 a good value would be 1.5.
            </param>
            <param name="flags">Specifies operation flags.</param>
        </member>
        <member name="M:OpenCV.Net.CV.UpdateMotionHistory(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double)">
            <summary>
            Updates the motion history image by a moving silhouette.
            </summary>
            <param name="silhouette">Silhouette mask that has non-zero pixels where the motion occurs.</param>
            <param name="mhi">
            Motion history image, that is updated by the function (single-channel, 32-bit floating-point).
            </param>
            <param name="timestamp">Current time in milliseconds or other units.</param>
            <param name="duration">Maximal duration of the motion track in the same units as <paramref name="timestamp"/>.</param>
        </member>
        <member name="M:OpenCV.Net.CV.CalcMotionGradient(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double,System.Int32)">
            <summary>
            Calculates the gradient orientation of a motion history image.
            </summary>
            <param name="mhi">Motion history image.</param>
            <param name="mask">Output mask image with non-zero pixels where the motion gradient data is correct.</param>
            <param name="orientation">Motion gradient orientation image; contains angles from 0 to 360 degrees.</param>
            <param name="delta1">
            The minimal or maximal gradient threshold used to determine whether a given pixel motion gradient data
            is correct.
            </param>
            <param name="delta2">
            The minimal or maximal gradient threshold used to determine whether a given pixel motion gradient data
            is correct.
            </param>
            <param name="apertureSize">
            Aperture size of derivative operators used by the function. See <see cref="M:OpenCV.Net.CV.Sobel(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Int32,System.Int32,System.Int32)"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.CV.CalcGlobalOrientation(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double)">
            <summary>
            Calculates the global motion orientation of some selected region.
            </summary>
            <param name="orientation">Motion gradient orientation image calculated by <see cref="M:OpenCV.Net.CV.CalcMotionGradient(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double,System.Int32)"/>.</param>
            <param name="mask">
            Mask image. It may be a conjunction of a valid gradient mask, obtained with <see cref="M:OpenCV.Net.CV.CalcMotionGradient(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double,System.Int32)"/>
            and the mask of the region, whose direction needs to be calculated.
            </param>
            <param name="mhi">Motion history image.</param>
            <param name="timestamp">Current time in milliseconds or other units.</param>
            <param name="duration">Maximal duration of the motion track in the same units as <paramref name="timestamp"/>.</param>
            <returns>
            The general motion direction angle in the selected region, between 0 degrees and 360 degrees.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.SegmentMotion(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.MemStorage,System.Double,System.Double)">
            <summary>
            Segments a whole motion into separate moving parts.
            </summary>
            <param name="mhi">Motion history image.</param>
            <param name="segMask">
            Output image where the segmentation mask should be stored, single-channel, 32-bit floating-point.
            Different motion segments are marked with individual values (1,2,...).
            </param>
            <param name="storage">Memory storage that will contain a sequence of motion connected components.</param>
            <param name="timestamp">Current time in milliseconds or other units.</param>
            <param name="segThresh">
            Segmentation threshold; recommended to be equal to the interval between motion history “steps” or greater.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.ConnectedComp"/> structures, one for each motion component. The motion direction
            for every component can be calculated with <see cref="M:OpenCV.Net.CV.CalcGlobalOrientation(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double)"/> using the extracted mask of
            the particular component.
            </returns>
        </member>
        <member name="M:OpenCV.Net.CV.CamShift(OpenCV.Net.Arr,OpenCV.Net.Rect,OpenCV.Net.TermCriteria,OpenCV.Net.ConnectedComp@)">
            <summary>
            Finds the object center, size, and orientation.
            </summary>
            <param name="probImage">Back projection of object histogram (see <see cref="M:OpenCV.Net.Histogram.CalcArrBackProject(OpenCV.Net.Arr[],OpenCV.Net.Arr)"/>).</param>
            <param name="window">Initial search window.</param>
            <param name="criteria">Criteria applied to determine when the window search should be finished.</param>
            <param name="comp">
            Resultant structure that contains the converged search window coordinates (<see cref="F:OpenCV.Net.ConnectedComp.Rect"/> field)
            and the sum of all of the pixels inside the window (<see cref="F:OpenCV.Net.ConnectedComp.Area"/> field).
            </param>
            <returns><b>true</b> if the search was successful; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.CamShift(OpenCV.Net.Arr,OpenCV.Net.Rect,OpenCV.Net.TermCriteria,OpenCV.Net.ConnectedComp@,OpenCV.Net.RotatedRect@)">
            <summary>
            Finds the object center, size, and orientation.
            </summary>
            <param name="probImage">Back projection of object histogram (see <see cref="M:OpenCV.Net.Histogram.CalcArrBackProject(OpenCV.Net.Arr[],OpenCV.Net.Arr)"/>).</param>
            <param name="window">Initial search window.</param>
            <param name="criteria">Criteria applied to determine when the window search should be finished.</param>
            <param name="comp">
            Resultant structure that contains the converged search window coordinates (<see cref="F:OpenCV.Net.ConnectedComp.Rect"/> field)
            and the sum of all of the pixels inside the window (<see cref="F:OpenCV.Net.ConnectedComp.Area"/> field).
            </param>
            <param name="box">Circumscribed box for the object.</param>
            <returns><b>true</b> if the search was successful; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:OpenCV.Net.CV.MeanShift(OpenCV.Net.Arr,OpenCV.Net.Rect,OpenCV.Net.TermCriteria,OpenCV.Net.ConnectedComp@)">
            <summary>
            Finds the object center on back projection.
            </summary>
            <param name="probImage">Back projection of object histogram (see <see cref="M:OpenCV.Net.Histogram.CalcArrBackProject(OpenCV.Net.Arr[],OpenCV.Net.Arr)"/>).</param>
            <param name="window">Initial search window.</param>
            <param name="criteria">Criteria applied to determine when the window search should be finished.</param>
            <param name="comp">
            Resultant structure that contains the converged search window coordinates (<see cref="F:OpenCV.Net.ConnectedComp.Rect"/> field)
            and the sum of all of the pixels inside the window (<see cref="F:OpenCV.Net.ConnectedComp.Area"/> field).
            </param>
            <returns><b>true</b> if the search was successful; <b>false</b> otherwise.</returns>
        </member>
        <member name="T:OpenCV.Net.FundamentalMatrixMethod">
            <summary>
            Specifies available methods for computing the fundamental matrix.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FundamentalMatrixMethod.Point7">
            <summary>
            Specifies a 7-point algorithm (N = 7).
            </summary>
        </member>
        <member name="F:OpenCV.Net.FundamentalMatrixMethod.Point8">
            <summary>
            Specifies an 8-point algorithm (N >= 8).
            </summary>
        </member>
        <member name="F:OpenCV.Net.FundamentalMatrixMethod.LMedS">
            <summary>
            Specifies the Least-Median robust method (N >= 8).
            </summary>
        </member>
        <member name="F:OpenCV.Net.FundamentalMatrixMethod.Ransac">
            <summary>
            Specifies the RANSAC algorithm (N >= 8).
            </summary>
        </member>
        <member name="T:OpenCV.Net.FindHomographyMethod">
            <summary>
            Specifies available methods for computing the homography matrix.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FindHomographyMethod.Regular">
            <summary>
            Specifies a regular method using all the points.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FindHomographyMethod.LMedS">
            <summary>
            Specifies a Least-Median robust method.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FindHomographyMethod.Ransac">
            <summary>
            Specifies a RANSAC-based robust method.
            </summary>
        </member>
        <member name="T:OpenCV.Net.ChessboardCalibrationFlags">
            <summary>
            Specifies available operation flags for finding chessboard corners.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ChessboardCalibrationFlags.None">
            <summary>
            Specifies that no operation flags are active.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ChessboardCalibrationFlags.AdaptiveThreshold">
            <summary>
            Specifies that adaptive thresholding should be used to convert the image to black and white,
            rather than a fixed threshold level (computed from the average image brightness).
            </summary>
        </member>
        <member name="F:OpenCV.Net.ChessboardCalibrationFlags.NormalizeImage">
            <summary>
            Specifies the image gamma should be normalized with <see cref="M:OpenCV.Net.CV.EqualizeHist(OpenCV.Net.Arr,OpenCV.Net.Arr)"/> before
            applying fixed or adaptive thresholding.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ChessboardCalibrationFlags.FilterQuads">
            <summary>
            Specifies that additional criteria (like contour area, perimeter, square-like shape) should be
            used to filter out false quads extracted at the contour retrieval stage.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ChessboardCalibrationFlags.FastCheck">
            <summary>
            Specifies that a fast check should be run on the image that looks for chessboard corners, and
            shortcuts the call if none is found. This can drastically speed up the call in the degenerate
            condition when no chessboard is observed.
            </summary>
        </member>
        <member name="T:OpenCV.Net.CameraCalibrationFlags">
            <summary>
            Specifies available operation flags for camera calibration.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CameraCalibrationFlags.None">
            <summary>
            Specifies that no operation flags are active.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CameraCalibrationFlags.UseIntrinsicGuess">
            <summary>
            Specifies that some or all of the intrinsic parameters should be optimized according
            to the specified flags. Initial values are provided by the user.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CameraCalibrationFlags.FixAspectRatio">
            <summary>
            Specifies that the function considers only fy as a free parameter. The ratio fx/fy
            stays the same as in the input camera matrix . When <see cref="F:OpenCV.Net.CameraCalibrationFlags.UseIntrinsicGuess"/>
            is not set, the actual input values of fx and fy are ignored; only their ratio is
            computed and used further.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CameraCalibrationFlags.FixPrincipalPoint">
            <summary>
            Specifies that the principal point is not changed during the global optimization.
            It stays at the center or at a different location specified when
            <see cref="F:OpenCV.Net.CameraCalibrationFlags.UseIntrinsicGuess"/> is set too.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CameraCalibrationFlags.ZeroTangentialDistortion">
            <summary>
            Specifies that tangential distortion coefficients (p1, p2) are set to zeros and
            stay zero.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CameraCalibrationFlags.FixFocalLength">
            <summary>
            Specifies that the focal length (fx, fy) is not changed during the optimization.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CameraCalibrationFlags.FixK1">
            <summary>
            Specifies that the k1 radial distortion coefficient is not changed during the optimization.
            If <see cref="F:OpenCV.Net.CameraCalibrationFlags.UseIntrinsicGuess"/> is set, the coefficient from the supplied coefficients
            matrix is used. Otherwise, it is set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CameraCalibrationFlags.FixK2">
            <summary>
            Specifies that the k2 radial distortion coefficient is not changed during the optimization.
            If <see cref="F:OpenCV.Net.CameraCalibrationFlags.UseIntrinsicGuess"/> is set, the coefficient from the supplied coefficients
            matrix is used. Otherwise, it is set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CameraCalibrationFlags.FixK3">
            <summary>
            Specifies that the k3 radial distortion coefficient is not changed during the optimization.
            If <see cref="F:OpenCV.Net.CameraCalibrationFlags.UseIntrinsicGuess"/> is set, the coefficient from the supplied coefficients
            matrix is used. Otherwise, it is set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CameraCalibrationFlags.FixK4">
            <summary>
            Specifies that the k4 radial distortion coefficient is not changed during the optimization.
            If <see cref="F:OpenCV.Net.CameraCalibrationFlags.UseIntrinsicGuess"/> is set, the coefficient from the supplied coefficients
            matrix is used. Otherwise, it is set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CameraCalibrationFlags.FixK5">
            <summary>
            Specifies that the k5 radial distortion coefficient is not changed during the optimization.
            If <see cref="F:OpenCV.Net.CameraCalibrationFlags.UseIntrinsicGuess"/> is set, the coefficient from the supplied coefficients
            matrix is used. Otherwise, it is set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CameraCalibrationFlags.FixK6">
            <summary>
            Specifies that the k6 radial distortion coefficient is not changed during the optimization.
            If <see cref="F:OpenCV.Net.CameraCalibrationFlags.UseIntrinsicGuess"/> is set, the coefficient from the supplied coefficients
            matrix is used. Otherwise, it is set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CameraCalibrationFlags.RationalModel">
            <summary>
            Coefficients k4, k5, and k6 are enabled. To provide the backward compatibility, this extra
            flag should be explicitly specified to make the calibration function use the rational model
            and return 8 coefficients. If the flag is not set, the function computes and returns only
            5 distortion coefficients.
            </summary>
        </member>
        <member name="T:OpenCV.Net.StereoCalibrationFlags">
            <summary>
            Specifies available operation flags for stereo camera calibration.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.None">
            <summary>
            Specifies that no operation flags are active.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.UseIntrinsicGuess">
            <summary>
            Specifies that some or all of the intrinsic parameters should be optimized according
            to the specified flags. Initial values are provided by the user.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.FixAspectRatio">
            <summary>
            Specifies that the function considers only fy as a free parameter. The ratio fx/fy
            stays the same as in the input camera matrix . When <see cref="F:OpenCV.Net.StereoCalibrationFlags.UseIntrinsicGuess"/>
            is not set, the actual input values of fx and fy are ignored; only their ratio is
            computed and used further.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.FixPrincipalPoint">
            <summary>
            Specifies that the principal point is not changed during the global optimization.
            It stays at the center or at a different location specified when
            <see cref="F:OpenCV.Net.StereoCalibrationFlags.UseIntrinsicGuess"/> is set too.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.ZeroTangentialDistortion">
            <summary>
            Specifies that tangential distortion coefficients (p1, p2) are set to zeros and
            stay zero.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.FixFocalLength">
            <summary>
            Specifies that the focal length (fx, fy) is not changed during the optimization.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.FixK1">
            <summary>
            Specifies that the k1 radial distortion coefficient is not changed during the optimization.
            If <see cref="F:OpenCV.Net.StereoCalibrationFlags.UseIntrinsicGuess"/> is set, the coefficient from the supplied coefficients
            matrix is used. Otherwise, it is set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.FixK2">
            <summary>
            Specifies that the k2 radial distortion coefficient is not changed during the optimization.
            If <see cref="F:OpenCV.Net.StereoCalibrationFlags.UseIntrinsicGuess"/> is set, the coefficient from the supplied coefficients
            matrix is used. Otherwise, it is set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.FixK3">
            <summary>
            Specifies that the k3 radial distortion coefficient is not changed during the optimization.
            If <see cref="F:OpenCV.Net.StereoCalibrationFlags.UseIntrinsicGuess"/> is set, the coefficient from the supplied coefficients
            matrix is used. Otherwise, it is set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.FixIntrinsic">
            <summary>
            Specifies that the camera matrix and distortion coefficients should not be changed, so that
            only R, T, E and F matrices are estimated.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.SameFocalLength">
            <summary>
            Specifies the constraint that both cameras should have the same focal length (fx, fy).
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.FixK4">
            <summary>
            Specifies that the k4 radial distortion coefficient is not changed during the optimization.
            If <see cref="F:OpenCV.Net.StereoCalibrationFlags.UseIntrinsicGuess"/> is set, the coefficient from the supplied coefficients
            matrix is used. Otherwise, it is set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.FixK5">
            <summary>
            Specifies that the k5 radial distortion coefficient is not changed during the optimization.
            If <see cref="F:OpenCV.Net.StereoCalibrationFlags.UseIntrinsicGuess"/> is set, the coefficient from the supplied coefficients
            matrix is used. Otherwise, it is set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.FixK6">
            <summary>
            Specifies that the k6 radial distortion coefficient is not changed during the optimization.
            If <see cref="F:OpenCV.Net.StereoCalibrationFlags.UseIntrinsicGuess"/> is set, the coefficient from the supplied coefficients
            matrix is used. Otherwise, it is set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoCalibrationFlags.RationalModel">
            <summary>
            Coefficients k4, k5, and k6 are enabled. To provide the backward compatibility, this extra
            flag should be explicitly specified to make the calibration function use the rational model
            and return 8 coefficients. If the flag is not set, the function computes and returns only
            5 distortion coefficients.
            </summary>
        </member>
        <member name="T:OpenCV.Net.StereoRectificationFlags">
            <summary>
            Specifies available operation flags for stereo rectification.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoRectificationFlags.None">
            <summary>
            Specifies that no operation flags are active.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoRectificationFlags.ZeroDisparity">
            <summary>
            Specifies that the function makes the principal points of each camera have the same pixel
            coordinates in the rectified views.
            </summary>
        </member>
        <member name="T:OpenCV.Net.StereoBMPreFilterType">
            <summary>
            Specifies available types of stereo block matching pre-filtering.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoBMPreFilterType.NormalizedResponse">
            <summary>
            Specifies that no pre-filter is used and the output is just the
            normalized response.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoBMPreFilterType.XSobel">
            <summary>
            Specifies the x-sobel pre-filter.
            </summary>
        </member>
        <member name="T:OpenCV.Net.StereoBMPreset">
            <summary>
            Specifies available presets of stereo block matching algorithm parameters.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoBMPreset.Basic">
            <summary>
            Specifies parameters suitable for general cameras.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoBMPreset.FishEye">
            <summary>
            Specifies parameters suitable for wide-angle cameras.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StereoBMPreset.Narrow">
            <summary>
            Specifies parameters suitable for narrow-angle cameras.
            </summary>
        </member>
        <member name="T:OpenCV.Net.AttrList">
            <summary>
            Represents a list of attributes.
            </summary>
        </member>
        <member name="P:OpenCV.Net.AttrList.Item(System.String)">
            <summary>
            Gets the attribute value with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The value associated with the specified <paramref name="name"/>.</returns>
        </member>
        <member name="P:OpenCV.Net.AttrList.Next">
            <summary>
            Gets the next chunk of attributes in the list.
            </summary>
        </member>
        <member name="T:OpenCV.Net.AvgComp">
            <summary>
            Represents a structure that contains the bounding box and number of neighbors of objects
            detected by <see cref="M:OpenCV.Net.HaarClassifierCascade.DetectObjects(OpenCV.Net.Arr,OpenCV.Net.MemStorage,System.Double,System.Int32,OpenCV.Net.HaarDetectObjectFlags,OpenCV.Net.Size,OpenCV.Net.Size)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.AvgComp.Rect">
            <summary>
            The bounding rectangle for the object (average rectangle of a group).
            </summary>
        </member>
        <member name="F:OpenCV.Net.AvgComp.Neighbors">
            <summary>
            The number of neighbor rectangles in the group.
            </summary>
        </member>
        <member name="T:OpenCV.Net.FileNode">
            <summary>
            Represents a file storage node. When XML/YAML file is read, it is first parsed and stored in the
            memory as a hierarchical collection of nodes. Each node can be a “leaf”, that is, contain a
            single number or a string, or be a collection of other nodes.
            </summary>
        </member>
        <member name="T:OpenCV.Net.CVHandle">
            <summary>
            Represents a native handle to OpenCV structures and classes.
            </summary>
        </member>
        <member name="M:OpenCV.Net.CVHandle.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.CVHandle"/> class, specifying
            whether the handle is to be reliably released.
            </summary>
            <param name="ownsHandle">
            <b>true</b> to reliably release the handle during the finalization phase;
            <b>false</b> to prevent reliable release (not recommended).
            </param>
        </member>
        <member name="M:OpenCV.Net.FileNode.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.FileNode"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.FileNode.Name">
            <summary>
            Gets the name of the node.
            </summary>
        </member>
        <member name="T:OpenCV.Net.FileStorage">
            <summary>
            Represents a storage associated with a file on disk.
            </summary>
        </member>
        <member name="M:OpenCV.Net.FileStorage.#ctor(System.String,OpenCV.Net.MemStorage,OpenCV.Net.StorageFlags,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.FileStorage"/> class and prepares the
            file storage for reading or writing data.
            </summary>
            <param name="fileName">Name of the file associated with the storage.</param>
            <param name="storage">
            Memory storage used for temporary data and for storing dynamic structures, such as
            <see cref="T:OpenCV.Net.Seq"/> or <see cref="T:OpenCV.Net.Graph"/>. If it is <b>null</b>, a temporary memory
            storage is created and used.
            </param>
            <param name="flags">Specifies operation flags associated with the new file storage.</param>
            <param name="encoding">
            Encoding of the file. Note that UTF-16 XML encoding is not supported currently and you
            should use 8-bit encoding instead.
            </param>
        </member>
        <member name="M:OpenCV.Net.FileStorage.StartWriteStruct(System.String,OpenCV.Net.StructStorageFlags,System.String,OpenCV.Net.AttrList)">
            <summary>
            Starts writing a new structure.
            </summary>
            <param name="name">
            Name of the written structure. The structure can be accessed by this name when the storage is read.
            </param>
            <param name="structFlags">Operation flags associated with the written structure.</param>
            <param name="typeName">
            Optional parameter, the object type name. In case of XML it is written as a type_id attribute of the
            structure opening tag. In the case of YAML it is written after a colon following the structure name.
            </param>
            <param name="attributes">Not used in the current implementation.</param>
        </member>
        <member name="M:OpenCV.Net.FileStorage.EndWriteStruct">
            <summary>
            Ends the writing of a structure.
            </summary>
        </member>
        <member name="M:OpenCV.Net.FileStorage.WriteInt(System.String,System.Int32)">
            <summary>
            Writes an integer value.
            </summary>
            <param name="name">
            Name of the written value. Should be <b>null</b> if and only if the parent structure is a sequence.
            </param>
            <param name="value">The written value.</param>
        </member>
        <member name="M:OpenCV.Net.FileStorage.WriteReal(System.String,System.Double)">
            <summary>
            Writes a floating-point value.
            </summary>
            <param name="name">
            Name of the written value. Should be <b>null</b> if and only if the parent structure is a sequence.
            </param>
            <param name="value">The written value.</param>
        </member>
        <member name="M:OpenCV.Net.FileStorage.WriteString(System.String,System.String,System.Boolean)">
            <summary>
            Writes a text string.
            </summary>
            <param name="name">
            Name of the written string. Should be <b>null</b> if and only if the parent structure is a sequence.
            </param>
            <param name="value">The written string.</param>
            <param name="quote">
            If <b>true</b>, the written string is put in quotes, regardless of whether they are required.
            Otherwise, if the flag is zero, quotes are used only when they are required (e.g. when the string
            starts with a digit or contains spaces).
            </param>
        </member>
        <member name="M:OpenCV.Net.FileStorage.WriteComment(System.String,System.Boolean)">
            <summary>
            Writes a comment.
            </summary>
            <param name="comment">The written comment, single-line or multi-line.</param>
            <param name="eolComment">
            If <b>true</b>, the method tries to put the comment at the end of current line; otherwise, if the
            comment is multi-line, or if it does not fit at the end of the current line, the comment starts a new line.
            </param>
        </member>
        <member name="M:OpenCV.Net.FileStorage.Write(System.String,OpenCV.Net.CVHandle,OpenCV.Net.AttrList)">
            <summary>
            Writes an object to file storage.
            </summary>
            <param name="name">
            Name of the written object. Should be <b>null</b> if and only if the parent structure is a sequence.
            </param>
            <param name="handle">Handle to the written object.</param>
            <param name="attributes">The attributes of the object. They are specific for each particular type.</param>
        </member>
        <member name="M:OpenCV.Net.FileStorage.WriteRawData``1(``0[],System.String)">
            <summary>
            Writes multiple numbers.
            </summary>
            <typeparam name="TElement">The type of the numbers to write.</typeparam>
            <param name="source">The source array.</param>
            <param name="format">Specification of each array element.</param>
        </member>
        <member name="M:OpenCV.Net.FileStorage.GetHashedKey(System.String,System.Boolean)">
            <summary>
            Returns a unique reference for a given name.
            </summary>
            <param name="name">Literal node name.</param>
            <param name="createMissing">
            A value indicating whether an absent key should be added into the hash table.
            </param>
            <returns>
            A unique reference for each particular file node name. This reference can later be passed to the
            <see cref="M:OpenCV.Net.FileStorage.GetFileNode(OpenCV.Net.FileNode,OpenCV.Net.StringHashNode,System.Boolean)"/> method.
            </returns>
        </member>
        <member name="M:OpenCV.Net.FileStorage.GetRootFileNode(System.Int32)">
            <summary>
            Retrieves one of the top-level nodes of the file storage.
            </summary>
            <param name="streamIndex">
            Zero-based index of the stream. In most cases, there is only one stream in the file.
            </param>
            <returns>
            One of the top-level file nodes. The top-level nodes do not have a name, they correspond to the
            streams that are stored one after another in the file storage. If the index is out of range, the
            function returns <b>null</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.FileStorage.GetFileNode(OpenCV.Net.FileNode,OpenCV.Net.StringHashNode,System.Boolean)">
            <summary>
            Finds a node in a map or file storage.
            </summary>
            <param name="map">The parent map. If it is <b>null</b>, the function searches a top-level node.</param>
            <param name="key">Unique pointer to the node name, retrieved with <see cref="M:OpenCV.Net.FileStorage.GetHashedKey(System.String,System.Boolean)"/>.</param>
            <param name="createMissing">A value indicating whether an absent node should be added to the map.</param>
            <returns>The found or newly created node; <b>null</b> in case of failure.</returns>
        </member>
        <member name="M:OpenCV.Net.FileStorage.GetFileNode(OpenCV.Net.FileNode,System.String)">
            <summary>
            Finds a node in a map or file storage.
            </summary>
            <param name="map">The parent map. If it is <b>null</b>, the function searches a top-level node.</param>
            <param name="name">The file node name.</param>
            <returns>The found node or <b>null</b> in case of failure.</returns>
        </member>
        <member name="M:OpenCV.Net.FileStorage.ReadInt(OpenCV.Net.FileNode,System.Int32)">
            <summary>
            Retrieves an integer value from a file node.
            </summary>
            <param name="node">The file node.</param>
            <param name="defaultValue">The value that is returned if <paramref name="node"/> is <b>null</b>.</param>
            <returns>An integer that is represented by the file node.</returns>
        </member>
        <member name="M:OpenCV.Net.FileStorage.ReadInt(OpenCV.Net.FileNode,System.String,System.Int32)">
            <summary>
            Finds a file node and returns its integer value.
            </summary>
            <param name="map">The parent map. If it is <b>null</b>, the function searches a top-level node.</param>
            <param name="name">The node name.</param>
            <param name="defaultValue">The value that is returned if the file node is not found.</param>
            <returns>An integer that is represented by the file node.</returns>
        </member>
        <member name="M:OpenCV.Net.FileStorage.ReadReal(OpenCV.Net.FileNode,System.Double)">
            <summary>
            Retrieves a floating-point value from a file node.
            </summary>
            <param name="node">The file node.</param>
            <param name="defaultValue">The value that is returned if <paramref name="node"/> is <b>null</b>.</param>
            <returns>A floating-point value that is represented by the file node.</returns>
        </member>
        <member name="M:OpenCV.Net.FileStorage.ReadReal(OpenCV.Net.FileNode,System.String,System.Double)">
            <summary>
            Finds a file node and returns its floating-point value.
            </summary>
            <param name="map">The parent map. If it is <b>null</b>, the function searches a top-level node.</param>
            <param name="name">The node name.</param>
            <param name="defaultValue">The value that is returned if the file node is not found.</param>
            <returns>A floating-point value that is represented by the file node.</returns>
        </member>
        <member name="M:OpenCV.Net.FileStorage.ReadString(OpenCV.Net.FileNode,System.String)">
            <summary>
            Retrieves a text string from a file node.
            </summary>
            <param name="node">The file node.</param>
            <param name="defaultValue">The value that is returned if <paramref name="node"/> is <b>null</b>.</param>
            <returns>A text string that is represented by the file node.</returns>
        </member>
        <member name="M:OpenCV.Net.FileStorage.ReadString(OpenCV.Net.FileNode,System.String,System.String)">
            <summary>
            Finds a file node and returns its text string value.
            </summary>
            <param name="map">The parent map. If it is <b>null</b>, the function searches a top-level node.</param>
            <param name="name">The node name.</param>
            <param name="defaultValue">The value that is returned if the file node is not found.</param>
            <returns>A text string that is represented by the file node.</returns>
        </member>
        <member name="M:OpenCV.Net.FileStorage.Read``1(OpenCV.Net.FileNode)">
            <summary>
            Decodes an object and returns a reference to it.
            </summary>
            <typeparam name="TElement">The type of the object.</typeparam>
            <param name="node">The root object node.</param>
            <returns>The reference to the decoded object.</returns>
        </member>
        <member name="M:OpenCV.Net.FileStorage.Read``1(OpenCV.Net.FileNode,System.String)">
            <summary>
            Finds an object by name and decodes it.
            </summary>
            <typeparam name="TElement">The type of the object.</typeparam>
            <param name="map">The parent map. If it is <b>null</b>, the function searches a top-level node.</param>
            <param name="name">The node name.</param>
            <returns>The reference to the decoded object.</returns>
        </member>
        <member name="M:OpenCV.Net.FileStorage.ReadRawData``1(OpenCV.Net.FileNode,``0[],System.String)">
            <summary>
            Reads multiple numbers.
            </summary>
            <typeparam name="TElement">The type of the numbers to read.</typeparam>
            <param name="src">The file node (a sequence) to read numbers from.</param>
            <param name="dst">The destination array.</param>
            <param name="format">Specification of each array element.</param>
        </member>
        <member name="M:OpenCV.Net.FileStorage.WriteFileNode(System.String,OpenCV.Net.FileNode,System.Boolean)">
            <summary>
            Writes a file node from another file storage.
            </summary>
            <param name="newNodeName">
            New name of the file node in the destination file storage. To keep the existing name, use the
            <see cref="P:OpenCV.Net.FileNode.Name"/> property.
            </param>
            <param name="node">The written node.</param>
            <param name="embed">
            If the written node is a collection and this parameter is <b>true</b>, no extra level of hierarchy
            is created. Instead, all the elements of node are written into the currently written structure.
            Of course, map elements can only be embedded into another map, and sequence elements can only be
            embedded into another sequence.
            </param>
        </member>
        <member name="M:OpenCV.Net.FileStorage.StartNextStream">
            <summary>
            Starts the next stream in file storage. Both YAML and XML support multiple streams.
            This is useful for concatenating files or for resuming the writing process.
            </summary>
        </member>
        <member name="M:OpenCV.Net.FileStorage.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.FileStorage"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="T:OpenCV.Net.HaarClassifierCascade">
            <summary>
            Represents a cascade or tree of boosted Haar stage classifiers.
            </summary>
        </member>
        <member name="M:OpenCV.Net.HaarClassifierCascade.Load(System.String)">
            <summary>
            Loads a boosted Haar classifier cascade from a file. This method ensures that all dependencies are loaded
            and is a temporary workaround to ensure <see cref="M:OpenCV.Net.CV.Load``1(System.String,OpenCV.Net.MemStorage,System.String)"/> does not throw
            an error.
            </summary>
            <param name="fileName">The path to the trained classifier cascade.</param>
            <returns>A new instance of the <see cref="T:OpenCV.Net.HaarClassifierCascade"/> class.</returns>
        </member>
        <member name="M:OpenCV.Net.HaarClassifierCascade.DetectObjects(OpenCV.Net.Arr,OpenCV.Net.MemStorage,System.Double,System.Int32,OpenCV.Net.HaarDetectObjectFlags,OpenCV.Net.Size,OpenCV.Net.Size)">
            <summary>
            Detects objects in the image.
            </summary>
            <param name="image">Image to detect objects in.</param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles.</param>
            <param name="scaleFactor">
            The factor by which the search window is scaled between the subsequent scans, 1.1 means increasing window by 10%.
            </param>
            <param name="minNeighbors">
            Minimum number (minus 1) of neighbor rectangles that make up an object. All the groups of a smaller number of
            rectangles than <paramref name="minNeighbors"/>-1 are rejected. If it is 0, the method does not do any grouping
            at all and returns all the detected candidate rectangles, which may be useful if the user wants to apply a
            customized grouping procedure.
            </param>
            <param name="flags">Mode of operation.</param>
            <param name="minSize">
            Minimum window size. By default, it is set to the size of samples the classifier has been trained on
            (20x20 for face detection).
            </param>
            <param name="maxSize">Maximum window size. By default, it is set to the total image size.</param>
            <returns>The sequence of grouped (or ungrouped) object rectangles.</returns>
        </member>
        <member name="M:OpenCV.Net.HaarClassifierCascade.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.HaarClassifierCascade"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="T:OpenCV.Net.KalmanFilter">
            <summary>
            Represents a Kalman filter state.
            </summary>
        </member>
        <member name="M:OpenCV.Net.KalmanFilter.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.KalmanFilter"/> class with the specified dimensionality.
            </summary>
            <param name="dynamParams">Dimensionality of the state vector.</param>
            <param name="measureParams">Dimensionality of the measurement vector.</param>
            <param name="controlParams">Dimensionality of the control vector.</param>
        </member>
        <member name="M:OpenCV.Net.KalmanFilter.Predict">
            <summary>
            Estimates the subsequent model state.
            </summary>
            <returns>The estimated state vector.</returns>
        </member>
        <member name="M:OpenCV.Net.KalmanFilter.Predict(OpenCV.Net.Mat)">
            <summary>
            Estimates the subsequent model state.
            </summary>
            <param name="control">The control vector u(k) or <b>null</b> if there is no control.</param>
            <returns>The estimated state vector.</returns>
        </member>
        <member name="M:OpenCV.Net.KalmanFilter.Correct(OpenCV.Net.Mat)">
            <summary>
            Adjusts the model state.
            </summary>
            <param name="measurement">The measurement vector z(k).</param>
            <returns>The adjusted state estimate.</returns>
        </member>
        <member name="M:OpenCV.Net.KalmanFilter.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.KalmanFilter"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.KalmanFilter.StatePredicted">
            <summary>
            Gets the predicted state vector (x'(k)): x'(k) = A * x(k - 1) + B * u(k).
            </summary>
        </member>
        <member name="P:OpenCV.Net.KalmanFilter.StateCorrected">
            <summary>
            Gets the corrected state vector (x(k)): x(k) = x'(k) + K(k) * (z(k) - H * x'(k))
            </summary>
        </member>
        <member name="P:OpenCV.Net.KalmanFilter.TransitionMatrix">
            <summary>
            Gets the state transition matrix (A).
            </summary>
        </member>
        <member name="P:OpenCV.Net.KalmanFilter.ControlMatrix">
            <summary>
            Gets the control matrix (B). Not used if there is no control.
            </summary>
        </member>
        <member name="P:OpenCV.Net.KalmanFilter.MeasurementMatrix">
            <summary>
            Gets the measurement matrix (H).
            </summary>
        </member>
        <member name="P:OpenCV.Net.KalmanFilter.ProcessNoiseCovariance">
            <summary>
            Gets the process noise covariance matrix (Q).
            </summary>
        </member>
        <member name="P:OpenCV.Net.KalmanFilter.MeasurementNoiseCovariance">
            <summary>
            Gets the measurement noise covariance matrix (R).
            </summary>
        </member>
        <member name="P:OpenCV.Net.KalmanFilter.ErrorCovariancePrior">
            <summary>
            Gets the prior error estimate covariance matrix (P'(k)): P'(k) = A * P(k - 1) * At + Q.
            </summary>
        </member>
        <member name="P:OpenCV.Net.KalmanFilter.Gain">
            <summary>
            Gets the Kalman gain matrix (K(k)): K(k) = P'(k) * Ht * inv(H * P'(k) * Ht + R).
            </summary>
        </member>
        <member name="P:OpenCV.Net.KalmanFilter.ErrorCovariancePosterior">
            <summary>
            Gets the posterior error estimate covariance matrix (P(k)): P(k) = (I - K(k) * H) * P'(k).
            </summary>
        </member>
        <member name="T:OpenCV.Net.LatentSvmDetector">
            <summary>
            Represents a trained latent SVM detector.
            </summary>
        </member>
        <member name="M:OpenCV.Net.LatentSvmDetector.DetectObjects(OpenCV.Net.IplImage,OpenCV.Net.MemStorage,System.Single,System.Int32)">
            <summary>
            Find rectangular regions in the given image that are likely to contain objects and corresponding confidence levels.
            </summary>
            <param name="image">The input image on which to detect objects.</param>
            <param name="storage">Memory storage to store the resultant sequence of the object candidate rectangles.</param>
            <param name="overlapThreshold">Threshold for the non-maximum suppression algorithm.</param>
            <param name="numThreads">Number of threads used in parallel version of the algorithm.</param>
            <returns>A sequence of detected objects of type <see cref="T:OpenCV.Net.ObjectDetection"/>.</returns>
        </member>
        <member name="M:OpenCV.Net.LatentSvmDetector.Load(System.String)">
            <summary>
            Loads trained detector from a file.
            </summary>
            <param name="fileName">Name of the file containing the description of a trained detector.</param>
            <returns>A newly created instance of the <see cref="T:OpenCV.Net.LatentSvmDetector"/> class.</returns>
        </member>
        <member name="M:OpenCV.Net.LatentSvmDetector.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.LatentSvmDetector"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="T:OpenCV.Net.ObjectDetection">
            <summary>
            Represents a structure that contains the bounding box and confidence level for a detected object.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ObjectDetection.Rect">
            <summary>
            The bounding box for the detected object.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ObjectDetection.Score">
            <summary>
            The detection confidence level.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Point2d">
            <summary>
            Represents a 2D point with double-precision floating-point coordinates.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Point2d.X">
            <summary>
            The x-coordinate of the point.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Point2d.Y">
            <summary>
            The y-coordinate of the point.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Point2d.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Point2d"/> structure from the specified coordinates.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
        </member>
        <member name="M:OpenCV.Net.Point2d.#ctor(OpenCV.Net.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Point2d"/> structure from the specified
            <see cref="T:OpenCV.Net.Point"/> structure.
            </summary>
            <param name="point">The <see cref="T:OpenCV.Net.Point"/> used to initialize this instance.</param>
        </member>
        <member name="M:OpenCV.Net.Point2d.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:OpenCV.Net.Point2d"/> structure.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:OpenCV.Net.Point2d"/> structure.</returns>
        </member>
        <member name="M:OpenCV.Net.Point2d.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref="T:OpenCV.Net.Point2d"/> structure
            with the same coordinates as this <see cref="T:OpenCV.Net.Point2d"/> structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is a <see cref="T:OpenCV.Net.Point2d"/> and has the
            same X and Y coordinates as this <see cref="T:OpenCV.Net.Point2d"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2d.Equals(OpenCV.Net.Point2d)">
            <summary>
            Returns a value indicating whether this instance has the same coordinates
            as a specified <see cref="T:OpenCV.Net.Point2d"/> structure.
            </summary>
            <param name="other">The <see cref="T:OpenCV.Net.Point2d"/> structure to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same X and Y coordinates as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2d.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:OpenCV.Net.Point2d"/>
            structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="F:OpenCV.Net.Point2d.X"/> and <see cref="F:OpenCV.Net.Point2d.Y"/>
            values of this <see cref="T:OpenCV.Net.Point2d"/> structure.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2d.op_Equality(OpenCV.Net.Point2d,OpenCV.Net.Point2d)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Point2d"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point2d"/> structure on the left of the equality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point2d"/> structure on the right of the equality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have equal X and Y coordinates;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2d.op_Inequality(OpenCV.Net.Point2d,OpenCV.Net.Point2d)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Point2d"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point2d"/> structure on the left of the inequality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point2d"/> structure on the right of the inequality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ either in X or Y coordinates;
            <b>false</b> if <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2d.op_Addition(OpenCV.Net.Point2d,OpenCV.Net.Point2d)">
            <summary>
            Adds two <see cref="T:OpenCV.Net.Point2d"/> structures.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point2d"/> structure on the left of the addition operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point2d"/> structure on the right of the addition operator.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point2d"/> that is the result of adding the <paramref name="left"/>
            and <paramref name="right"/> points.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2d.op_Subtraction(OpenCV.Net.Point2d,OpenCV.Net.Point2d)">
            <summary>
            Subtracts two <see cref="T:OpenCV.Net.Point2d"/> structures.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point2d"/> structure on the left of the subtraction operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point2d"/> structure on the right of the subtraction operator.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point2d"/> that is the result of subtracting the <paramref name="left"/>
            and <paramref name="right"/> points.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2d.op_UnaryNegation(OpenCV.Net.Point2d)">
            <summary>
            Returns the inversion with respect to the origin of the specified <see cref="T:OpenCV.Net.Point2d"/> structure.
            </summary>
            <param name="point">The <see cref="T:OpenCV.Net.Point2d"/> structure for which to compute the inversion.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point2d"/> that is the result of inverting <paramref name="point"/> with
            respect to the origin.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2d.op_Multiply(OpenCV.Net.Point2d,System.Single)">
            <summary>
            Multiplies a <see cref="T:OpenCV.Net.Point2d"/> structure by an integer scalar.
            </summary>
            <param name="point">The <see cref="T:OpenCV.Net.Point2d"/> structure to multiply by the <paramref name="scalar"/>.</param>
            <param name="scalar">The scalar by which to multiply the <paramref name="point"/>.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point2d"/> that is the result of multiplying <paramref name="point"/> by
            <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2d.op_Multiply(System.Single,OpenCV.Net.Point2d)">
            <summary>
            Multiplies a <see cref="T:OpenCV.Net.Point2d"/> structure by an integer scalar.
            </summary>
            <param name="scalar">The scalar by which to multiply the <paramref name="point"/>.</param>
            <param name="point">The <see cref="T:OpenCV.Net.Point2d"/> structure to multiply by the <paramref name="scalar"/>.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point2d"/> that is the result of multiplying <paramref name="point"/> by
            <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.Point2d.Zero">
            <summary>
            Returns a <see cref="T:OpenCV.Net.Point2d"/> that has <see cref="F:OpenCV.Net.Point2d.X"/> and
            <see cref="F:OpenCV.Net.Point2d.Y"/> values set to zero.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Point3d">
            <summary>
            Represents a 3D point with double-precision floating-point coordinates.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Point3d.X">
            <summary>
            The x-coordinate of the point.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Point3d.Y">
            <summary>
            The y-coordinate of the point.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Point3d.Z">
            <summary>
            The z-coordinate of the point.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Point3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Point3d"/> structure from the specified coordinates.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <param name="z">The z-coordinate of the point.</param>
        </member>
        <member name="M:OpenCV.Net.Point3d.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:OpenCV.Net.Point3d"/> structure.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:OpenCV.Net.Point3d"/> structure.</returns>
        </member>
        <member name="M:OpenCV.Net.Point3d.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref="T:OpenCV.Net.Point3d"/> structure
            with the same coordinates as this <see cref="T:OpenCV.Net.Point3d"/> structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is a <see cref="T:OpenCV.Net.Point3d"/> and has the
            same X, Y and Z coordinates as this <see cref="T:OpenCV.Net.Point3d"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3d.Equals(OpenCV.Net.Point3d)">
            <summary>
            Returns a value indicating whether this instance has the same coordinates
            as a specified <see cref="T:OpenCV.Net.Point3d"/> structure.
            </summary>
            <param name="other">The <see cref="T:OpenCV.Net.Point3d"/> structure to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same X, Y and Z coordinates as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3d.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:OpenCV.Net.Point3d"/>
            structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="F:OpenCV.Net.Point3d.X"/>, <see cref="F:OpenCV.Net.Point3d.Y"/> and
            <see cref="F:OpenCV.Net.Point3d.Z"/> values of this <see cref="T:OpenCV.Net.Point3d"/> structure.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3d.op_Equality(OpenCV.Net.Point3d,OpenCV.Net.Point3d)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Point3d"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point3d"/> structure on the left of the equality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point3d"/> structure on the right of the equality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have equal X, Y and Z coordinates;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3d.op_Inequality(OpenCV.Net.Point3d,OpenCV.Net.Point3d)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Point3d"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point3d"/> structure on the left of the inequality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point3d"/> structure on the right of the inequality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ in X, Y or Z coordinates;
            <b>false</b> if <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3d.op_Addition(OpenCV.Net.Point3d,OpenCV.Net.Point3d)">
            <summary>
            Adds two <see cref="T:OpenCV.Net.Point3d"/> structures.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point3d"/> structure on the left of the addition operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point3d"/> structure on the right of the addition operator.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point3d"/> that is the result of adding the <paramref name="left"/>
            and <paramref name="right"/> points.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3d.op_Subtraction(OpenCV.Net.Point3d,OpenCV.Net.Point3d)">
            <summary>
            Subtracts two <see cref="T:OpenCV.Net.Point3d"/> structures.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point3d"/> structure on the left of the subtraction operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point3d"/> structure on the right of the subtraction operator.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point3d"/> that is the result of subtracting the <paramref name="left"/>
            and <paramref name="right"/> points.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3d.op_UnaryNegation(OpenCV.Net.Point3d)">
            <summary>
            Returns the inversion with respect to the origin of the specified <see cref="T:OpenCV.Net.Point3d"/> structure.
            </summary>
            <param name="point">The <see cref="T:OpenCV.Net.Point3d"/> structure for which to compute the inversion.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point3d"/> that is the result of inverting <paramref name="point"/> with
            respect to the origin.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3d.op_Multiply(OpenCV.Net.Point3d,System.Single)">
            <summary>
            Multiplies a <see cref="T:OpenCV.Net.Point3d"/> structure by an integer scalar.
            </summary>
            <param name="point">The <see cref="T:OpenCV.Net.Point3d"/> structure to multiply by the <paramref name="scalar"/>.</param>
            <param name="scalar">The scalar by which to multiply the <paramref name="point"/>.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point3d"/> that is the result of multiplying <paramref name="point"/> by
            <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3d.op_Multiply(System.Single,OpenCV.Net.Point3d)">
            <summary>
            Multiplies a <see cref="T:OpenCV.Net.Point3d"/> structure by an integer scalar.
            </summary>
            <param name="scalar">The scalar by which to multiply the <paramref name="point"/>.</param>
            <param name="point">The <see cref="T:OpenCV.Net.Point3d"/> structure to multiply by the <paramref name="scalar"/>.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point3d"/> that is the result of multiplying <paramref name="point"/> by
            <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.Point3d.Zero">
            <summary>
            Returns a <see cref="T:OpenCV.Net.Point3d"/> that has <see cref="F:OpenCV.Net.Point3d.X"/>,
            <see cref="F:OpenCV.Net.Point3d.Y"/> and <see cref="F:OpenCV.Net.Point3d.Z"/> values set to zero.
            </summary>
        </member>
        <member name="T:OpenCV.Net.IplDepth">
            <summary>
            Specifies the available pixel bit depth formats for <see cref="T:OpenCV.Net.IplImage"/> instances.
            </summary>
        </member>
        <member name="F:OpenCV.Net.IplDepth.U8">
            <summary>
            Specifies an unsigned 8-bit pixel depth.
            </summary>
        </member>
        <member name="F:OpenCV.Net.IplDepth.U16">
            <summary>
            Specifies an unsigned 16-bit pixel depth.
            </summary>
        </member>
        <member name="F:OpenCV.Net.IplDepth.F32">
            <summary>
            Specifies a floating point 32-bit pixel depth.
            </summary>
        </member>
        <member name="F:OpenCV.Net.IplDepth.F64">
            <summary>
            Specifies a floating point 64-bit pixel depth.
            </summary>
        </member>
        <member name="F:OpenCV.Net.IplDepth.S8">
            <summary>
            Specifies a signed 8-bit pixel depth.
            </summary>
        </member>
        <member name="F:OpenCV.Net.IplDepth.S16">
            <summary>
            Specifies a signed 16-bit pixel depth.
            </summary>
        </member>
        <member name="F:OpenCV.Net.IplDepth.S32">
            <summary>
            Specifies a signed 32-bit pixel depth.
            </summary>
        </member>
        <member name="T:OpenCV.Net.IplOrigin">
            <summary>
            Specifies the available data origin for <see cref="T:OpenCV.Net.IplImage"/> instances.
            </summary>
        </member>
        <member name="F:OpenCV.Net.IplOrigin.TopLeft">
            <summary>
            Specifies a top-left reference coordinate system (Y increases downwards).
            </summary>
        </member>
        <member name="F:OpenCV.Net.IplOrigin.BottomLeft">
            <summary>
            Specifies a bottom-right reference coordinate system (Y increases upwards).
            </summary>
        </member>
        <member name="T:OpenCV.Net.IplBorder">
            <summary>
            Specifies the type of border to create around a copied image.
            </summary>
        </member>
        <member name="F:OpenCV.Net.IplBorder.Constant">
            <summary>
            Specifies that the border is filled with a fixed value.
            </summary>
        </member>
        <member name="F:OpenCV.Net.IplBorder.Replicate">
            <summary>
            Specifies that the pixels from the top and bottom rows, the left-most and right-most
            columns are replicated to fill the border.
            </summary>
        </member>
        <member name="F:OpenCV.Net.IplBorder.Reflect">
            <summary>
            This border type is currently unsupported.
            </summary>
        </member>
        <member name="F:OpenCV.Net.IplBorder.Wrap">
            <summary>
            This border type is currently unsupported.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Depth">
            <summary>
            Specifies the available element bit depth formats for <see cref="T:OpenCV.Net.Mat"/> and <see cref="T:OpenCV.Net.Seq"/> instances.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Depth.U8">
            <summary>
            Specifies an unsigned 8-bit element depth.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Depth.S8">
            <summary>
            Specifies a signed 8-bit element depth.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Depth.U16">
            <summary>
            Specifies an unsigned 16-bit element depth.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Depth.S16">
            <summary>
            Specifies a signed 16-bit element depth.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Depth.S32">
            <summary>
            Specifies a signed 32-bit element depth.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Depth.F32">
            <summary>
            Specifies a floating point 32-bit element depth.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Depth.F64">
            <summary>
            Specifies a floating point 64-bit element depth.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Depth.UserType">
            <summary>
            Specifies a user defined element pointer type.
            </summary>
        </member>
        <member name="T:OpenCV.Net.TermCriteriaType">
            <summary>
            Specifies the available termination criteria modes for iterative algorithms.
            </summary>
        </member>
        <member name="F:OpenCV.Net.TermCriteriaType.None">
            <summary>
            Specifies that no termination criteria should be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.TermCriteriaType.MaxIter">
            <summary>
            Specifies that a maximum number of iterations criteria should be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.TermCriteriaType.Epsilon">
            <summary>
            Specifies that a minimum required accuracy criteria should be used.
            </summary>
        </member>
        <member name="T:OpenCV.Net.ComparisonOperation">
            <summary>
            Specifies the comparison operation used to test the relation between individual array elements
            in <see cref="M:OpenCV.Net.CV.Cmp(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.ComparisonOperation)"/> and <see cref="M:OpenCV.Net.CV.CmpS(OpenCV.Net.Arr,System.Double,OpenCV.Net.Arr,OpenCV.Net.ComparisonOperation)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ComparisonOperation.Equal">
            <summary>
            Specifies that the comparison should check whether the two elements are equal.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ComparisonOperation.GreaterThan">
            <summary>
            Specifies that the comparison should check whether the first element is
            greater than the second element.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ComparisonOperation.GreaterOrEqual">
            <summary>
            Specifies that the comparison should check whether the first element is
            greater than or equal to the second element.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ComparisonOperation.LessThan">
            <summary>
            Specifies that the comparison should check whether the first element is
            less than the second element.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ComparisonOperation.LessOrEqual">
            <summary>
            Specifies that the comparison should check whether the first element is
            less than or equal to the second element.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ComparisonOperation.NotEqual">
            <summary>
            Specifies that the comparison should check whether the two elements are not equal.
            </summary>
        </member>
        <member name="T:OpenCV.Net.CheckArrayFlags">
            <summary>
            Specifies operation flags for <see cref="M:OpenCV.Net.Arr.CheckRange(OpenCV.Net.CheckArrayFlags,System.Double,System.Double)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CheckArrayFlags.CheckNanInfinity">
            <summary>
            Specifies that the method should check that every element is neither NaN nor Infinity.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CheckArrayFlags.CheckRange">
            <summary>
            Specifies that the method should check that every element is within a specified range.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CheckArrayFlags.CheckQuiet">
            <summary>
            Specifies whether the method should raise an error if an element is invalid or out of range.
            </summary>
        </member>
        <member name="T:OpenCV.Net.RandDistribution">
            <summary>
            Specifies the random distribution to use for <see cref="M:OpenCV.Net.CV.RandArr(System.UInt64@,OpenCV.Net.Arr,OpenCV.Net.RandDistribution,OpenCV.Net.Scalar,OpenCV.Net.Scalar)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.RandDistribution.Uniform">
            <summary>
            Specifies that a uniform distribution should be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.RandDistribution.Normal">
            <summary>
            Specifies that a normal (gaussian) distribution should be used.
            </summary>
        </member>
        <member name="T:OpenCV.Net.SortFlags">
            <summary>
            Specifies operation flags for the <see cref="M:OpenCV.Net.CV.Sort(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.SortFlags)"/> method.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SortFlags.EveryRow">
            <summary>
            Specifies that the method should sort every row.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SortFlags.EveryColumn">
            <summary>
            Specifies that the method should sort every column.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SortFlags.Ascending">
            <summary>
            Specifies that the method should sort in ascending order.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SortFlags.Descending">
            <summary>
            Specifies that the method should sort in descending order.
            </summary>
        </member>
        <member name="T:OpenCV.Net.GemmFlags">
            <summary>
            Specifies operation flags for <see cref="M:OpenCV.Net.CV.GEMM(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,OpenCV.Net.Arr,System.Double,OpenCV.Net.Arr,OpenCV.Net.GemmFlags)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.GemmFlags.None">
            <summary>
            Specifies that no operation flags are active.
            </summary>
        </member>
        <member name="F:OpenCV.Net.GemmFlags.TransposeA">
            <summary>
            Specifies that matrix A should be transposed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.GemmFlags.TransposeB">
            <summary>
            Specifies that matrix B should be transposed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.GemmFlags.TransposeC">
            <summary>
            Specifies that matrix C should be transposed.
            </summary>
        </member>
        <member name="T:OpenCV.Net.FlipMode">
            <summary>
            Specifies the mirror mode used in <see cref="M:OpenCV.Net.CV.Flip(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.FlipMode)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FlipMode.Vertical">
            <summary>
            Specifies that the array should be flipped vertically.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FlipMode.Horizontal">
            <summary>
            Specifies that the array should be flipped horizontally.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FlipMode.Both">
            <summary>
            Specifies that the array should be flipped both vertically and horizontally.
            </summary>
        </member>
        <member name="T:OpenCV.Net.SvdFlags">
            <summary>
            Specifies operation flags for <see cref="M:OpenCV.Net.CV.SVD(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.SvdFlags)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SvdFlags.None">
            <summary>
            Specifies that no operation flags are active.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SvdFlags.ModifyA">
            <summary>
            Specifies that matrix A can be modified in order to speed up the processing.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SvdFlags.TransposeU">
            <summary>
            Specifies that the output matrix U is transposed to speed up the processing.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SvdFlags.TransposeV">
            <summary>
            Specifies that the output matrix V is transposed to speed up the processing.
            </summary>
        </member>
        <member name="T:OpenCV.Net.InversionMethod">
            <summary>
            Specifies the inversion method for solving linear systems.
            </summary>
        </member>
        <member name="F:OpenCV.Net.InversionMethod.LU">
            <summary>
            Gaussian elimination with optimal pivot element chosen.
            </summary>
        </member>
        <member name="F:OpenCV.Net.InversionMethod.Svd">
            <summary>
            Singular value decomposition (SVD) method.
            </summary>
        </member>
        <member name="F:OpenCV.Net.InversionMethod.SvdSym">
            <summary>
            SVD method for a symmetric positively-defined matrix.
            </summary>
        </member>
        <member name="F:OpenCV.Net.InversionMethod.Cholesky">
            <summary>
            Cholesky decomposition. The matrix must be symmetrical
            and positively defined.
            </summary>
        </member>
        <member name="F:OpenCV.Net.InversionMethod.QR">
            <summary>
            QR decomposition. The system can be over-defined and/or the
            input matrix can be singular.
            </summary>
        </member>
        <member name="F:OpenCV.Net.InversionMethod.Normal">
            <summary>
            A non-exclusive flag meaning that the normal equations are
            solved instead of the original system.
            </summary>
        </member>
        <member name="T:OpenCV.Net.CovarianceFlags">
            <summary>
            Specifies operation flags for <see cref="M:OpenCV.Net.CV.CalcCovarMatrix(OpenCV.Net.Arr[],OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.CovarianceFlags)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CovarianceFlags.Scrambled">
            <summary>
            Specifies that the scrambled covariance matrix for fast PCA
            of a set of very large vectors should be computed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CovarianceFlags.Normal">
            <summary>
            Specifies that a normal covariance matrix with the same linear
            size as the total number of elements in each input vector should
            be computed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CovarianceFlags.UseAvg">
            <summary>
            Specifies that the method should use the provided average of
            the input vectors.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CovarianceFlags.Scale">
            <summary>
            Specifies that the covariance matrix will be scaled. Scaling will
            depend on whether <see cref="F:OpenCV.Net.CovarianceFlags.Scrambled"/> or <see cref="F:OpenCV.Net.CovarianceFlags.Normal"/>
            flags are set.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CovarianceFlags.Rows">
            <summary>
            Specifies that all the input vectors are stored as rows of a single matrix.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CovarianceFlags.Cols">
            <summary>
            Specifies that all the input vectors are stored as columns of a single matrix.
            </summary>
        </member>
        <member name="T:OpenCV.Net.PcaFlags">
            <summary>
            Specifies operation flags for <see cref="M:OpenCV.Net.CV.CalcPCA(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.PcaFlags)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.PcaFlags.DataAsRow">
            <summary>
            Specifies whether input vectors are stored as rows of the input matrix.
            </summary>
        </member>
        <member name="F:OpenCV.Net.PcaFlags.DataAsCol">
            <summary>
            Specifies whether input vectors are stored as columns of the input matrix.
            </summary>
        </member>
        <member name="F:OpenCV.Net.PcaFlags.UseAvg">
            <summary>
            Specifies whether the precomputed average is passed as a parameter.
            </summary>
        </member>
        <member name="T:OpenCV.Net.NormTypes">
            <summary>
            Specifies flags for <see cref="M:OpenCV.Net.CV.Norm(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.NormTypes,OpenCV.Net.Arr)"/> and <see cref="M:OpenCV.Net.CV.Normalize(OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Double,OpenCV.Net.NormTypes,OpenCV.Net.Arr)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.C">
            <summary>
            Specifies the elementwise max norm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.L1">
            <summary>
            Specifies the L1 or Manhattan norm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.L2">
            <summary>
            Specifies the L2 or Euclidean norm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.L2Sqr">
            <summary>
            Specifies a squared L2 norm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.Hamming">
            <summary>
            Specifies a Hamming distance norm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.Hamming2">
            <summary>
            Specifies a Hamming2 norm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.NormMask">
            <summary>
            The bitmask used to extract the norm type.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.Relative">
            <summary>
            Specifies that a relative difference norm should be computed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.Diff">
            <summary>
            Specifies that a difference norm should be computed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.MinMax">
            <summary>
            Specifies that a range normalization should be computed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.DiffC">
            <summary>
            Specifies a difference elementwise max norm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.DiffL1">
            <summary>
            Specifies a difference L1 norm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.DiffL2">
            <summary>
            Specifies a difference L2 norm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.RelativeC">
            <summary>
            Specifies a relative difference elementwise max norm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.RelativeL1">
            <summary>
            Specifies a relative difference L1 norm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.NormTypes.RelativeL2">
            <summary>
            Specifies a relative difference L2 norm.
            </summary>
        </member>
        <member name="T:OpenCV.Net.ReduceOperation">
            <summary>
            Specifies the matrix reduction operation.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ReduceOperation.Sum">
            <summary>
            Specifies that the output is the sum of all the matrix rows/columns.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ReduceOperation.Avg">
            <summary>
            Specifies that the output is the mean vector of all of the matrix rows/columns.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ReduceOperation.Max">
            <summary>
            Specifies that the output is the maximum (column/row-wise) of all of the matrix rows/columns.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ReduceOperation.Min">
            <summary>
            Specifies that the output is the minimum (column/row-wise) of all of the matrix rows/columns.
            </summary>
        </member>
        <member name="T:OpenCV.Net.DiscreteTransformFlags">
            <summary>
            Specifies the operation of discrete linear transforms and related functions.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DiscreteTransformFlags.Forward">
            <summary>
            Specifies that a forward 1D or 2D transform should be performed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DiscreteTransformFlags.Inverse">
            <summary>
            Specifies that an inverse 1D or 2D transform should be performed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DiscreteTransformFlags.Scale">
            <summary>
            Specifies that the result should be scaled by dividing it by the number of array elements.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DiscreteTransformFlags.InverseScale">
            <summary>
            A combination of <see cref="F:OpenCV.Net.DiscreteTransformFlags.Inverse"/> and <see cref="F:OpenCV.Net.DiscreteTransformFlags.Scale"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DiscreteTransformFlags.Rows">
            <summary>
            Specifies that each row of the array should be processed individually.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DiscreteTransformFlags.MultiplyConjugate">
            <summary>
            Specifies that the second array should be conjugated before the multiplication.
            </summary>
        </member>
        <member name="T:OpenCV.Net.SequenceElementType">
            <summary>
            Specifies the most common sequence element types.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceElementType.Point">
            <summary>
            Specifies a point in 2D space.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceElementType.Code">
            <summary>
            Specifies a freeman code element.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceElementType.Generic">
            <summary>
            Specifies an undefined type of sequence element.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceElementType.Pointer">
            <summary>
            Specifies a pointer type of sequence element.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceElementType.PointPointer">
            <summary>
            Specifies a pointer to an element of another sequence.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceElementType.Index">
            <summary>
            Specifies an index of an element of some other sequence.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceElementType.GraphEdge">
            <summary>
            Specifies an edge of a graph.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceElementType.GraphVertex">
            <summary>
            Specifies a vertex of a graph.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceElementType.TreeVertex">
            <summary>
            Specifies a vertex of a binary tree.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceElementType.ConnectedComponent">
            <summary>
            Specifies a connected component.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceElementType.Point3D">
            <summary>
            Specifies a point in 3D space.
            </summary>
        </member>
        <member name="T:OpenCV.Net.SequenceKind">
            <summary>
            Specifies the kind of <see cref="T:OpenCV.Net.Seq"/> instances.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceKind.Generic">
            <summary>
            Specifies a generic array of elements.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceKind.Curve">
            <summary>
            Specifies a sequence of elements that represents a geometrical curve.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceKind.BinaryTree">
            <summary>
            Specifies a binary tree of elements.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceKind.Graph">
            <summary>
            Specifies a graph of elements.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceKind.Subdiv2D">
            <summary>
            Specifies a set of planar subdivisions.
            </summary>
        </member>
        <member name="T:OpenCV.Net.SequenceFlags">
            <summary>
            Specifies a set of operational flags for <see cref="T:OpenCV.Net.Seq"/> instances.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceFlags.Closed">
            <summary>
            Specifies that the geometrical curve is closed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceFlags.Simple">
            <summary>
            Specifies a simple sequence of elements.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceFlags.Convex">
            <summary>
            Specifies that the geometrical curve is convex.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceFlags.Hole">
            <summary>
            Specifies that the geometrical curve represents a hole.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SequenceFlags.Oriented">
            <summary>
            Specifies that a graph type sequence is oriented.
            </summary>
        </member>
        <member name="T:OpenCV.Net.LineType">
            <summary>
            Specifies the type of connectivity used for line rasterizing.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LineType.Connected8">
            <summary>
            Specifies the 8-connected Bresenham algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LineType.Connected4">
            <summary>
            Specifies the 4-connected Bresenham algorithm.
            </summary>
        </member>
        <member name="T:OpenCV.Net.LineFlags">
            <summary>
            Specifies flags for the line drawing algorithm used for rasterizing.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LineFlags.Connected8">
            <summary>
            Specifies the 8-connected Bresenham algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LineFlags.Connected4">
            <summary>
            Specifies the 4-connected Bresenham algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LineFlags.AntiAliased">
            <summary>
            Specifies anti-aliased lines drawn using gaussian filtering.
            </summary>
        </member>
        <member name="T:OpenCV.Net.FontFace">
            <summary>
            Specifies font face flags for instances of <see cref="T:OpenCV.Net.Font"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontFace.HersheySimplex">
            <summary>
            Specifies a normal size sans-serif font.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontFace.HersheyPlain">
            <summary>
            Specifies a small size sans-serif font.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontFace.HersheyDuplex">
            <summary>
            Specifies a normal size sans-serif font more complex than <see cref="F:OpenCV.Net.FontFace.HersheySimplex"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontFace.HersheyComplex">
            <summary>
            Specifies a normal size serif font.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontFace.HersheyTriplex">
            <summary>
            Specifies a normal size serif font more complex than <see cref="F:OpenCV.Net.FontFace.HersheyComplex"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontFace.HersheyComplexSmall">
            <summary>
            Specifies a smaller version of <see cref="F:OpenCV.Net.FontFace.HersheyComplex"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontFace.HersheyScriptSimplex">
            <summary>
            Specifies a hand-writing style font.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontFace.HersheyScriptComplex">
            <summary>
            Specifies a more complex variant of <see cref="F:OpenCV.Net.FontFace.HersheyScriptSimplex"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontFace.Italic">
            <summary>
            Specifies that the font should be rendered in italic or oblique font.
            </summary>
        </member>
        <member name="T:OpenCV.Net.KMeansFlags">
            <summary>
            Specifies operation flags for the k-means algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.KMeansFlags.None">
            <summary>
            Specifies that no operation flags are active.
            </summary>
        </member>
        <member name="F:OpenCV.Net.KMeansFlags.UseInitialLabels">
            <summary>
            Specifies that during the first attempt the user-supplied labels should be used
            instead of computing them from the initial centers. For the second and further
            attempts, use the random or semi-random centers.
            </summary>
        </member>
        <member name="T:OpenCV.Net.StorageFlags">
            <summary>
            Specifies available flags for creating <see cref="T:OpenCV.Net.FileStorage"/> instances.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StorageFlags.Read">
            <summary>
            Specifies that the file should be open for reading.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StorageFlags.Write">
            <summary>
            Specifies that the file should be open for writing.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StorageFlags.Append">
            <summary>
            Specifies that the file should be open for appending.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StorageFlags.Memory">
            <summary>
            Specifies that all data in the file should be read or that write operations should
            target internal memory buffers.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StorageFlags.FormatAuto">
            <summary>
            Specifies that the file format should be automatically determined.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StorageFlags.FormatXml">
            <summary>
            Specifies that the XML file format should be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StorageFlags.FormatYaml">
            <summary>
            Specifies that the YAML file format should be used.
            </summary>
        </member>
        <member name="T:OpenCV.Net.FileNodeType">
            <summary>
            Specifies the available types of file storage node values.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FileNodeType.Integer">
            <summary>
            Specifies an integer type value.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FileNodeType.Real">
            <summary>
            Specifies a floating-point type value.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FileNodeType.String">
            <summary>
            Specifies a text string type value.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FileNodeType.Ref">
            <summary>
            Specifies a reference type value.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FileNodeType.Seq">
            <summary>
            Specifies a sequence node value.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FileNodeType.Map">
            <summary>
            Specifies a map node value.
            </summary>
        </member>
        <member name="T:OpenCV.Net.StructStorageFlags">
            <summary>
            Specifies type flags for writing compound structures to a <see cref="T:OpenCV.Net.FileStorage"/> instance.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StructStorageFlags.Seq">
            <summary>
            Specifies that the written structure is a sequence, that is, its elements do not have a name.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StructStorageFlags.Map">
            <summary>
            Specifies that the written structure is a map, that is, all its elements have names.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StructStorageFlags.Flow">
            <summary>
            Specifies that the structure is written as a flow (not as a block), which is more compact.
            This is an optional flag that is used only for YAML streams.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Arr">
            <summary>
            Represents an arbitrary array-like data structure.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Arr.GetSubRect(OpenCV.Net.Rect)">
            <summary>
            Creates a new <see cref="T:OpenCV.Net.Mat"/> from a subrectangle of the current instance.
            No data is copied.
            </summary>
            <param name="rect">Zero-based coordinates of the rectangle of interest.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> that corresponds to the specified rectangle of
            the current matrix.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Arr.GetRow(System.Int32)">
            <summary>
            Returns a single row of the current matrix as a new <see cref="T:OpenCV.Net.Mat"/>.
            No data is copied.
            </summary>
            <param name="row">Zero-based index of the selected row.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> that corresponds to the selected row of
            the current matrix.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Arr.GetRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a row span of the current matrix as a new <see cref="T:OpenCV.Net.Mat"/>.
            No data is copied.
            </summary>
            <param name="startRow">Zero-based index of the starting row (inclusive) of the span.</param>
            <param name="endRow">Zero-based index of the ending row (exclusive) of the span</param>
            <param name="deltaRow">Index step in the row span.</param>
            <returns>The multi-row matrix containing the row span.</returns>
        </member>
        <member name="M:OpenCV.Net.Arr.GetCol(System.Int32)">
            <summary>
            Returns a single column of the current matrix as a new <see cref="T:OpenCV.Net.Mat"/>.
            No data is copied.
            </summary>
            <param name="col">Zero-based index of the selected column.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> that corresponds to the selected column of
            the current matrix.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Arr.GetCols(System.Int32,System.Int32)">
            <summary>
            Returns a column span of the current matrix as a new <see cref="T:OpenCV.Net.Mat"/>.
            No data is copied.
            </summary>
            <param name="startCol">Zero-based index of the starting column (inclusive) of the span.</param>
            <param name="endCol">Zero-based index of the ending column (exclusive) of the span</param>
            <returns>The multi-column matrix containing the column span.</returns>
        </member>
        <member name="M:OpenCV.Net.Arr.GetDiag(System.Int32)">
            <summary>
            Returns a specified diagonal of the current matrix.
            </summary>
            <param name="diag">
            The selected array diagonal. Zero corresponds to the main diagonal,
            negative one corresponds to the diagonal above the main, positive one
            corresponds to the diagonal below the main, and so forth.
            </param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> that corresponds to the specified diagonal
            of the current matrix.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Arr.GetDims(System.Int32[])">
            <summary>
            Returns the number of array dimensions and their sizes.
            </summary>
            <param name="sizes">
            The optional output array of the dimension sizes. For 2D arrays the number
            of rows (height) goes first and the number of columns (width) goes next.
            </param>
            <returns>The number of array dimensions.</returns>
        </member>
        <member name="M:OpenCV.Net.Arr.GetDimSize(System.Int32)">
            <summary>
            Returns the size of a particular array dimension.
            </summary>
            <param name="index">
            The zero-based dimension index. For matrices, zero means number of rows and
            one means number of columns; for images zero means height and one means width.
            </param>
            <returns>The number of elements in a particular array dimension.</returns>
        </member>
        <member name="M:OpenCV.Net.Arr.Ptr(System.Int32)">
            <summary>
            Returns a pointer to a specific array element.
            </summary>
            <param name="index">The zero-based element index.</param>
            <returns>The pointer to the array element specified by <paramref name="index"/>.</returns>
            <remarks>
            This method can be used for sequential access to 1D, 2D or nD dense arrays.
            The method can be used for sparse arrays as well; if the requested node
            does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.Ptr(System.Int32,System.Int32@)">
            <summary>
            Returns a pointer to a specific array element.
            </summary>
            <param name="index">The zero-based element index.</param>
            <param name="elementType">
            When this method returns, contains the type of matrix elements. This parameter
            is passed uninitialized.
            </param>
            <returns>The pointer to the array element specified by <paramref name="index"/>.</returns>
            <remarks>
            This method can be used for sequential access to 1D, 2D or nD dense arrays.
            The method can be used for sparse arrays as well; if the requested node
            does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.Ptr(System.Int32,System.Int32)">
            <summary>
            Returns a pointer to a specific array element.
            </summary>
            <param name="index0">The zero-based element index on the first array dimension.</param>
            <param name="index1">The zero-based element index on the second array dimension.</param>
            <returns>
            The pointer to the array element specified by <paramref name="index0"/> and
            <paramref name="index1"/>.
            </returns>
            <remarks>
            The array must have two dimensions. The method can be used for sparse arrays as
            well; if the requested node does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.Ptr(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns a pointer to a specific array element.
            </summary>
            <param name="index0">The zero-based element index on the first array dimension.</param>
            <param name="index1">The zero-based element index on the second array dimension.</param>
            <param name="elementType">
            When this method returns, contains the type of matrix elements. This parameter
            is passed uninitialized.
            </param>
            <returns>
            The pointer to the array element specified by <paramref name="index0"/> and
            <paramref name="index1"/>.
            </returns>
            <remarks>
            The array must have two dimensions. The method can be used for sparse arrays as
            well; if the requested node does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.Ptr(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a pointer to a specific array element.
            </summary>
            <param name="index0">The zero-based element index on the first array dimension.</param>
            <param name="index1">The zero-based element index on the second array dimension.</param>
            <param name="index2">The zero-based element index on the third array dimension.</param>
            <returns>
            The pointer to the array element specified by <paramref name="index0"/>,
            <paramref name="index1"/> and <paramref name="index2"/>.
            </returns>
            <remarks>
            The array must have three dimensions. The method can be used for sparse arrays as
            well; if the requested node does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.Ptr(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns a pointer to a specific array element.
            </summary>
            <param name="index0">The zero-based element index on the first array dimension.</param>
            <param name="index1">The zero-based element index on the second array dimension.</param>
            <param name="index2">The zero-based element index on the third array dimension.</param>
            <param name="elementType">
            When this method returns, contains the type of matrix elements. This parameter
            is passed uninitialized.
            </param>
            <returns>
            The pointer to the array element specified by <paramref name="index0"/>,
            <paramref name="index1"/> and <paramref name="index2"/>.
            </returns>
            <remarks>
            The array must have three dimensions. The method can be used for sparse arrays as
            well; if the requested node does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.Ptr(System.Int32[])">
            <summary>
            Returns a pointer to a specific array element.
            </summary>
            <param name="index">
            An array specifying the zero-based multi-dimensional element index.
            The length of <paramref name="index"/> must be the same as the number
            of dimensions of this instance.
            </param>
            <returns>
            The pointer to the array element specified by the multi-dimensional
            <paramref name="index"/>.
            </returns>
            <remarks>
            The method can be used for sparse arrays as
            well; if the requested node does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.Ptr(System.Int32[],System.Int32@,System.Boolean)">
            <summary>
            Returns a pointer to a specific array element.
            </summary>
            <param name="index">
            An array specifying the zero-based multi-dimensional element index.
            The length of <paramref name="index"/> must be the same as the number
            of dimensions of this instance.
            </param>
            <param name="elementType">
            When this method returns, contains the type of matrix elements. This parameter
            is passed uninitialized.
            </param>
            <param name="createNode">
            Optional parameter for sparse arrays only. <b>true</b> means that the requested
            element is created if it does not exist already; otherwise, the array will not
            be changed.
            </param>
            <returns>
            The pointer to the array element specified by the multi-dimensional
            <paramref name="index"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Arr.GetReal(System.Int32)">
            <summary>
            Returns a specific element of single-channel array.
            </summary>
            <param name="index">The zero-based element index.</param>
            <returns>The array element specified by <paramref name="index"/>.</returns>
            <remarks>
            This method can be used for sequential access to 1D, 2D or nD dense arrays.
            The method can be used for sparse arrays as well; if the requested node
            does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.GetReal(System.Int32,System.Int32)">
            <summary>
            Returns a specific element of single-channel array.
            </summary>
            <param name="index0">The zero-based element index on the first array dimension.</param>
            <param name="index1">The zero-based element index on the second array dimension.</param>
            <returns>
            The array element specified by <paramref name="index0"/> and
            <paramref name="index1"/>.
            </returns>
            <remarks>
            The array must have two dimensions. The method can be used for sparse arrays as
            well; if the requested node does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.GetReal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a specific element of single-channel array.
            </summary>
            <param name="index0">The zero-based element index on the first array dimension.</param>
            <param name="index1">The zero-based element index on the second array dimension.</param>
            <param name="index2">The zero-based element index on the third array dimension.</param>
            <returns>
            The array element specified by <paramref name="index0"/>, <paramref name="index1"/>
            and <paramref name="index2"/>.
            </returns>
            <remarks>
            The array must have three dimensions. The method can be used for sparse arrays as
            well; if the requested node does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.GetReal(System.Int32[])">
            <summary>
            Returns a specific element of single-channel array.
            </summary>
            <param name="index">
            An array specifying the zero-based multi-dimensional element index.
            The length of <paramref name="index"/> must be the same as the number
            of dimensions of this instance.
            </param>
            <returns>
            The array element specified by the multi-dimensional <paramref name="index"/>.
            </returns>
            <remarks>
            The method can be used for sparse arrays as well; if the requested node
            does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.SetReal(System.Int32,System.Double)">
            <summary>
            Sets a specific element of single-channel array.
            </summary>
            <param name="index">The zero-based element index.</param>
            <param name="value">The assigned value.</param>
            <remarks>
            The method can be used for sparse arrays as well; if the node does not
            exist, it is created and set to the specified <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.SetReal(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets a specific element of single-channel array.
            </summary>
            <param name="index0">The zero-based element index on the first array dimension.</param>
            <param name="index1">The zero-based element index on the second array dimension.</param>
            <param name="value">The assigned value.</param>
            <remarks>
            The method can be used for sparse arrays as well; if the node does not
            exist, it is created and set to the specified <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.SetReal(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Sets a specific element of single-channel array.
            </summary>
            <param name="index0">The zero-based element index on the first array dimension.</param>
            <param name="index1">The zero-based element index on the second array dimension.</param>
            <param name="index2">The zero-based element index on the third array dimension.</param>
            <param name="value">The assigned value.</param>
            <remarks>
            The method can be used for sparse arrays as well; if the node does not
            exist, it is created and set to the specified <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.SetReal(System.Int32[],System.Double)">
            <summary>
            Sets a specific element of single-channel array.
            </summary>
            <param name="index">
            An array specifying the zero-based multi-dimensional element index.
            The length of <paramref name="index"/> must be the same as the number
            of dimensions of this instance.
            </param>
            <param name="value">The assigned value.</param>
            <remarks>
            The method can be used for sparse arrays as well; if the node does not
            exist, it is created and set to the specified <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:OpenCV.Net.Arr.ClearND(System.Int32[])">
            <summary>
            Clears a specific element of a multi-dimensional array. If the array
            is dense, the element is set to zero; in case of sparse arrays,
            it deletes the specified node.
            </summary>
            <param name="index">
            An array specifying the zero-based multi-dimensional index of the
            element to be cleared.
            </param>
        </member>
        <member name="M:OpenCV.Net.Arr.GetMat(System.Boolean)">
            <summary>
            Returns matrix header for arbitrary array.
            </summary>
            <param name="allowND">
            If <b>true</b>, the function accepts multi-dimensional dense arrays of type
            <see cref="T:OpenCV.Net.MatND"/> and returns a 2D matrix if the <see cref="T:OpenCV.Net.MatND"/>
            has two dimensions or 1D matrix otherwise. The array must be continuous.
            </param>
            <returns>
            A matrix header for the array which can be an image, matrix or
            multi-dimensional dense array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Arr.GetImage">
            <summary>
            Returns image header for arbitrary array.
            </summary>
            <returns>
            An image header for the array which can be an image or matrix.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Arr.Reshape(System.Int32,System.Int32)">
            <summary>
            Changes shape of matrix/image without copying data.
            </summary>
            <param name="channels">
            The new number of channels. Zero means that the number of channels
            remains unchanged.
            </param>
            <param name="rows">
            The new number of rows. Zero means that the number of rows remains
            unchanged unless it needs to be changed according to <paramref name="channels"/>.
            </param>
            <returns>
            A new matrix header for the array with the newly specified shape.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Arr.SetData(System.IntPtr,System.Int32)">
            <summary>
            Assigns the specified user data pointer to the array header.
            </summary>
            <param name="data">The user data pointer to the raw element data.</param>
            <param name="step">The full row length in bytes.</param>
        </member>
        <member name="M:OpenCV.Net.Arr.GetRawData(System.IntPtr@)">
            <summary>
            Retrieves low-level information about the array.
            </summary>
            <param name="data">
            Output pointer to the whole image origin or ROI origin if ROI is set.
            </param>
        </member>
        <member name="M:OpenCV.Net.Arr.GetRawData(System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves low-level information about the array.
            </summary>
            <param name="data">
            Output pointer to the whole image origin or ROI origin if ROI is set.
            </param>
            <param name="step">Output full row length in bytes.</param>
        </member>
        <member name="M:OpenCV.Net.Arr.GetRawData(System.IntPtr@,System.Int32@,OpenCV.Net.Size@)">
            <summary>
            Retrieves low-level information about the array.
            </summary>
            <param name="data">
            Output pointer to the whole image origin or ROI origin if ROI is set.
            </param>
            <param name="step">Output full row length in bytes.</param>
            <param name="roiSize">Output pixel-accurate ROI size.</param>
        </member>
        <member name="M:OpenCV.Net.Arr.Set(OpenCV.Net.Scalar,OpenCV.Net.Arr)">
            <summary>
            Sets every element of the array to a given value.
            </summary>
            <param name="value">The fill value.</param>
            <param name="mask">
            Optional operation mask, 8-bit single-channel array specifying the
            elements that should be changed.
            </param>
        </member>
        <member name="M:OpenCV.Net.Arr.SetZero">
            <summary>
            Clears the array. In the case of dense arrays, all elements are
            set to zero; for sparse arrays all the elements are removed.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Arr.CheckRange(OpenCV.Net.CheckArrayFlags,System.Double,System.Double)">
            <summary>
            Checks that every array element is neither NaN nor Infinity. It can also check
            whether the elements are within a specified range.
            </summary>
            <param name="flags">
            The operation flags. A combination of <see cref="F:OpenCV.Net.CheckArrayFlags.CheckNanInfinity"/>
            and <see cref="F:OpenCV.Net.CheckArrayFlags.CheckRange"/>. If the latter is set, the function
            checks whether every value of the array is greater than or equal to <paramref name="minVal"/>
            and less than <paramref name="maxVal"/>. If <see cref="F:OpenCV.Net.CheckArrayFlags.CheckQuiet"/> is set,
            the function does not raise an error if an element is invalid or out of range.
            </param>
            <param name="minVal">The inclusive lower boundary of valid values range.</param>
            <param name="maxVal">The exclusive upper boundary of valid values range.</param>
            <returns><b>true</b> if all array elements are valid and within range; <b>false</b> otherwise.</returns>
        </member>
        <member name="P:OpenCV.Net.Arr.ElementType">
            <summary>
            Gets the type of array elements.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Arr.Size">
            <summary>
            Gets the pixel-accurate size of the array.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Arr.Item(System.Int32)">
            <summary>
            Gets or sets a specific array element.
            </summary>
            <param name="index">The zero-based element index.</param>
            <returns>The array element specified by <paramref name="index"/>.</returns>
            <remarks>
            This method can be used for sequential access to 1D, 2D or nD dense arrays.
            The method can be used for sparse arrays as well; if the requested node
            does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="P:OpenCV.Net.Arr.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a specific array element.
            </summary>
            <param name="index0">The zero-based element index on the first array dimension.</param>
            <param name="index1">The zero-based element index on the second array dimension.</param>
            <returns>
            The array element specified by <paramref name="index0"/> and
            <paramref name="index1"/>.
            </returns>
            <remarks>
            The array must have two dimensions. The method can be used for sparse arrays as
            well; if the requested node does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="P:OpenCV.Net.Arr.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets or sets a specific array element.
            </summary>
            <param name="index0">The zero-based element index on the first array dimension.</param>
            <param name="index1">The zero-based element index on the second array dimension.</param>
            <param name="index2">The zero-based element index on the third array dimension.</param>
            <returns>
            The array element specified by <paramref name="index0"/>, <paramref name="index1"/>
            and <paramref name="index2"/>.
            </returns>
            <remarks>
            The array must have three dimensions. The method can be used for sparse arrays as
            well; if the requested node does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="P:OpenCV.Net.Arr.Item(System.Int32[])">
            <summary>
            Gets or sets a specific array element.
            </summary>
            <param name="index">
            An array specifying the zero-based multi-dimensional element index.
            The length of <paramref name="index"/> must be the same as the number
            of dimensions of this instance.
            </param>
            <returns>
            The array element specified by the multi-dimensional <paramref name="index"/>.
            </returns>
            <remarks>
            The method can be used for sparse arrays as
            well; if the requested node does not exist, it is created and set to zero.
            </remarks>
        </member>
        <member name="T:OpenCV.Net.Mat">
            <summary>
            Represents a multi-channel matrix.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Mat.AutoStep">
            <summary>
            A constant passed to the <see cref="T:OpenCV.Net.Mat"/> constructor which specifies that no
            padding exists between subsequent rows of the matrix.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Mat.#ctor(OpenCV.Net.Size,OpenCV.Net.Depth,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class with the specified
            <paramref name="size"/>, element bit <paramref name="depth"/> and
            <paramref name="channels"/> per element.
            </summary>
            <param name="size">The pixel-accurate size of the <see cref="T:OpenCV.Net.Mat"/>.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per element.</param>
        </member>
        <member name="M:OpenCV.Net.Mat.#ctor(System.Int32,System.Int32,OpenCV.Net.Depth,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class with the specified
            number of <paramref name="rows"/> and <paramref name="cols"/>, element bit
            <paramref name="depth"/> and <paramref name="channels"/> per element.
            </summary>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="cols">The number of columns in the matrix.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per element.</param>
        </member>
        <member name="M:OpenCV.Net.Mat.#ctor(OpenCV.Net.Size,OpenCV.Net.Depth,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class with the specified
            <paramref name="size"/>, element bit <paramref name="depth"/> and
            <paramref name="channels"/> per element. A pointer to the matrix raw
            <paramref name="data"/> is provided as well as the optional full row length
            <paramref name="step"/> size in bytes.
            </summary>
            <param name="size">The pixel-accurate size of the <see cref="T:OpenCV.Net.Mat"/>.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per matrix element.</param>
            <param name="data">A pointer to the matrix raw element data.</param>
            <param name="step">The full row length in bytes.</param>
        </member>
        <member name="M:OpenCV.Net.Mat.#ctor(System.Int32,System.Int32,OpenCV.Net.Depth,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class with the specified
            number of <paramref name="rows"/> and <paramref name="cols"/>, element bit
            <paramref name="depth"/> and <paramref name="channels"/> per element.
            A pointer to the matrix raw <paramref name="data"/> is provided as well
            as the optional full row length <paramref name="step"/> size in bytes.
            </summary>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="cols">The number of columns in the matrix.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per matrix element.</param>
            <param name="data">A pointer to the matrix raw element data.</param>
            <param name="step">The full row length in bytes.</param>
        </member>
        <member name="M:OpenCV.Net.Mat.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:OpenCV.Net.Mat"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the rows, columns, depth and number of channels
            of this <see cref="T:OpenCV.Net.Mat"/> instance.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.Clone">
            <summary>
            Creates a new <see cref="T:OpenCV.Net.Mat"/> that is a copy of the current instance.
            </summary>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> that is a copy of this instance.
            <see cref="P:OpenCV.Net.Mat.Step"/> may differ.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.Zeros(System.Int32,System.Int32,OpenCV.Net.Depth,System.Int32)">
            <summary>
            Initializes a new <see cref="T:OpenCV.Net.Mat"/> with all elements set to zero and
            the specified number of <paramref name="rows"/> and <paramref name="cols"/>,
            element bit <paramref name="depth"/> and <paramref name="channels"/> per element.
            </summary>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="cols">The number of columns in the matrix.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per matrix element.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance with all its elements set to zero.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.Zeros(OpenCV.Net.Size,OpenCV.Net.Depth,System.Int32)">
            <summary>
            Initializes a new <see cref="T:OpenCV.Net.Mat"/> with all elements set to zero and
            the specified <paramref name="size"/>, element bit <paramref name="depth"/>
            and <paramref name="channels"/> per element.
            </summary>
            <param name="size">The pixel-accurate size of the <see cref="T:OpenCV.Net.Mat"/>.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per matrix element.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance with all its elements set to zero.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.Ones(System.Int32,System.Int32,OpenCV.Net.Depth,System.Int32)">
            <summary>
            Initializes a new <see cref="T:OpenCV.Net.Mat"/> with all elements set to one and
            the specified number of <paramref name="rows"/> and <paramref name="cols"/>,
            element bit <paramref name="depth"/> and <paramref name="channels"/> per element.
            </summary>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="cols">The number of columns in the matrix.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per matrix element.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance with all its elements set to one.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.Ones(OpenCV.Net.Size,OpenCV.Net.Depth,System.Int32)">
            <summary>
            Initializes a new <see cref="T:OpenCV.Net.Mat"/> with all elements set to one and
            the specified <paramref name="size"/>, element bit <paramref name="depth"/>
            and <paramref name="channels"/> per element.
            </summary>
            <param name="size">The pixel-accurate size of the <see cref="T:OpenCV.Net.Mat"/>.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per matrix element.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance with all its elements set to one.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.Eye(System.Int32,System.Int32,OpenCV.Net.Depth,System.Int32)">
            <summary>
            Initializes a new <see cref="T:OpenCV.Net.Mat"/> with ones on the main diagonal and zeros elsewhere.
            The matrix will have the specified number of <paramref name="rows"/> and <paramref name="cols"/>,
            element bit <paramref name="depth"/> and <paramref name="channels"/> per element.
            </summary>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="cols">The number of columns in the matrix.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per matrix element.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance with ones on the main diagonal and zeros elsewhere.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.Eye(OpenCV.Net.Size,OpenCV.Net.Depth,System.Int32)">
            <summary>
            Initializes a new <see cref="T:OpenCV.Net.Mat"/> with ones on the main diagonal and zeros elsewhere.
            The matrix will have the specified <paramref name="size"/>, element bit
            <paramref name="depth"/> and <paramref name="channels"/> per element.
            </summary>
            <param name="size">The pixel-accurate size of the <see cref="T:OpenCV.Net.Mat"/>.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per matrix element.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance with ones on the main diagonal and zeros elsewhere.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.CreateMatHeader(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a wrapper header for
            the specified <paramref name="data"/>. The reference to <paramref name="data"/> will be
            pinned in the garbage collector until the matrix header is released.
            </summary>
            <param name="data">The array to be wrapped.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a wrapper header around <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.CreateMatHeader(System.Byte[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a wrapper header for
            the specified <paramref name="data"/>. The reference to <paramref name="data"/> will be
            pinned in the garbage collector until the matrix header is released.
            </summary>
            <param name="data">The array to be wrapped.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a wrapper header around <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.CreateMatHeader(System.Int16[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a wrapper header for
            the specified <paramref name="data"/>. The reference to <paramref name="data"/> will be
            pinned in the garbage collector until the matrix header is released.
            </summary>
            <param name="data">The array to be wrapped.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a wrapper header around <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.CreateMatHeader(System.Int16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a wrapper header for
            the specified <paramref name="data"/>. The reference to <paramref name="data"/> will be
            pinned in the garbage collector until the matrix header is released.
            </summary>
            <param name="data">The array to be wrapped.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a wrapper header around <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.CreateMatHeader(System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a wrapper header for
            the specified <paramref name="data"/>. The reference to <paramref name="data"/> will be
            pinned in the garbage collector until the matrix header is released.
            </summary>
            <param name="data">The array to be wrapped.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a wrapper header around <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.CreateMatHeader(System.UInt16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a wrapper header for
            the specified <paramref name="data"/>. The reference to <paramref name="data"/> will be
            pinned in the garbage collector until the matrix header is released.
            </summary>
            <param name="data">The array to be wrapped.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a wrapper header around <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.CreateMatHeader(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a wrapper header for
            the specified <paramref name="data"/>. The reference to <paramref name="data"/> will be
            pinned in the garbage collector until the matrix header is released.
            </summary>
            <param name="data">The array to be wrapped.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a wrapper header around <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.CreateMatHeader(System.Int32[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a wrapper header for
            the specified <paramref name="data"/>. The reference to <paramref name="data"/> will be
            pinned in the garbage collector until the matrix header is released.
            </summary>
            <param name="data">The array to be wrapped.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a wrapper header around <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.CreateMatHeader(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a wrapper header for
            the specified <paramref name="data"/>. The reference to <paramref name="data"/> will be
            pinned in the garbage collector until the matrix header is released.
            </summary>
            <param name="data">The array to be wrapped.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a wrapper header around <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.CreateMatHeader(System.Single[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a wrapper header for
            the specified <paramref name="data"/>. The reference to <paramref name="data"/> will be
            pinned in the garbage collector until the matrix header is released.
            </summary>
            <param name="data">The array to be wrapped.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a wrapper header around <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.CreateMatHeader(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a wrapper header for
            the specified <paramref name="data"/>. The reference to <paramref name="data"/> will be
            pinned in the garbage collector until the matrix header is released.
            </summary>
            <param name="data">The array to be wrapped.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a wrapper header around <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.CreateMatHeader(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a wrapper header for
            the specified <paramref name="data"/>. The reference to <paramref name="data"/> will be
            pinned in the garbage collector until the matrix header is released.
            </summary>
            <param name="data">The array to be wrapped.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a wrapper header around <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.CreateMatHeader``1(``0[],System.Int32,System.Int32,OpenCV.Net.Depth,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a wrapper header around
            <paramref name="data"/> with the specified number of <paramref name="rows"/> and
            <paramref name="cols"/>, element bit <paramref name="depth"/> and <paramref name="channels"/>
            per element. The reference to <paramref name="data"/> will be pinned in the garbage
            collector until the matrix header is released.
            </summary>
            <typeparam name="TData">The type of elements in the data array.</typeparam>
            <param name="data">The array to be wrapped.</param>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="cols">The number of columns in the matrix.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per element.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a wrapper header around <paramref name="data"/>
            with the specified number of <paramref name="rows"/> and <paramref name="cols"/>, element
            bit <paramref name="depth"/> and <paramref name="channels"/> per element.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.FromArray(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a copy of
            the specified managed array <paramref name="data"/>.
            </summary>
            <param name="data">The array that is to be converted to a <see cref="T:OpenCV.Net.Mat"/>.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a copy of the <paramref name="data"/> array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.FromArray(System.Byte[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a copy of
            the specified managed array <paramref name="data"/>.
            </summary>
            <param name="data">The array that is to be converted to a <see cref="T:OpenCV.Net.Mat"/>.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a copy of the <paramref name="data"/> array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.FromArray(System.Int16[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a copy of
            the specified managed array <paramref name="data"/>.
            </summary>
            <param name="data">The array that is to be converted to a <see cref="T:OpenCV.Net.Mat"/>.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a copy of the <paramref name="data"/> array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.FromArray(System.Int16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a copy of
            the specified managed array <paramref name="data"/>.
            </summary>
            <param name="data">The array that is to be converted to a <see cref="T:OpenCV.Net.Mat"/>.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a copy of the <paramref name="data"/> array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.FromArray(System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a copy of
            the specified managed array <paramref name="data"/>.
            </summary>
            <param name="data">The array that is to be converted to a <see cref="T:OpenCV.Net.Mat"/>.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a copy of the <paramref name="data"/> array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.FromArray(System.UInt16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a copy of
            the specified managed array <paramref name="data"/>.
            </summary>
            <param name="data">The array that is to be converted to a <see cref="T:OpenCV.Net.Mat"/>.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a copy of the <paramref name="data"/> array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.FromArray(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a copy of
            the specified managed array <paramref name="data"/>.
            </summary>
            <param name="data">The array that is to be converted to a <see cref="T:OpenCV.Net.Mat"/>.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a copy of the <paramref name="data"/> array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.FromArray(System.Int32[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a copy of
            the specified managed array <paramref name="data"/>.
            </summary>
            <param name="data">The array that is to be converted to a <see cref="T:OpenCV.Net.Mat"/>.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a copy of the <paramref name="data"/> array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.FromArray(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a copy of
            the specified managed array <paramref name="data"/>.
            </summary>
            <param name="data">The array that is to be converted to a <see cref="T:OpenCV.Net.Mat"/>.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a copy of the <paramref name="data"/> array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.FromArray(System.Single[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a copy of
            the specified managed array <paramref name="data"/>.
            </summary>
            <param name="data">The array that is to be converted to a <see cref="T:OpenCV.Net.Mat"/>.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a copy of the <paramref name="data"/> array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.FromArray(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a copy of
            the specified managed array <paramref name="data"/>.
            </summary>
            <param name="data">The array that is to be converted to a <see cref="T:OpenCV.Net.Mat"/>.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a copy of the <paramref name="data"/> array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.FromArray(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a copy of
            the specified managed array <paramref name="data"/>.
            </summary>
            <param name="data">The array that is to be converted to a <see cref="T:OpenCV.Net.Mat"/>.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a copy of the <paramref name="data"/> array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.FromArray``1(``0[],System.Int32,System.Int32,OpenCV.Net.Depth,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Mat"/> class that is a copy of the
            <paramref name="data"/> array with the specified number of <paramref name="rows"/> and
            <paramref name="cols"/>, element bit <paramref name="depth"/> and <paramref name="channels"/>
            per element.
            </summary>
            <typeparam name="TData">The type of elements in the data array.</typeparam>
            <param name="data">The array to be wrapped.</param>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="cols">The number of columns in the matrix.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per element.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Mat"/> instance that is a copy of the <paramref name="data"/> array
            with the specified number of <paramref name="rows"/> and <paramref name="cols"/>, element
            bit <paramref name="depth"/> and <paramref name="channels"/> per element.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.Mat"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Explicit(OpenCV.Net.Mat)~OpenCV.Net.IplImage">
            <summary>
            Converts a <see cref="T:OpenCV.Net.Mat"/> value to a <see cref="T:OpenCV.Net.IplImage"/>.
            </summary>
            <param name="mat">The matrix to convert.</param>
            <returns>A <see cref="T:OpenCV.Net.IplImage"/> value of the same size and element type.</returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_UnaryPlus(OpenCV.Net.Mat)">
            <summary>
            Returns the <see cref="T:OpenCV.Net.Mat"/> value (the sign is unchanged).
            </summary>
            <param name="mat">The matrix to return.</param>
            <returns>The matrix <paramref name="mat"/>.</returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_UnaryNegation(OpenCV.Net.Mat)">
            <summary>
            Negates the specified <see cref="T:OpenCV.Net.Mat"/> value.
            </summary>
            <param name="mat">The matrix to negate.</param>
            <returns>
            The result of <paramref name="mat"/> multiplied by negative one (-1).
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_OnesComplement(OpenCV.Net.Mat)">
            <summary>
            Performs per-element bit-wise inversion of the specified <see cref="T:OpenCV.Net.Mat"/> value.
            </summary>
            <param name="mat">The matrix to invert.</param>
            <returns>The result of bitwise inverting <paramref name="mat"/>.</returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Addition(OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Calculates the per-element sum of two <see cref="T:OpenCV.Net.Mat"/> values.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Addition(OpenCV.Net.Mat,OpenCV.Net.Scalar)">
            <summary>
            Calculates the per-element sum of a <see cref="T:OpenCV.Net.Mat"/> and a <see cref="T:OpenCV.Net.Scalar"/>.
            </summary>
            <param name="left">The matrix to add.</param>
            <param name="right">The scalar to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Addition(OpenCV.Net.Scalar,OpenCV.Net.Mat)">
            <summary>
            Calculates the per-element sum of a <see cref="T:OpenCV.Net.Scalar"/> and a <see cref="T:OpenCV.Net.Mat"/>.
            </summary>
            <param name="left">The scalar to add.</param>
            <param name="right">The matrix to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Addition(OpenCV.Net.Mat,System.Double)">
            <summary>
            Calculates the per-element sum of a <see cref="T:OpenCV.Net.Mat"/> and a
            <see cref="T:System.Double"/> value.
            </summary>
            <param name="left">The matrix to add.</param>
            <param name="right">The scalar value to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Addition(System.Double,OpenCV.Net.Mat)">
            <summary>
            Calculates the per-element sum of a <see cref="T:System.Double"/> value and a
            <see cref="T:OpenCV.Net.Mat"/>.
            </summary>
            <param name="left">The scalar value to add.</param>
            <param name="right">The matrix to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Subtraction(OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Calculates the per-element difference between two <see cref="T:OpenCV.Net.Mat"/> values.
            </summary>
            <param name="left">The minuend.</param>
            <param name="right">The subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Subtraction(OpenCV.Net.Mat,OpenCV.Net.Scalar)">
            <summary>
            Calculates the per-element difference between a <see cref="T:OpenCV.Net.Mat"/> and a
            <see cref="T:OpenCV.Net.Scalar"/>.
            </summary>
            <param name="left">The matrix minuend.</param>
            <param name="right">The scalar subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Subtraction(OpenCV.Net.Scalar,OpenCV.Net.Mat)">
            <summary>
            Subtracts every element of the specified <see cref="T:OpenCV.Net.Mat"/> value from a
            <see cref="T:OpenCV.Net.Scalar"/>.
            </summary>
            <param name="left">The scalar minuend.</param>
            <param name="right">The matrix subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Subtraction(OpenCV.Net.Mat,System.Double)">
            <summary>
            Calculates the per-element difference between a <see cref="T:OpenCV.Net.Mat"/> and a
            <see cref="T:System.Double"/> value.
            </summary>
            <param name="left">The matrix minuend.</param>
            <param name="right">The scalar subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Subtraction(System.Double,OpenCV.Net.Mat)">
            <summary>
            Subtracts every element of the specified <see cref="T:OpenCV.Net.Mat"/> value from a
            <see cref="T:System.Double"/> value.
            </summary>
            <param name="left">The scalar minuend.</param>
            <param name="right">The matrix subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Multiply(OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Calculates the per-element product of two <see cref="T:OpenCV.Net.Mat"/> values.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>
            The result of multiplying <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Multiply(OpenCV.Net.Mat,System.Double)">
            <summary>
            Calculates the per-element product of a <see cref="T:OpenCV.Net.Mat"/> by a
            <see cref="T:System.Double"/> scalar value.
            </summary>
            <param name="left">The matrix to multiply.</param>
            <param name="right">The scalar value to multiply.</param>
            <returns>
            The result of multiplying <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Multiply(System.Double,OpenCV.Net.Mat)">
            <summary>
            Calculates the per-element product of a <see cref="T:System.Double"/> scalar value
            by a <see cref="T:OpenCV.Net.Mat"/>.
            </summary>
            <param name="left">The scalar value to multiply.</param>
            <param name="right">The matrix to multiply.</param>
            <returns>
            The result of multiplying <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Division(OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Calculates the per-element division of two <see cref="T:OpenCV.Net.Mat"/> values.
            </summary>
            <param name="left">The dividend.</param>
            <param name="right">The divisor.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Division(OpenCV.Net.Mat,System.Double)">
            <summary>
            Calculates the per-element division of a <see cref="T:OpenCV.Net.Mat"/> by a
            <see cref="T:System.Double"/> scalar value.
            </summary>
            <param name="left">The matrix dividend.</param>
            <param name="right">The scalar divisor.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_Division(System.Double,OpenCV.Net.Mat)">
            <summary>
            Calculates the per-element division of a <see cref="T:System.Double"/> scalar value
            by a <see cref="T:OpenCV.Net.Mat"/>.
            </summary>
            <param name="left">The scalar dividend.</param>
            <param name="right">The matrix divisor.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_ExclusiveOr(OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation on two
            <see cref="T:OpenCV.Net.Mat"/> values.
            </summary>
            <param name="left">The first matrix value.</param>
            <param name="right">The second matrix value.</param>
            <returns>
            The result of performing the bit-wise "exclusive or" operation
            of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_ExclusiveOr(OpenCV.Net.Mat,OpenCV.Net.Scalar)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation of a
            <see cref="T:OpenCV.Net.Mat"/> and a <see cref="T:OpenCV.Net.Scalar"/>.
            </summary>
            <param name="left">The matrix value.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of performing the bit-wise "exclusive or" operation
            of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_ExclusiveOr(OpenCV.Net.Scalar,OpenCV.Net.Mat)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation of a
            <see cref="T:OpenCV.Net.Scalar"/> and a <see cref="T:OpenCV.Net.Mat"/>.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The matrix value.</param>
            <returns>
            The result of performing the bit-wise "exclusive or" operation
            of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_ExclusiveOr(OpenCV.Net.Mat,System.Double)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation of a
            <see cref="T:OpenCV.Net.Mat"/> and a <see cref="T:System.Double"/> value.
            </summary>
            <param name="left">The matrix value.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of performing the bit-wise "exclusive or" operation
            of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_ExclusiveOr(System.Double,OpenCV.Net.Mat)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation of a
            <see cref="T:System.Double"/> value and a <see cref="T:OpenCV.Net.Mat"/>.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The matrix value.</param>
            <returns>
            The result of performing the bit-wise "exclusive or" operation
            of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_BitwiseAnd(OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Performs per-element bit-wise conjunction of two <see cref="T:OpenCV.Net.Mat"/> values.
            </summary>
            <param name="left">The first matrix value.</param>
            <param name="right">The second matrix value.</param>
            <returns>
            The result of performing the bit-wise conjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_BitwiseAnd(OpenCV.Net.Mat,OpenCV.Net.Scalar)">
            <summary>
            Performs per-element bit-wise conjunction of a <see cref="T:OpenCV.Net.Mat"/> and a
            <see cref="T:OpenCV.Net.Scalar"/>.
            </summary>
            <param name="left">The matrix value.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of performing the bit-wise conjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_BitwiseAnd(OpenCV.Net.Scalar,OpenCV.Net.Mat)">
            <summary>
            Performs per-element bit-wise conjunction of a <see cref="T:OpenCV.Net.Scalar"/> and a
            <see cref="T:OpenCV.Net.Mat"/>.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The matrix value.</param>
            <returns>
            The result of performing the bit-wise conjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_BitwiseAnd(OpenCV.Net.Mat,System.Double)">
            <summary>
            Performs per-element bit-wise conjunction of a <see cref="T:OpenCV.Net.Mat"/> and a
            <see cref="T:System.Double"/> value.
            </summary>
            <param name="left">The matrix value.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of performing the bit-wise conjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_BitwiseAnd(System.Double,OpenCV.Net.Mat)">
            <summary>
            Performs per-element bit-wise conjunction of a <see cref="T:System.Double"/> value and a
            <see cref="T:OpenCV.Net.Mat"/>.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The matrix value.</param>
            <returns>
            The result of performing the bit-wise conjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_BitwiseOr(OpenCV.Net.Mat,OpenCV.Net.Mat)">
            <summary>
            Performs per-element bit-wise disjunction of two <see cref="T:OpenCV.Net.Mat"/> values.
            </summary>
            <param name="left">The first matrix value.</param>
            <param name="right">The second matrix value.</param>
            <returns>
            The result of performing the bit-wise disjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_BitwiseOr(OpenCV.Net.Mat,OpenCV.Net.Scalar)">
            <summary>
            Performs per-element bit-wise disjunction of a <see cref="T:OpenCV.Net.Mat"/> and a
            <see cref="T:OpenCV.Net.Scalar"/>.
            </summary>
            <param name="left">The matrix value.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of performing the bit-wise disjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_BitwiseOr(OpenCV.Net.Scalar,OpenCV.Net.Mat)">
            <summary>
            Performs per-element bit-wise disjunction of a <see cref="T:OpenCV.Net.Scalar"/> and a
            <see cref="T:OpenCV.Net.Mat"/>.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The matrix value.</param>
            <returns>
            The result of performing the bit-wise disjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_BitwiseOr(OpenCV.Net.Mat,System.Double)">
            <summary>
            Performs per-element bit-wise disjunction of a <see cref="T:OpenCV.Net.Mat"/> and a
            <see cref="T:System.Double"/> value.
            </summary>
            <param name="left">The matrix value.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of performing the bit-wise disjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Mat.op_BitwiseOr(System.Double,OpenCV.Net.Mat)">
            <summary>
            Performs per-element bit-wise disjunction of a <see cref="T:System.Double"/> value and a
            <see cref="T:OpenCV.Net.Mat"/>.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The matrix value.</param>
            <returns>
            The result of performing the bit-wise disjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.Mat.Rows">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Mat.Cols">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Mat.Step">
            <summary>
            Gets the full row length in bytes.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Mat.Depth">
            <summary>
            Gets the bit depth of matrix elements.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Mat.Channels">
            <summary>
            Gets the number of channels per matrix element.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Mat.ElementSize">
            <summary>
            Gets the size of each matrix element in bytes.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Mat.Data">
            <summary>
            Gets a pointer to the aligned matrix data.
            </summary>
        </member>
        <member name="T:OpenCV.Net.IplImage">
            <summary>
            Represents an IPL image header.
            </summary>
        </member>
        <member name="M:OpenCV.Net.IplImage.#ctor(OpenCV.Net.Size,OpenCV.Net.IplDepth,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.IplImage"/> class with the
            specified <paramref name="size"/>, pixel bit <paramref name="depth"/> and
            <paramref name="channels"/> per element.
            </summary>
            <param name="size">The pixel-accurate size of the <see cref="T:OpenCV.Net.IplImage"/>.</param>
            <param name="depth">The bit depth of image pixels.</param>
            <param name="channels">The number of channels per pixel.</param>
        </member>
        <member name="M:OpenCV.Net.IplImage.#ctor(OpenCV.Net.Size,OpenCV.Net.IplDepth,System.Int32,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.IplImage"/> class with the
            specified <paramref name="size"/>, pixel bit <paramref name="depth"/> and
            <paramref name="channels"/> per element. A pointer to the image raw
            <paramref name="data"/> is provided.
            </summary>
            <param name="size">The pixel-accurate size of the <see cref="T:OpenCV.Net.IplImage"/>.</param>
            <param name="depth">The bit depth of image pixels.</param>
            <param name="channels">The number of channels per pixel.</param>
            <param name="data">A pointer to the image raw pixel data.</param>
        </member>
        <member name="M:OpenCV.Net.IplImage.ResetRegionOfInterest">
            <summary>
            Resets the image region and channel of interest.
            </summary>
        </member>
        <member name="M:OpenCV.Net.IplImage.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:OpenCV.Net.IplImage"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the width, height, depth and number of channels
            of this <see cref="T:OpenCV.Net.IplImage"/> instance.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.Clone">
            <summary>
            Creates a new <see cref="T:OpenCV.Net.IplImage"/> that is a copy of the current instance.
            </summary>
            <returns>
            A new <see cref="T:OpenCV.Net.IplImage"/> that is a copy of this instance.
            <see cref="P:OpenCV.Net.IplImage.WidthStep"/> may differ.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.GetSubRect(OpenCV.Net.Rect)">
            <summary>
            Creates a new <see cref="T:OpenCV.Net.IplImage"/> from a subrectangle of the current instance.
            No data is copied.
            </summary>
            <param name="rect">Zero-based coordinates of the rectangle of interest.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.IplImage"/> that corresponds to the specified rectangle of
            the current image.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.IplImage"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Explicit(OpenCV.Net.IplImage)~OpenCV.Net.Mat">
            <summary>
            Converts a <see cref="T:OpenCV.Net.IplImage"/> value to a <see cref="T:OpenCV.Net.Mat"/>.
            </summary>
            <param name="image">The image to convert.</param>
            <returns>A <see cref="T:OpenCV.Net.Mat"/> value of the same size and element type.</returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_UnaryPlus(OpenCV.Net.IplImage)">
            <summary>
            Returns the <see cref="T:OpenCV.Net.IplImage"/> value (the sign is unchanged).
            </summary>
            <param name="image">The image to return.</param>
            <returns>The image <paramref name="image"/>.</returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_UnaryNegation(OpenCV.Net.IplImage)">
            <summary>
            Negates the specified <see cref="T:OpenCV.Net.IplImage"/> value.
            </summary>
            <param name="image">The image to negate.</param>
            <returns>
            The result of <paramref name="image"/> multiplied by negative one (-1).
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_OnesComplement(OpenCV.Net.IplImage)">
            <summary>
            Performs per-element bit-wise inversion of the specified <see cref="T:OpenCV.Net.IplImage"/> value.
            </summary>
            <param name="image">The image to invert.</param>
            <returns>The result of bitwise inverting <paramref name="image"/>.</returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Addition(OpenCV.Net.IplImage,OpenCV.Net.IplImage)">
            <summary>
            Calculates the per-element sum of two <see cref="T:OpenCV.Net.IplImage"/> values.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Addition(OpenCV.Net.IplImage,OpenCV.Net.Scalar)">
            <summary>
            Calculates the per-element sum of a <see cref="T:OpenCV.Net.IplImage"/> and a <see cref="T:OpenCV.Net.Scalar"/>.
            </summary>
            <param name="left">The image to add.</param>
            <param name="right">The scalar to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Addition(OpenCV.Net.Scalar,OpenCV.Net.IplImage)">
            <summary>
            Calculates the per-element sum of a <see cref="T:OpenCV.Net.Scalar"/> and a <see cref="T:OpenCV.Net.IplImage"/>.
            </summary>
            <param name="left">The scalar to add.</param>
            <param name="right">The image to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Addition(OpenCV.Net.IplImage,System.Double)">
            <summary>
            Calculates the per-element sum of a <see cref="T:OpenCV.Net.IplImage"/> and a
            <see cref="T:System.Double"/> value.
            </summary>
            <param name="left">The image to add.</param>
            <param name="right">The scalar value to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Addition(System.Double,OpenCV.Net.IplImage)">
            <summary>
            Calculates the per-element sum of a <see cref="T:System.Double"/> value and a
            <see cref="T:OpenCV.Net.IplImage"/>.
            </summary>
            <param name="left">The scalar value to add.</param>
            <param name="right">The image to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Subtraction(OpenCV.Net.IplImage,OpenCV.Net.IplImage)">
            <summary>
            Calculates the per-element difference between two <see cref="T:OpenCV.Net.IplImage"/> values.
            </summary>
            <param name="left">The minuend.</param>
            <param name="right">The subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Subtraction(OpenCV.Net.IplImage,OpenCV.Net.Scalar)">
            <summary>
            Calculates the per-element difference between a <see cref="T:OpenCV.Net.IplImage"/> and a
            <see cref="T:OpenCV.Net.Scalar"/>.
            </summary>
            <param name="left">The image minuend.</param>
            <param name="right">The scalar subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Subtraction(OpenCV.Net.Scalar,OpenCV.Net.IplImage)">
            <summary>
            Subtracts every element of the specified <see cref="T:OpenCV.Net.IplImage"/> value from a
            <see cref="T:OpenCV.Net.Scalar"/>.
            </summary>
            <param name="left">The scalar minuend.</param>
            <param name="right">The image subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Subtraction(OpenCV.Net.IplImage,System.Double)">
            <summary>
            Calculates the per-element difference between a <see cref="T:OpenCV.Net.IplImage"/> and a
            <see cref="T:System.Double"/> value.
            </summary>
            <param name="left">The image minuend.</param>
            <param name="right">The scalar subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Subtraction(System.Double,OpenCV.Net.IplImage)">
            <summary>
            Subtracts every element of the specified <see cref="T:OpenCV.Net.IplImage"/> value from a
            <see cref="T:System.Double"/> value.
            </summary>
            <param name="left">The scalar minuend.</param>
            <param name="right">The image subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Multiply(OpenCV.Net.IplImage,OpenCV.Net.IplImage)">
            <summary>
            Calculates the per-element product of two <see cref="T:OpenCV.Net.IplImage"/> values.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>
            The result of multiplying <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Multiply(OpenCV.Net.IplImage,System.Double)">
            <summary>
            Calculates the per-element product of a <see cref="T:OpenCV.Net.IplImage"/> by a
            <see cref="T:System.Double"/> scalar value.
            </summary>
            <param name="left">The image to multiply.</param>
            <param name="right">The scalar value to multiply.</param>
            <returns>
            The result of multiplying <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Multiply(System.Double,OpenCV.Net.IplImage)">
            <summary>
            Calculates the per-element product of a <see cref="T:System.Double"/> scalar value
            by a <see cref="T:OpenCV.Net.IplImage"/>.
            </summary>
            <param name="left">The scalar value to multiply.</param>
            <param name="right">The image to multiply.</param>
            <returns>
            The result of multiplying <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Division(OpenCV.Net.IplImage,OpenCV.Net.IplImage)">
            <summary>
            Calculates the per-element division of two <see cref="T:OpenCV.Net.IplImage"/> values.
            </summary>
            <param name="left">The dividend.</param>
            <param name="right">The divisor.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Division(OpenCV.Net.IplImage,System.Double)">
            <summary>
            Calculates the per-element division of a <see cref="T:OpenCV.Net.IplImage"/> by a
            <see cref="T:System.Double"/> scalar value.
            </summary>
            <param name="left">The image dividend.</param>
            <param name="right">The scalar divisor.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_Division(System.Double,OpenCV.Net.IplImage)">
            <summary>
            Calculates the per-element division of a <see cref="T:System.Double"/> scalar value
            by a <see cref="T:OpenCV.Net.IplImage"/>.
            </summary>
            <param name="left">The scalar dividend.</param>
            <param name="right">The image divisor.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_ExclusiveOr(OpenCV.Net.IplImage,OpenCV.Net.IplImage)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation on two
            <see cref="T:OpenCV.Net.IplImage"/> values.
            </summary>
            <param name="left">The first image value.</param>
            <param name="right">The second image value.</param>
            <returns>
            The result of performing the bit-wise "exclusive or" operation
            of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_ExclusiveOr(OpenCV.Net.IplImage,OpenCV.Net.Scalar)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation of a
            <see cref="T:OpenCV.Net.IplImage"/> and a <see cref="T:OpenCV.Net.Scalar"/>.
            </summary>
            <param name="left">The image value.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of performing the bit-wise "exclusive or" operation
            of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_ExclusiveOr(OpenCV.Net.Scalar,OpenCV.Net.IplImage)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation of a
            <see cref="T:OpenCV.Net.Scalar"/> and a <see cref="T:OpenCV.Net.IplImage"/>.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The image value.</param>
            <returns>
            The result of performing the bit-wise "exclusive or" operation
            of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_ExclusiveOr(OpenCV.Net.IplImage,System.Double)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation of a
            <see cref="T:OpenCV.Net.IplImage"/> and a <see cref="T:System.Double"/> value.
            </summary>
            <param name="left">The image value.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of performing the bit-wise "exclusive or" operation
            of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_ExclusiveOr(System.Double,OpenCV.Net.IplImage)">
            <summary>
            Performs per-element bit-wise "exclusive or" operation of a
            <see cref="T:System.Double"/> value and a <see cref="T:OpenCV.Net.IplImage"/>.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The image value.</param>
            <returns>
            The result of performing the bit-wise "exclusive or" operation
            of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_BitwiseAnd(OpenCV.Net.IplImage,OpenCV.Net.IplImage)">
            <summary>
            Performs per-element bit-wise conjunction of two <see cref="T:OpenCV.Net.IplImage"/> values.
            </summary>
            <param name="left">The first image value.</param>
            <param name="right">The second image value.</param>
            <returns>
            The result of performing the bit-wise conjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_BitwiseAnd(OpenCV.Net.IplImage,OpenCV.Net.Scalar)">
            <summary>
            Performs per-element bit-wise conjunction of a <see cref="T:OpenCV.Net.IplImage"/> and a
            <see cref="T:OpenCV.Net.Scalar"/>.
            </summary>
            <param name="left">The image value.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of performing the bit-wise conjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_BitwiseAnd(OpenCV.Net.Scalar,OpenCV.Net.IplImage)">
            <summary>
            Performs per-element bit-wise conjunction of a <see cref="T:OpenCV.Net.Scalar"/> and a
            <see cref="T:OpenCV.Net.IplImage"/>.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The image value.</param>
            <returns>
            The result of performing the bit-wise conjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_BitwiseAnd(OpenCV.Net.IplImage,System.Double)">
            <summary>
            Performs per-element bit-wise conjunction of a <see cref="T:OpenCV.Net.IplImage"/> and a
            <see cref="T:System.Double"/> value.
            </summary>
            <param name="left">The image value.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of performing the bit-wise conjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_BitwiseAnd(System.Double,OpenCV.Net.IplImage)">
            <summary>
            Performs per-element bit-wise conjunction of a <see cref="T:System.Double"/> value and a
            <see cref="T:OpenCV.Net.IplImage"/>.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The image value.</param>
            <returns>
            The result of performing the bit-wise conjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_BitwiseOr(OpenCV.Net.IplImage,OpenCV.Net.IplImage)">
            <summary>
            Performs per-element bit-wise disjunction of two <see cref="T:OpenCV.Net.IplImage"/> values.
            </summary>
            <param name="left">The first image value.</param>
            <param name="right">The second image value.</param>
            <returns>
            The result of performing the bit-wise disjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_BitwiseOr(OpenCV.Net.IplImage,OpenCV.Net.Scalar)">
            <summary>
            Performs per-element bit-wise disjunction of a <see cref="T:OpenCV.Net.IplImage"/> and a
            <see cref="T:OpenCV.Net.Scalar"/>.
            </summary>
            <param name="left">The image value.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of performing the bit-wise disjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_BitwiseOr(OpenCV.Net.Scalar,OpenCV.Net.IplImage)">
            <summary>
            Performs per-element bit-wise disjunction of a <see cref="T:OpenCV.Net.Scalar"/> and a
            <see cref="T:OpenCV.Net.IplImage"/>.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The image value.</param>
            <returns>
            The result of performing the bit-wise disjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_BitwiseOr(OpenCV.Net.IplImage,System.Double)">
            <summary>
            Performs per-element bit-wise disjunction of a <see cref="T:OpenCV.Net.IplImage"/> and a
            <see cref="T:System.Double"/> value.
            </summary>
            <param name="left">The image value.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of performing the bit-wise disjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.IplImage.op_BitwiseOr(System.Double,OpenCV.Net.IplImage)">
            <summary>
            Performs per-element bit-wise disjunction of a <see cref="T:System.Double"/> value and a
            <see cref="T:OpenCV.Net.IplImage"/>.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The image value.</param>
            <returns>
            The result of performing the bit-wise disjunction of <paramref name="left"/>
            and <paramref name="right"/>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.IplImage.Depth">
            <summary>
            Gets the bit depth of image pixels.
            </summary>
        </member>
        <member name="P:OpenCV.Net.IplImage.Channels">
            <summary>
            Gets the number of channels per image pixel.
            </summary>
        </member>
        <member name="P:OpenCV.Net.IplImage.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
        </member>
        <member name="P:OpenCV.Net.IplImage.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="P:OpenCV.Net.IplImage.WidthStep">
            <summary>
            Gets the size of the aligned image row in bytes.
            </summary>
        </member>
        <member name="P:OpenCV.Net.IplImage.ImageData">
            <summary>
            Gets a pointer to the aligned image data.
            </summary>
        </member>
        <member name="P:OpenCV.Net.IplImage.ChannelOfInterest">
            <summary>
            Gets or sets the image channel of interest.
            Only a few functions support COI.
            </summary>
        </member>
        <member name="P:OpenCV.Net.IplImage.RegionOfInterest">
            <summary>
            Gets or sets the image region of interest.
            </summary>
        </member>
        <member name="T:OpenCV.Net.RotatedRect">
            <summary>
            Represents a possibly rotated rectangle.
            </summary>
        </member>
        <member name="F:OpenCV.Net.RotatedRect.Center">
            <summary>
            The mass center of the rectangle.
            </summary>
        </member>
        <member name="F:OpenCV.Net.RotatedRect.Size">
            <summary>
            The size of the rectangle.
            </summary>
        </member>
        <member name="F:OpenCV.Net.RotatedRect.Angle">
            <summary>
            The rotation angle of the rectangle in degrees.
            </summary>
        </member>
        <member name="M:OpenCV.Net.RotatedRect.#ctor(OpenCV.Net.Point2f,OpenCV.Net.Size2f,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.RotatedRect"/> structure with the
            specified center, size and rotation angle.
            </summary>
            <param name="center">The coordinates of the mass center of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
            <param name="angle">The rotation angle of the rectangle in degrees.</param>
        </member>
        <member name="M:OpenCV.Net.RotatedRect.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:OpenCV.Net.RotatedRect"/> structure.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:OpenCV.Net.RotatedRect"/> structure.</returns>
        </member>
        <member name="M:OpenCV.Net.RotatedRect.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref="T:OpenCV.Net.RotatedRect"/> structure
            with the same center, size and rotation angle as this <see cref="T:OpenCV.Net.RotatedRect"/> structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is a <see cref="T:OpenCV.Net.RotatedRect"/> and has the same
            center, size and rotation angle as this <see cref="T:OpenCV.Net.RotatedRect"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.RotatedRect.Equals(OpenCV.Net.RotatedRect)">
            <summary>
            Returns a value indicating whether this instance has the same center, size and rotation angle
            as a specified <see cref="T:OpenCV.Net.RotatedRect"/> structure.
            </summary>
            <param name="other">The <see cref="T:OpenCV.Net.RotatedRect"/> structure to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same center, size and rotation angle as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.RotatedRect.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:OpenCV.Net.RotatedRect"/>
            structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the center, size and rotation angle of this
            <see cref="T:OpenCV.Net.RotatedRect"/> structure.
            </returns>
        </member>
        <member name="M:OpenCV.Net.RotatedRect.op_Equality(OpenCV.Net.RotatedRect,OpenCV.Net.RotatedRect)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.RotatedRect"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.RotatedRect"/> structure on the left of the equality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.RotatedRect"/> structure on the right of the equality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have equal center, size and
            rotation angle; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.RotatedRect.op_Inequality(OpenCV.Net.RotatedRect,OpenCV.Net.RotatedRect)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.RotatedRect"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.RotatedRect"/> structure on the left of the inequality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.RotatedRect"/> structure on the right of the inequality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ in center, size or
            rotation angle; <b>false</b> if <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="T:OpenCV.Net.Capture">
            <summary>
            Represents a video capture stream.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Capture.CreateCameraCapture(System.Int32)">
            <summary>
            Initializes capturing a video from a camera.
            </summary>
            <param name="index">
            Index of the camera to be used. If there is only one camera or it does not
            matter what camera is used -1 may be passed.
            </param>
            <returns>
            A newly created <see cref="T:OpenCV.Net.Capture"/> instance representing image
            acquisition from a camera.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Capture.CreateCameraCapture(System.Int32,OpenCV.Net.CaptureDomain)">
            <summary>
            Initializes capturing a video from a camera using the specified <paramref name="domain"/>.
            </summary>
            <param name="index">
            Index of the camera to be used. If there is only one camera or it does not
            matter what camera is used -1 may be passed.
            </param>
            <param name="domain">
            The capture domain used to indicate what kind of camera source should be acquired.
            </param>
            <returns>
            A newly created <see cref="T:OpenCV.Net.Capture"/> instance representing image
            acquisition from a camera.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Capture.CreateFileCapture(System.String)">
            <summary>
            Initializes capturing a video from the specified file. Which codecs and file formats are
            supported depends on the back end library.
            </summary>
            <param name="fileName">
            The path to the video file.
            </param>
            <returns>
            A newly created <see cref="T:OpenCV.Net.Capture"/> instance representing image
            acquisition from a video file.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Capture.GrabFrame">
            <summary>
            Grabs a frame from a camera or file. The grabbed frame is stored internally and
            can be retrieved by calling <see cref="M:OpenCV.Net.Capture.RetrieveFrame(System.Int32)"/>.
            </summary>
            <returns>A value indicating whether a new frame was grabbed.</returns>
        </member>
        <member name="M:OpenCV.Net.Capture.RetrieveFrame(System.Int32)">
            <summary>
            Gets the image grabbed with <see cref="M:OpenCV.Net.Capture.GrabFrame"/>.
            </summary>
            <param name="streamIdx">The index of the stream from which to retrieve the frame.</param>
            <returns>
            The reference to the newly captured frame. The returned image should not be released
            or modified by the user. In the event of an error, the return value may be <b>null</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Capture.QueryFrame">
            <summary>
            Grabs and returns a frame from a camera or file.
            </summary>
            <returns>
            The reference to the newly captured frame. The returned image should not be released
            or modified by the user. In the event of an error, the return value may be <b>null</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Capture.GetProperty(OpenCV.Net.CaptureProperty)">
            <summary>
            Gets video capture properties.
            </summary>
            <param name="propertyId">The property identifier as specified by <see cref="T:OpenCV.Net.CaptureProperty"/>.</param>
            <returns>
            The value of the specified property.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Capture.SetProperty(OpenCV.Net.CaptureProperty,System.Double)">
            <summary>
            Sets video capture properties.
            </summary>
            <param name="propertyId">The property identifier as specified by <see cref="T:OpenCV.Net.CaptureProperty"/>.</param>
            <param name="value">The new value of the specified property.</param>
        </member>
        <member name="M:OpenCV.Net.Capture.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.Capture"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.Capture.CaptureDomain">
            <summary>
            Gets the capture back end used for image acquisition.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Chain">
            <summary>
            Represents a Freeman chain where a polygon is specified as a sequence of steps in
            one of eight directions from a point origin.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Seq">
            <summary>
            Represents a growable sequence of elements.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Seq.#ctor(OpenCV.Net.Depth,System.Int32,OpenCV.Net.MemStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Seq"/> class with the specified
            element bit <paramref name="depth"/> and <paramref name="channels"/> per element.
            Memory for the sequence will be allocated from the provided <paramref name="storage"/>.
            </summary>
            <param name="depth">The bit depth of sequence elements.</param>
            <param name="channels">The number of channels per sequence element.</param>
            <param name="storage">The memory storage used to grow the sequence.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.#ctor(OpenCV.Net.Depth,System.Int32,OpenCV.Net.SequenceKind,OpenCV.Net.MemStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Seq"/> class with the specified
            element bit <paramref name="depth"/>, <paramref name="channels"/> per element and
            sequence <paramref name="kind"/>.
            Memory for the sequence will be allocated from the provided <paramref name="storage"/>.
            </summary>
            <param name="depth">The bit depth of sequence elements.</param>
            <param name="channels">The number of channels per sequence element.</param>
            <param name="kind">The kind of sequence to create.</param>
            <param name="storage">The memory storage used to grow the sequence.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.#ctor(OpenCV.Net.Depth,System.Int32,OpenCV.Net.SequenceKind,OpenCV.Net.SequenceFlags,OpenCV.Net.MemStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Seq"/> class with the specified
            element bit <paramref name="depth"/>, <paramref name="channels"/> per element,
            sequence <paramref name="kind"/> and operational <paramref name="flags"/>.
            Memory for the sequence will be allocated from the provided <paramref name="storage"/>.
            </summary>
            <param name="depth">The bit depth of sequence elements.</param>
            <param name="channels">The number of channels per sequence element.</param>
            <param name="kind">The kind of sequence to create.</param>
            <param name="flags">The operational flags for the sequence.</param>
            <param name="storage">The memory storage used to grow the sequence.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.#ctor(OpenCV.Net.SequenceElementType,OpenCV.Net.MemStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Seq"/> class from a specified
            common element type. Memory for the sequence will be allocated from the
            provided <paramref name="storage"/>.
            </summary>
            <param name="elementType">The type of elements in the sequence.</param>
            <param name="storage">The memory storage used to grow the sequence.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.#ctor(OpenCV.Net.SequenceElementType,OpenCV.Net.SequenceKind,OpenCV.Net.MemStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Seq"/> class with the specified
            common element type and sequence <paramref name="kind"/>.
            Memory for the sequence will be allocated from the provided <paramref name="storage"/>.
            </summary>
            <param name="elementType">The type of elements in the sequence.</param>
            <param name="kind">The kind of sequence to create.</param>
            <param name="storage">The memory storage used to grow the sequence.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.#ctor(OpenCV.Net.SequenceElementType,OpenCV.Net.SequenceKind,OpenCV.Net.SequenceFlags,OpenCV.Net.MemStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Seq"/> class with the specified
            common element type, sequence <paramref name="kind"/> and operational <paramref name="flags"/>.
            Memory for the sequence will be allocated from the provided <paramref name="storage"/>.
            </summary>
            <param name="elementType">The type of elements in the sequence.</param>
            <param name="kind">The kind of sequence to create.</param>
            <param name="flags">The operational flags for the sequence.</param>
            <param name="storage">The memory storage used to grow the sequence.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.SetBlockSize(System.Int32)">
            <summary>
            Sets the sequence block size.
            </summary>
            <param name="blockSize">The memory block size by which to grow the sequence when free space has run out.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.Push">
            <summary>
            Allocates space for one more element at the end of the sequence.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Seq.Push``1(``0[])">
            <summary>
            Adds one or more elements to the end of the sequence.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="elements">The array of elements to add to the end of the sequence.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.PushFront">
            <summary>
            Allocates space for one more element at the beginning of the sequence.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Seq.PushFront``1(``0[])">
            <summary>
            Adds one or more elements to the beginning of the sequence.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="elements">The array of elements to add to the beginning of the sequence.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.Pop">
            <summary>
            Removes an element from the end of the sequence.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Seq.Pop``1(``0@)">
            <summary>
            Removes an element from the end of the sequence.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="element">
            When the method returns, contains the element that was removed from the end of the sequence.
            </param>
        </member>
        <member name="M:OpenCV.Net.Seq.Pop``1(``0[])">
            <summary>
            Removes several elements from the end of the sequence.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="elements">The array that will contain the removed elements.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.PopFront">
            <summary>
            Removes an element from the beginning of the sequence.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Seq.PopFront``1(``0@)">
            <summary>
            Removes an element from the beginning of the sequence.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="element">
            When the method returns, contains the element that was removed from the beginning of the sequence.
            </param>
        </member>
        <member name="M:OpenCV.Net.Seq.PopFront``1(``0[])">
            <summary>
            Removes several elements from the beginning of the sequence.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="elements">The array that will contain the removed elements.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.Insert``1(System.Int32,``0)">
            <summary>
            Inserts an element in the middle of the sequence.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="index">The index before which the element is inserted.</param>
            <param name="element">The inserted element.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.Insert(System.Int32,OpenCV.Net.Seq)">
            <summary>
            Inserts a sequence in the middle of this sequence.
            </summary>
            <param name="index">The index at which to insert the sequence.</param>
            <param name="sequence">The inserted sequence.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.Insert(System.Int32,OpenCV.Net.Arr)">
            <summary>
            Inserts an array in the middle of the sequence.
            </summary>
            <param name="index">The index at which to insert the array.</param>
            <param name="array">The inserted array.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.Remove(System.Int32)">
            <summary>
            Removes an element from the middle of the sequence.
            </summary>
            <param name="index">The index of the removed element.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.Remove(OpenCV.Net.SeqSlice)">
            <summary>
            Removes a sequence slice.
            </summary>
            <param name="slice">The part of the sequence to remove.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.Clear">
            <summary>
            Removes all elements from the sequence.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Seq.GetElement(System.Int32)">
            <summary>
            Gets the pointer to the element at the specified index.
            </summary>
            <param name="index">The index of the element to retrieve.</param>
            <returns>A pointer to the element at the specified <paramref name="index"/>.</returns>
        </member>
        <member name="M:OpenCV.Net.Seq.GetElementIndex(System.IntPtr)">
            <summary>
            Gets the index of the specified element.
            </summary>
            <param name="element">A pointer to the sequence element.</param>
            <returns>The index of the specified <paramref name="element"/>, or -1 if it is not found.</returns>
        </member>
        <member name="M:OpenCV.Net.Seq.CopyTo``1(``0[])">
            <summary>
            Copies all the elements of the sequence to a compatible one-dimensional array.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="array">The array on which to store sequence elements.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.CopyTo``1(``0[],OpenCV.Net.SeqSlice)">
            <summary>
            Copies part of the sequence elements to a compatible one-dimensional array.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="array">The array on which to store sequence elements.</param>
            <param name="slice">The portion of the sequence to copy to the array.</param>
        </member>
        <member name="M:OpenCV.Net.Seq.ToArray``1">
            <summary>
            Copies the elements of the sequence to a new array.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <returns>A new array instance containing all the elements in the sequence.</returns>
        </member>
        <member name="M:OpenCV.Net.Seq.Slice(OpenCV.Net.SeqSlice,OpenCV.Net.MemStorage,System.Boolean)">
            <summary>
            Makes a separate header for a sequence slice.
            </summary>
            <param name="slice">The part of the sequence to be extracted.</param>
            <param name="storage">The storage block that will store the new sequence.</param>
            <param name="copyData">
            A value indicating whether to copy the elements of the extracted slice.
            </param>
            <returns>
            A new <see cref="T:OpenCV.Net.Seq"/> instance containing the elements in the
            specified <paramref name="slice"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Seq.Clone(OpenCV.Net.MemStorage)">
            <summary>
            Creates a copy of the sequence.
            </summary>
            <param name="storage">
            The destination <see cref="T:OpenCV.Net.MemStorage"/> instance on which to store the new sequence.
            If <paramref name="storage"/> is <b>null</b>, the same memory storage of this sequence is used.
            </param>
            <returns>A new <see cref="T:OpenCV.Net.Seq"/> instance that is a copy of this sequence.</returns>
        </member>
        <member name="M:OpenCV.Net.Seq.Sort``1(System.Comparison{``0})">
            <summary>
            Sorts sequence elements using the specified <paramref name="comparison"/> function.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="comparison">
            The comparison function that returns negative, zero or positive value depending
            on the relationships among the elements.
            </param>
        </member>
        <member name="M:OpenCV.Net.Seq.Search``1(``0,System.Comparison{``0},System.Boolean)">
            <summary>
            Searches for an element in a sequence.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="element">The element to look for.</param>
            <param name="comparison">
            The comparison function that returns negative, zero or positive value depending
            on the relationships among the elements.
            </param>
            <param name="isSorted">A value indicating whether the sequence is sorted or not.</param>
            <returns>The index of the element in the sequence, or -1 if it is not found.</returns>
        </member>
        <member name="M:OpenCV.Net.Seq.Invert">
            <summary>
            Reverses the order of sequence elements.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Seq.Partition``1(OpenCV.Net.MemStorage,OpenCV.Net.Seq@,System.Func{``0,``0,System.Boolean})">
            <summary>
            Splits a sequence into equivalence classes.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="storage">The storage block to store the sequence of equivalence classes.</param>
            <param name="labels">
            When the method returns, contains the sequence of zero-based labels of sequence elements.
            </param>
            <param name="equalityComparison">
            The relation function that should return <b>true</b> if the two particular sequence
            elements are from the same class, and <b>false</b> otherwise. The partitioning algorithm
            uses the transitive closure of the relation function as an equivalence critria
            </param>
            <returns>The number of equivalence classes.</returns>
        </member>
        <member name="M:OpenCV.Net.Seq.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.Seq"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.Seq.HeaderSize">
            <summary>
            Gets the size of the <see cref="T:OpenCV.Net.Seq"/> header, in bytes.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Seq.Storage">
            <summary>
            Gets the <see cref="T:OpenCV.Net.MemStorage"/> where the sequence is stored.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Seq.Kind">
            <summary>
            Gets a <see cref="T:OpenCV.Net.SequenceKind"/> value indicating the kind of the sequence.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Seq.ElementSize">
            <summary>
            Gets the size of a sequence element in bytes.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Seq.Count">
            <summary>
            Gets the total number of elements in the sequence.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Seq.HPrev">
            <summary>
            Gets the previous sequence on the same hierarchical level.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Seq.HNext">
            <summary>
            Gets the next sequence on the same hierarchical level.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Seq.VPrev">
            <summary>
            Gets the parent of the sequence in the hierarchy.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Seq.VNext">
            <summary>
            Gets the first child of the sequence in the hierarchy.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Chain.FromSeq(OpenCV.Net.Seq)">
            <summary>
            Initializes a new <see cref="T:OpenCV.Net.Chain"/> instance from a compatible
            <see cref="T:OpenCV.Net.Seq"/>.
            </summary>
            <param name="seq">A <see cref="T:OpenCV.Net.Seq"/> instance representing a Freeman chain.</param>
            <returns>A new <see cref="T:OpenCV.Net.Chain"/> header for the specified <paramref name="seq"/>.</returns>
        </member>
        <member name="M:OpenCV.Net.Chain.ReadChainPoints">
            <summary>
            Translates in sequence all of the points in the Freeman chain code.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of translating
            the Freeman chain code into points.
            </returns>
        </member>
        <member name="P:OpenCV.Net.Chain.HeaderSize">
            <summary>
            Gets the size of the <see cref="T:OpenCV.Net.Chain"/> header, in bytes.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Chain.Origin">
            <summary>
            Gets the origin of the Freeman chain.
            </summary>
        </member>
        <member name="T:OpenCV.Net.ConnectedComp">
            <summary>
            Represents a connected component.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ConnectedComp.Area">
            <summary>
            The area of the segmented component.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ConnectedComp.Value">
            <summary>
            The average color of the connected component.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ConnectedComp.Rect">
            <summary>
            The ROI of the segmented component.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ConnectedComp.Contour">
            <summary>
            The optional component boundary.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Contour">
            <summary>
            Represents a polygonal contour.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Contour.FromSeq(OpenCV.Net.Seq)">
            <summary>
            Initializes a new <see cref="T:OpenCV.Net.Contour"/> instance from a compatible
            <see cref="T:OpenCV.Net.Seq"/>.
            </summary>
            <param name="seq">A <see cref="T:OpenCV.Net.Seq"/> instance representing a polygonal contour.</param>
            <returns>A new <see cref="T:OpenCV.Net.Contour"/> header for the specified <paramref name="seq"/>.</returns>
        </member>
        <member name="P:OpenCV.Net.Contour.HeaderSize">
            <summary>
            Gets the size of the <see cref="T:OpenCV.Net.Contour"/> header, in bytes.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Contour.Rect">
            <summary>
            Gets the bounding rectangle of the contour.
            </summary>
        </member>
        <member name="T:OpenCV.Net.ContourScanner">
            <summary>
            Represents a contour scanning process.
            </summary>
        </member>
        <member name="M:OpenCV.Net.ContourScanner.FindNextContour">
            <summary>
            Finds the next contour in the image.
            </summary>
            <returns>
            The next contour in the image or <b>null</b> if there are no more contours.
            </returns>
        </member>
        <member name="M:OpenCV.Net.ContourScanner.SubstituteContour(OpenCV.Net.Seq)">
            <summary>
            Replaces the currently retrieved contour.
            </summary>
            <param name="newContour">The substituting contour.</param>
        </member>
        <member name="M:OpenCV.Net.ContourScanner.EndFindContours">
            <summary>
            Finishes the scanning process.
            </summary>
            <returns>
            The first contour on the highest level.
            </returns>
        </member>
        <member name="M:OpenCV.Net.ContourScanner.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.ContourScanner"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="T:OpenCV.Net.ConvexityDefect">
            <summary>
            Represents a contour convexity defect.
            </summary>
        </member>
        <member name="P:OpenCV.Net.ConvexityDefect.Start">
            <summary>
            Gets the point of the contour where the defect begins.
            </summary>
        </member>
        <member name="P:OpenCV.Net.ConvexityDefect.End">
            <summary>
            Gets the point of the contour where the defect ends.
            </summary>
        </member>
        <member name="P:OpenCV.Net.ConvexityDefect.DepthPoint">
            <summary>
            Gets the farthest point from the convex hull within the defect.
            </summary>
        </member>
        <member name="P:OpenCV.Net.ConvexityDefect.Depth">
            <summary>
            Gets the distance between the farthest point and the convex hull.
            </summary>
        </member>
        <member name="T:OpenCV.Net.CVException">
            <summary>
            The exception that is thrown when OpenCV error status is set.
            </summary>
        </member>
        <member name="M:OpenCV.Net.CVException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.CVException"/> class.
            </summary>
        </member>
        <member name="M:OpenCV.Net.CVException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.CVException"/> class with a
            specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:OpenCV.Net.CVException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.CVException"/> class with a
            specified error message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">
            The exception that is the cause of the current exception. If the <paramref name="inner"/>
            parameter is not <b>null</b>, the current exception is raised in a <b>catch</b> block
            that handles the inner exception.
            </param>
        </member>
        <member name="M:OpenCV.Net.CVException.#ctor(System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.CVException"/> class from OpenCV
            error information.
            </summary>
            <param name="status">The error code, usually a negative value.</param>
            <param name="functionName">The name of the function where the error status was set.</param>
            <param name="errorMessage">The text of the error message.</param>
            <param name="fileName">The path to the file where the error status was set.</param>
            <param name="line">The line number inside <paramref name="fileName"/> where the error status was set.</param>
        </member>
        <member name="M:OpenCV.Net.CVException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.CVException"/> class from
            serialization data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:OpenCV.Net.CVException.Status">
            <summary>
            Gets or sets the error code, usually a negative value.
            </summary>
        </member>
        <member name="P:OpenCV.Net.CVException.FunctionName">
            <summary>
            Gets or sets the name of the function where the error status was set.
            </summary>
        </member>
        <member name="P:OpenCV.Net.CVException.ErrorMessage">
            <summary>
            Gets or sets the text of the error message.
            </summary>
        </member>
        <member name="P:OpenCV.Net.CVException.FileName">
            <summary>
            Gets or sets the path to the file where the error status was set.
            </summary>
        </member>
        <member name="P:OpenCV.Net.CVException.Line">
            <summary>
            Gets or sets the line number inside <see cref="P:OpenCV.Net.CVException.FileName"/> where the error status was set.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Font">
            <summary>
            Represents a font that can be passed to text rendering functions.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Font.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Font"/> class with the specified
            <paramref name="scale"/> and <paramref name="thickness"/>.
            </summary>
            <param name="scale">The scale factor for the font.</param>
            <param name="thickness">The thickness of the text strokes.</param>
        </member>
        <member name="M:OpenCV.Net.Font.#ctor(OpenCV.Net.FontFace,System.Double,System.Double,System.Double,System.Int32,OpenCV.Net.LineFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Font"/> class with the specified
            parameters.
            </summary>
            <param name="fontFace">The font name identifier.</param>
            <param name="hscale">The width scale factor for the font.</param>
            <param name="vscale">The height scale factor for the font.</param>
            <param name="shear">
            Approximate tangent of the character slope relative to the vertical line. A value
            of 0 means a non-italic font, 1.0 means around 45 degrees of slope, and so on.
            </param>
            <param name="thickness">The thickness of the text strokes.</param>
            <param name="lineType">The algorithm used to draw the text strokes.</param>
        </member>
        <member name="M:OpenCV.Net.Font.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Font"/> class using Qt based glyphs.
            </summary>
            <param name="nameFont">
            Name of the font. The name should match the name of a system font (such as Times).
            If the font is not found, a default one is used.
            </param>
            <param name="pointSize">
            Size of the font. If not specified, equal zero or negative, the point size of the
            font is set to a system-dependent default value. Generally, this is 12 points.
            </param>
        </member>
        <member name="M:OpenCV.Net.Font.#ctor(System.String,System.Int32,OpenCV.Net.Scalar,OpenCV.Net.FontWeight,OpenCV.Net.FontStyle,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Font"/> class using Qt based glyphs.
            </summary>
            <param name="nameFont">
            Name of the font. The name should match the name of a system font (such as Times).
            If the font is not found, a default one is used.
            </param>
            <param name="pointSize">
            Size of the font. If not specified, equal zero or negative, the point size of the
            font is set to a system-dependent default value. Generally, this is 12 points.
            </param>
            <param name="color">Color of the font.</param>
            <param name="weight">Font weight.</param>
            <param name="style">Font style.</param>
            <param name="spacing">Spacing between characters. It can be negative or positive.</param>
        </member>
        <member name="M:OpenCV.Net.Font.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.Font"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="T:OpenCV.Net.Graph">
            <summary>
            Represents an oriented or unoriented weighted graph.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Set">
            <summary>
            Represents a collection of nodes.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Set.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Set.HeaderSize">
            <summary>
            Gets the size of the <see cref="T:OpenCV.Net.Set"/> header, in bytes.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Graph.RemoveVertex(System.Int32)">
            <summary>
            Removes a vertex from the graph.
            </summary>
            <param name="index">The index of the removed vertex.</param>
            <returns>The number of edges deleted.</returns>
        </member>
        <member name="M:OpenCV.Net.Graph.RemoveEdge(System.Int32,System.Int32)">
            <summary>
            Removes an edge from the graph.
            </summary>
            <param name="startIndex">The index of the starting vertex of the edge.</param>
            <param name="endIndex">The index of the ending vertex of the edge.</param>
        </member>
        <member name="M:OpenCV.Net.Graph.Clear">
            <summary>
            Removes all vertices and edges from the graph.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Graph.GetVertexDegree(System.Int32)">
            <summary>
            Counts the number of edges incident to the vertex.
            </summary>
            <param name="index">The index of the graph vertex.</param>
            <returns>The number of edges incident to the vertex.</returns>
        </member>
        <member name="M:OpenCV.Net.Graph.Clone(OpenCV.Net.MemStorage)">
            <summary>
            Creates a full copy of the graph.
            </summary>
            <param name="storage">
            The destination <see cref="T:OpenCV.Net.MemStorage"/> instance on which to store the new graph.
            If <paramref name="storage"/> is <b>null</b>, the same memory storage of this graph is used.
            </param>
            <returns>A new <see cref="T:OpenCV.Net.Graph"/> instance that is a copy of this graph.</returns>
        </member>
        <member name="P:OpenCV.Net.Graph.HeaderSize">
            <summary>
            Gets the size of the <see cref="T:OpenCV.Net.Graph"/> header, in bytes.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Graph.VertexCount">
            <summary>
            Gets the total number of vertices in the graph.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Graph.EdgeCount">
            <summary>
            Gets the total number of edges in the graph.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Histogram">
            <summary>
            Represents a multi-dimensional histogram.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Histogram.#ctor(System.Int32,System.Int32[],OpenCV.Net.HistogramType,System.Single[][],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Histogram"/> class with the
            specified size.
            </summary>
            <param name="dims">Number of histogram dimensions.</param>
            <param name="sizes">Array of the histogram dimension sizes.</param>
            <param name="type">Histogram representation format.</param>
            <param name="ranges">Array of ranges for the histogram bins.</param>
            <param name="uniform">
            If <b>true</b> the histogram has evenly spaced bins and for each dimension, <paramref name="ranges"/>
            contains its lower and upper boundaries which are then used to split the dimension into equally sized bins.
            Otherwise, <paramref name="ranges"/> specifies for each dimension the edges of each bin.
            </param>
        </member>
        <member name="M:OpenCV.Net.Histogram.GetBinRanges">
            <summary>
            Gets the bounds of the histogram bins.
            </summary>
            <returns>The array of ranges for the histogram bins.</returns>
        </member>
        <member name="M:OpenCV.Net.Histogram.SetBinRanges(System.Single[][],System.Boolean)">
            <summary>
            Sets the bounds of the histogram bins.
            </summary>
            <param name="ranges">Array of ranges for the histogram bins.</param>
            <param name="uniform">
            If <b>true</b> the histogram has evenly spaced bins and for each dimension, <paramref name="ranges"/>
            contains its lower and upper boundaries which are then used to split the dimension into equally sized bins.
            Otherwise, <paramref name="ranges"/> specifies for each dimension the edges of each bin.
            </param>
        </member>
        <member name="M:OpenCV.Net.Histogram.Clear">
            <summary>
            Clears the histogram.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Histogram.GetMinMaxValue(System.Single@,System.Single@,System.Int32[],System.Int32[])">
            <summary>
            Finds the minimum and maximum histogram bins.
            </summary>
            <param name="minValue">The output minimum value of the histogram.</param>
            <param name="maxValue">The output maximum value of the histogram.</param>
            <param name="minIdx">The array of coordinates for the minimum.</param>
            <param name="maxIdx">The array of coordinates for the maximum.</param>
        </member>
        <member name="M:OpenCV.Net.Histogram.Normalize(System.Double)">
            <summary>
            Normalizes the histogram such that the sum of the bins is equal to <paramref name="factor"/>.
            </summary>
            <param name="factor">Normalization factor.</param>
        </member>
        <member name="M:OpenCV.Net.Histogram.Threshold(System.Double)">
            <summary>
            Thresholds the histogram by clearing histogram bins that are below the
            specified <paramref name="threshold"/>.
            </summary>
            <param name="threshold">Threshold level.</param>
        </member>
        <member name="M:OpenCV.Net.Histogram.Compare(OpenCV.Net.Histogram,OpenCV.Net.HistogramComparison)">
            <summary>
            Compares this histogram with another dense histogram.
            </summary>
            <param name="other">The second dense histogram.</param>
            <param name="method">The comparison method to be used.</param>
            <returns>The distance between the two histograms.</returns>
        </member>
        <member name="M:OpenCV.Net.Histogram.Copy(OpenCV.Net.Histogram@)">
            <summary>
            Copies the histogram. The method copies this histogram’s bin values to the
            destination histogram and sets the same bin value ranges as this instance.
            </summary>
            <param name="dst">The destination histogram.</param>
        </member>
        <member name="M:OpenCV.Net.Histogram.Clone">
            <summary>
            Creates a new <see cref="T:OpenCV.Net.Histogram"/> that is a copy of the current instance.
            </summary>
            <returns>
            A new <see cref="T:OpenCV.Net.Histogram"/> that is a copy of this instance.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Histogram.CalcArrHist(OpenCV.Net.Arr[],System.Boolean,OpenCV.Net.Arr)">
            <summary>
            Calculates the histogram of image(s).
            </summary>
            <param name="images">Source images.</param>
            <param name="accumulate">
            If <b>true</b>, the histogram is not cleared in the beginning. This feature
            allows the user to compute a single histogram from several images, or to
            update the histogram online.
            </param>
            <param name="mask">
            The operation mask, determines what pixels of the source images are counted.
            </param>
        </member>
        <member name="M:OpenCV.Net.Histogram.CalcArrBackProject(OpenCV.Net.Arr[],OpenCV.Net.Arr)">
            <summary>
            Calculates the back projection.
            </summary>
            <param name="images">Source images.</param>
            <param name="dst">
            Destination back projection image of the same type as the source <paramref name="images"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.Histogram.CalcArrBackProjectPatch(OpenCV.Net.Arr[],OpenCV.Net.Arr,OpenCV.Net.Size,OpenCV.Net.HistogramComparison,System.Double)">
            <summary>
            Locates a template within an image by using a histogram comparison.
            </summary>
            <param name="images">Source images.</param>
            <param name="dst">Destination image.</param>
            <param name="range">Size of the patch slid though the source image.</param>
            <param name="method">The histogram comparison method.</param>
            <param name="factor">Normalization factor for histograms.</param>
        </member>
        <member name="M:OpenCV.Net.Histogram.CalcProbDensity(OpenCV.Net.Histogram,OpenCV.Net.Histogram,System.Double)">
            <summary>
            Divides one histogram by another and stores the result in this instance.
            </summary>
            <param name="hist1">First histogram (the divisor).</param>
            <param name="hist2">Second histogram.</param>
            <param name="scale">Scale factor.</param>
        </member>
        <member name="M:OpenCV.Net.Histogram.QueryValue(System.Int32)">
            <summary>
            Queries the value of the histogram bin.
            </summary>
            <param name="idx0">The index of the bin.</param>
            <returns>The value of the specified bin.</returns>
        </member>
        <member name="M:OpenCV.Net.Histogram.QueryValue(System.Int32,System.Int32)">
            <summary>
            Queries the value of the histogram bin.
            </summary>
            <param name="idx0">The first index of the bin.</param>
            <param name="idx1">The second index of the bin.</param>
            <returns>The value of the specified bin.</returns>
        </member>
        <member name="M:OpenCV.Net.Histogram.QueryValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Queries the value of the histogram bin.
            </summary>
            <param name="idx0">The first index of the bin.</param>
            <param name="idx1">The second index of the bin.</param>
            <param name="idx2">The third index of the bin.</param>
            <returns>The value of the specified bin.</returns>
        </member>
        <member name="M:OpenCV.Net.Histogram.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.Histogram"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.Histogram.Bins">
            <summary>
            Gets the multi-dimensional array of histogram data.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Histogram.Type">
            <summary>
            Gets the type of the histogram representation format.
            </summary>
        </member>
        <member name="P:OpenCV.Net.Histogram.IsUniform">
            <summary>
            Gets a value indicating whether the histogram uses evenly spaced bins.
            </summary>
        </member>
        <member name="T:OpenCV.Net.HuMoments">
            <summary>
            Represents the seven invariant Hu image moments.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HuMoments.Hu1">
            <summary>
            The seven Hu moments invariant to image scale, rotation, and reflection except
            the seventh one, whose sign is changed by reflection.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HuMoments.Hu2">
            <summary>
            The seven Hu moments invariant to image scale, rotation, and reflection except
            the seventh one, whose sign is changed by reflection.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HuMoments.Hu3">
            <summary>
            The seven Hu moments invariant to image scale, rotation, and reflection except
            the seventh one, whose sign is changed by reflection.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HuMoments.Hu4">
            <summary>
            The seven Hu moments invariant to image scale, rotation, and reflection except
            the seventh one, whose sign is changed by reflection.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HuMoments.Hu5">
            <summary>
            The seven Hu moments invariant to image scale, rotation, and reflection except
            the seventh one, whose sign is changed by reflection.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HuMoments.Hu6">
            <summary>
            The seven Hu moments invariant to image scale, rotation, and reflection except
            the seventh one, whose sign is changed by reflection.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HuMoments.Hu7">
            <summary>
            The seven Hu moments invariant to image scale, rotation, and reflection except
            the seventh one, whose sign is changed by reflection.
            </summary>
        </member>
        <member name="T:OpenCV.Net.MatND">
            <summary>
            Represents a multi-dimensional dense multi-channel array.
            </summary>
        </member>
        <member name="M:OpenCV.Net.MatND.#ctor(System.Int32[],OpenCV.Net.Depth,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.MatND"/> class with the
            specified dimension sizes, element bit <paramref name="depth"/> and
            <paramref name="channels"/> per element.
            </summary>
            <param name="dimSizes">The size of each of the multi-dimensional array dimensions.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per element.</param>
        </member>
        <member name="M:OpenCV.Net.MatND.#ctor(System.Int32[],OpenCV.Net.Depth,System.Int32,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.MatND"/> class with the
            specified dimension sizes, element bit <paramref name="depth"/> and
            <paramref name="channels"/> per element. A pointer to the matrix
            raw element <paramref name="data"/> is provided.
            </summary>
            <param name="dimSizes">The size of each of the multi-dimensional array dimensions.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per element.</param>
            <param name="data">A pointer to the matrix raw element data.</param>
        </member>
        <member name="M:OpenCV.Net.MatND.Clone">
            <summary>
            Creates a new <see cref="T:OpenCV.Net.MatND"/> that is a copy of the current instance.
            </summary>
            <returns>
            A new <see cref="T:OpenCV.Net.MatND"/> that is a copy of this instance.
            </returns>
        </member>
        <member name="M:OpenCV.Net.MatND.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.MatND"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.MatND.Depth">
            <summary>
            Gets the bit depth of matrix elements.
            </summary>
        </member>
        <member name="P:OpenCV.Net.MatND.Channels">
            <summary>
            Gets the number of channels per matrix element.
            </summary>
        </member>
        <member name="P:OpenCV.Net.MatND.ElementSize">
            <summary>
            Gets the size of each matrix element in bytes.
            </summary>
        </member>
        <member name="T:OpenCV.Net.MemBlock">
            <summary>
            Represents a memory storage block.
            </summary>
        </member>
        <member name="P:OpenCV.Net.MemBlock.Prev">
            <summary>
            Gets the previous memory storage block.
            </summary>
        </member>
        <member name="P:OpenCV.Net.MemBlock.Next">
            <summary>
            Gets the next memory storage block.
            </summary>
        </member>
        <member name="T:OpenCV.Net.MemStorage">
            <summary>
            Represents a growing memory storage.
            </summary>
        </member>
        <member name="M:OpenCV.Net.MemStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.MemStorage"/> class.
            </summary>
        </member>
        <member name="M:OpenCV.Net.MemStorage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.MemStorage"/> class with the
            specified <paramref name="blockSize"/>.
            </summary>
            <param name="blockSize">The size of storage blocks, in bytes.</param>
        </member>
        <member name="M:OpenCV.Net.MemStorage.#ctor(OpenCV.Net.MemStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.MemStorage"/> class that will
            borrow its memory blocks from the specified <paramref name="parent"/> storage.
            </summary>
            <param name="parent">The parent memory storage.</param>
        </member>
        <member name="M:OpenCV.Net.MemStorage.Clear">
            <summary>
            Clears the memory storage. If the storage has a parent, the method returns
            all memory blocks to the parent.
            </summary>
        </member>
        <member name="M:OpenCV.Net.MemStorage.SavePosition">
            <summary>
            Saves the memory storage position.
            </summary>
            <returns>The current position of the storage top.</returns>
        </member>
        <member name="M:OpenCV.Net.MemStorage.RestorePosition(OpenCV.Net.MemStoragePos)">
            <summary>
            Restores the memory storage position.
            </summary>
            <param name="pos">The new position of the storage top.</param>
        </member>
        <member name="M:OpenCV.Net.MemStorage.Alloc(System.UIntPtr)">
            <summary>
            Allocates a memory buffer in a storage block.
            </summary>
            <param name="size">The size of the memory block, in bytes.</param>
            <returns>A pointer to the newly allocated memory block.</returns>
        </member>
        <member name="M:OpenCV.Net.MemStorage.AllocString(System.String)">
            <summary>
            Allocates a text string in a storage block.
            </summary>
            <param name="value">The string to be copied to the storage.</param>
            <returns>The pointer to the copy of the string in storage.</returns>
        </member>
        <member name="M:OpenCV.Net.MemStorage.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.MemStorage"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="T:OpenCV.Net.MemStoragePos">
            <summary>
            Represents a memory storage position.
            </summary>
        </member>
        <member name="P:OpenCV.Net.MemStoragePos.Top">
            <summary>
            Gets the memory block at the top of the position.
            </summary>
        </member>
        <member name="P:OpenCV.Net.MemStoragePos.FreeSpace">
            <summary>
            Gets the number of free bytes at the position.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Moments">
            <summary>
            Represents all the moments up to the third order of a polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.M00">
            <summary>
            The spatial moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.M10">
            <summary>
            The spatial moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.M01">
            <summary>
            The spatial moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.M20">
            <summary>
            The spatial moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.M11">
            <summary>
            The spatial moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.M02">
            <summary>
            The spatial moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.M30">
            <summary>
            The spatial moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.M21">
            <summary>
            The spatial moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.M12">
            <summary>
            The spatial moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.M03">
            <summary>
            The spatial moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.Mu20">
            <summary>
            The central moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.Mu11">
            <summary>
            The central moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.Mu02">
            <summary>
            The central moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.Mu30">
            <summary>
            The central moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.Mu21">
            <summary>
            The central moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.Mu12">
            <summary>
            The central moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.Mu03">
            <summary>
            The central moments of the polygon or rasterized shape.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Moments.InvSqrtM00">
            <summary>
            The inverse of the square root of the first spatial moment.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Moments.#ctor(OpenCV.Net.CVHandle,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Moments"/> structure from the
            specified polygon or rasterized shape.
            </summary>
            <param name="arr">
            The handle to the polygon (<see cref="T:OpenCV.Net.Seq"/>) or rasterized shape (<see cref="T:OpenCV.Net.IplImage"/>)
            from which to compute the moments.
            </param>
            <param name="binary">
            If <b>true</b>, all non-zero image pixels are treated as one.
            Used for images only.
            </param>
        </member>
        <member name="M:OpenCV.Net.Moments.GetSpatialMoment(System.Int32,System.Int32)">
            <summary>
            Gets the spatial moment with the specified <paramref name="xOrder"/> and <paramref name="yOrder"/>.
            </summary>
            <param name="xOrder">The x-order of the retrieved moment.</param>
            <param name="yOrder">The y-order of the retrieved moment.</param>
            <returns>
            The spatial moment with the specified <paramref name="xOrder"/> and <paramref name="yOrder"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Moments.GetCentralMoment(System.Int32,System.Int32)">
            <summary>
            Gets the central moment with the specified <paramref name="xOrder"/> and <paramref name="yOrder"/>.
            </summary>
            <param name="xOrder">The x-order of the retrieved moment.</param>
            <param name="yOrder">The y-order of the retrieved moment.</param>
            <returns>
            The central moment with the specified <paramref name="xOrder"/> and <paramref name="yOrder"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Moments.GetNormalizedCentralMoment(System.Int32,System.Int32)">
            <summary>
            Gets the normalized central moment with the specified <paramref name="xOrder"/> and
            <paramref name="yOrder"/>.
            </summary>
            <param name="xOrder">The x-order of the retrieved moment.</param>
            <param name="yOrder">The y-order of the retrieved moment.</param>
            <returns>
            The normalized central moment with the specified <paramref name="xOrder"/> and
            <paramref name="yOrder"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Moments.GetHuMoments">
            <summary>
            Computes the seven Hu moments invariant to image scale, rotation, and reflection except
            the seventh one, whose sign is changed by reflection.
            </summary>
            <returns>An instance of <see cref="T:OpenCV.Net.HuMoments"/> containing the seven Hu moments.</returns>
        </member>
        <member name="T:OpenCV.Net.Point">
            <summary>
            Represents a 2D point with integer coordinates (usually zero-based).
            </summary>
        </member>
        <member name="F:OpenCV.Net.Point.X">
            <summary>
            The x-coordinate of the point.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Point.Y">
            <summary>
            The y-coordinate of the point.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Point"/> structure from the specified coordinates.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
        </member>
        <member name="M:OpenCV.Net.Point.#ctor(OpenCV.Net.Point2f)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Point"/> structure from the specified
            <see cref="T:OpenCV.Net.Point2f"/> structure.
            </summary>
            <param name="point">The <see cref="T:OpenCV.Net.Point2f"/> used to initialize this instance by rounding.</param>
        </member>
        <member name="M:OpenCV.Net.Point.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:OpenCV.Net.Point"/> structure.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:OpenCV.Net.Point"/> structure.</returns>
        </member>
        <member name="M:OpenCV.Net.Point.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref="T:OpenCV.Net.Point"/> structure
            with the same coordinates as this <see cref="T:OpenCV.Net.Point"/> structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is a <see cref="T:OpenCV.Net.Point"/> and has the
            same X and Y coordinates as this <see cref="T:OpenCV.Net.Point"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point.Equals(OpenCV.Net.Point)">
            <summary>
            Returns a value indicating whether this instance has the same coordinates
            as a specified <see cref="T:OpenCV.Net.Point"/> structure.
            </summary>
            <param name="other">The <see cref="T:OpenCV.Net.Point"/> structure to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same X and Y coordinates as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:OpenCV.Net.Point"/>
            structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="F:OpenCV.Net.Point.X"/> and <see cref="F:OpenCV.Net.Point.Y"/>
            values of this <see cref="T:OpenCV.Net.Point"/> structure.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point.op_Equality(OpenCV.Net.Point,OpenCV.Net.Point)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Point"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point"/> structure on the left of the equality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point"/> structure on the right of the equality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have equal X and Y coordinates;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point.op_Inequality(OpenCV.Net.Point,OpenCV.Net.Point)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Point"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point"/> structure on the left of the inequality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point"/> structure on the right of the inequality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ either in X or Y coordinates;
            <b>false</b> if <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point.op_Addition(OpenCV.Net.Point,OpenCV.Net.Point)">
            <summary>
            Adds two <see cref="T:OpenCV.Net.Point"/> structures.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point"/> structure on the left of the addition operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point"/> structure on the right of the addition operator.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point"/> that is the result of adding the <paramref name="left"/>
            and <paramref name="right"/> points.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point.op_Subtraction(OpenCV.Net.Point,OpenCV.Net.Point)">
            <summary>
            Subtracts two <see cref="T:OpenCV.Net.Point"/> structures.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point"/> structure on the left of the subtraction operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point"/> structure on the right of the subtraction operator.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point"/> that is the result of subtracting the <paramref name="left"/>
            and <paramref name="right"/> points.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point.op_UnaryNegation(OpenCV.Net.Point)">
            <summary>
            Returns the inversion with respect to the origin of the specified <see cref="T:OpenCV.Net.Point"/> structure.
            </summary>
            <param name="point">The <see cref="T:OpenCV.Net.Point"/> structure for which to compute the inversion.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point"/> that is the result of inverting <paramref name="point"/> with
            respect to the origin.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point.op_Multiply(OpenCV.Net.Point,System.Int32)">
            <summary>
            Multiplies a <see cref="T:OpenCV.Net.Point"/> structure by an integer scalar.
            </summary>
            <param name="point">The <see cref="T:OpenCV.Net.Point"/> structure to multiply by the <paramref name="scalar"/>.</param>
            <param name="scalar">The scalar by which to multiply the <paramref name="point"/>.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point"/> that is the result of multiplying <paramref name="point"/> by
            <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point.op_Multiply(System.Int32,OpenCV.Net.Point)">
            <summary>
            Multiplies a <see cref="T:OpenCV.Net.Point"/> structure by an integer scalar.
            </summary>
            <param name="scalar">The scalar by which to multiply the <paramref name="point"/>.</param>
            <param name="point">The <see cref="T:OpenCV.Net.Point"/> structure to multiply by the <paramref name="scalar"/>.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point"/> that is the result of multiplying <paramref name="point"/> by
            <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.Point.Zero">
            <summary>
            Returns a <see cref="T:OpenCV.Net.Point"/> that has <see cref="F:OpenCV.Net.Point.X"/> and
            <see cref="F:OpenCV.Net.Point.Y"/> values set to zero.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Point2f">
            <summary>
            Represents a 2D point with single-precision floating-point coordinates.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Point2f.X">
            <summary>
            The x-coordinate of the point.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Point2f.Y">
            <summary>
            The y-coordinate of the point.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Point2f.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Point2f"/> structure from the specified coordinates.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
        </member>
        <member name="M:OpenCV.Net.Point2f.#ctor(OpenCV.Net.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Point2f"/> structure from the specified
            <see cref="T:OpenCV.Net.Point"/> structure.
            </summary>
            <param name="point">The <see cref="T:OpenCV.Net.Point"/> used to initialize this instance.</param>
        </member>
        <member name="M:OpenCV.Net.Point2f.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:OpenCV.Net.Point2f"/> structure.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:OpenCV.Net.Point2f"/> structure.</returns>
        </member>
        <member name="M:OpenCV.Net.Point2f.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref="T:OpenCV.Net.Point2f"/> structure
            with the same coordinates as this <see cref="T:OpenCV.Net.Point2f"/> structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is a <see cref="T:OpenCV.Net.Point2f"/> and has the
            same X and Y coordinates as this <see cref="T:OpenCV.Net.Point2f"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2f.Equals(OpenCV.Net.Point2f)">
            <summary>
            Returns a value indicating whether this instance has the same coordinates
            as a specified <see cref="T:OpenCV.Net.Point2f"/> structure.
            </summary>
            <param name="other">The <see cref="T:OpenCV.Net.Point2f"/> structure to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same X and Y coordinates as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2f.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:OpenCV.Net.Point2f"/>
            structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="F:OpenCV.Net.Point2f.X"/> and <see cref="F:OpenCV.Net.Point2f.Y"/>
            values of this <see cref="T:OpenCV.Net.Point2f"/> structure.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2f.op_Equality(OpenCV.Net.Point2f,OpenCV.Net.Point2f)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Point2f"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point2f"/> structure on the left of the equality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point2f"/> structure on the right of the equality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have equal X and Y coordinates;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2f.op_Inequality(OpenCV.Net.Point2f,OpenCV.Net.Point2f)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Point2f"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point2f"/> structure on the left of the inequality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point2f"/> structure on the right of the inequality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ either in X or Y coordinates;
            <b>false</b> if <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2f.op_Addition(OpenCV.Net.Point2f,OpenCV.Net.Point2f)">
            <summary>
            Adds two <see cref="T:OpenCV.Net.Point2f"/> structures.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point2f"/> structure on the left of the addition operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point2f"/> structure on the right of the addition operator.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point2f"/> that is the result of adding the <paramref name="left"/>
            and <paramref name="right"/> points.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2f.op_Subtraction(OpenCV.Net.Point2f,OpenCV.Net.Point2f)">
            <summary>
            Subtracts two <see cref="T:OpenCV.Net.Point2f"/> structures.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point2f"/> structure on the left of the subtraction operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point2f"/> structure on the right of the subtraction operator.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point2f"/> that is the result of subtracting the <paramref name="left"/>
            and <paramref name="right"/> points.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2f.op_UnaryNegation(OpenCV.Net.Point2f)">
            <summary>
            Returns the inversion with respect to the origin of the specified <see cref="T:OpenCV.Net.Point2f"/> structure.
            </summary>
            <param name="point">The <see cref="T:OpenCV.Net.Point2f"/> structure for which to compute the inversion.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point2f"/> that is the result of inverting <paramref name="point"/> with
            respect to the origin.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2f.op_Multiply(OpenCV.Net.Point2f,System.Single)">
            <summary>
            Multiplies a <see cref="T:OpenCV.Net.Point2f"/> structure by an integer scalar.
            </summary>
            <param name="point">The <see cref="T:OpenCV.Net.Point2f"/> structure to multiply by the <paramref name="scalar"/>.</param>
            <param name="scalar">The scalar by which to multiply the <paramref name="point"/>.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point2f"/> that is the result of multiplying <paramref name="point"/> by
            <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point2f.op_Multiply(System.Single,OpenCV.Net.Point2f)">
            <summary>
            Multiplies a <see cref="T:OpenCV.Net.Point2f"/> structure by an integer scalar.
            </summary>
            <param name="scalar">The scalar by which to multiply the <paramref name="point"/>.</param>
            <param name="point">The <see cref="T:OpenCV.Net.Point2f"/> structure to multiply by the <paramref name="scalar"/>.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point2f"/> that is the result of multiplying <paramref name="point"/> by
            <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.Point2f.Zero">
            <summary>
            Returns a <see cref="T:OpenCV.Net.Point2f"/> that has <see cref="F:OpenCV.Net.Point2f.X"/> and
            <see cref="F:OpenCV.Net.Point2f.Y"/> values set to zero.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Point3f">
            <summary>
            Represents a 3D point with single-precision floating-point coordinates.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Point3f.X">
            <summary>
            The x-coordinate of the point.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Point3f.Y">
            <summary>
            The y-coordinate of the point.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Point3f.Z">
            <summary>
            The z-coordinate of the point.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Point3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Point3f"/> structure from the specified coordinates.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <param name="z">The z-coordinate of the point.</param>
        </member>
        <member name="M:OpenCV.Net.Point3f.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:OpenCV.Net.Point3f"/> structure.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:OpenCV.Net.Point3f"/> structure.</returns>
        </member>
        <member name="M:OpenCV.Net.Point3f.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref="T:OpenCV.Net.Point3f"/> structure
            with the same coordinates as this <see cref="T:OpenCV.Net.Point3f"/> structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is a <see cref="T:OpenCV.Net.Point3f"/> and has the
            same X, Y and Z coordinates as this <see cref="T:OpenCV.Net.Point3f"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3f.Equals(OpenCV.Net.Point3f)">
            <summary>
            Returns a value indicating whether this instance has the same coordinates
            as a specified <see cref="T:OpenCV.Net.Point3f"/> structure.
            </summary>
            <param name="other">The <see cref="T:OpenCV.Net.Point3f"/> structure to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same X, Y and Z coordinates as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3f.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:OpenCV.Net.Point3f"/>
            structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="F:OpenCV.Net.Point3f.X"/>, <see cref="F:OpenCV.Net.Point3f.Y"/> and
            <see cref="F:OpenCV.Net.Point3f.Z"/> values of this <see cref="T:OpenCV.Net.Point3f"/> structure.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3f.op_Equality(OpenCV.Net.Point3f,OpenCV.Net.Point3f)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Point3f"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point3f"/> structure on the left of the equality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point3f"/> structure on the right of the equality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have equal X, Y and Z coordinates;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3f.op_Inequality(OpenCV.Net.Point3f,OpenCV.Net.Point3f)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Point3f"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point3f"/> structure on the left of the inequality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point3f"/> structure on the right of the inequality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ in X, Y or Z coordinates;
            <b>false</b> if <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3f.op_Addition(OpenCV.Net.Point3f,OpenCV.Net.Point3f)">
            <summary>
            Adds two <see cref="T:OpenCV.Net.Point3f"/> structures.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point3f"/> structure on the left of the addition operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point3f"/> structure on the right of the addition operator.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point3f"/> that is the result of adding the <paramref name="left"/>
            and <paramref name="right"/> points.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3f.op_Subtraction(OpenCV.Net.Point3f,OpenCV.Net.Point3f)">
            <summary>
            Subtracts two <see cref="T:OpenCV.Net.Point3f"/> structures.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Point3f"/> structure on the left of the subtraction operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Point3f"/> structure on the right of the subtraction operator.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point3f"/> that is the result of subtracting the <paramref name="left"/>
            and <paramref name="right"/> points.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3f.op_UnaryNegation(OpenCV.Net.Point3f)">
            <summary>
            Returns the inversion with respect to the origin of the specified <see cref="T:OpenCV.Net.Point3f"/> structure.
            </summary>
            <param name="point">The <see cref="T:OpenCV.Net.Point3f"/> structure for which to compute the inversion.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point3f"/> that is the result of inverting <paramref name="point"/> with
            respect to the origin.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3f.op_Multiply(OpenCV.Net.Point3f,System.Single)">
            <summary>
            Multiplies a <see cref="T:OpenCV.Net.Point3f"/> structure by an integer scalar.
            </summary>
            <param name="point">The <see cref="T:OpenCV.Net.Point3f"/> structure to multiply by the <paramref name="scalar"/>.</param>
            <param name="scalar">The scalar by which to multiply the <paramref name="point"/>.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point3f"/> that is the result of multiplying <paramref name="point"/> by
            <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Point3f.op_Multiply(System.Single,OpenCV.Net.Point3f)">
            <summary>
            Multiplies a <see cref="T:OpenCV.Net.Point3f"/> structure by an integer scalar.
            </summary>
            <param name="scalar">The scalar by which to multiply the <paramref name="point"/>.</param>
            <param name="point">The <see cref="T:OpenCV.Net.Point3f"/> structure to multiply by the <paramref name="scalar"/>.</param>
            <returns>
            The <see cref="T:OpenCV.Net.Point3f"/> that is the result of multiplying <paramref name="point"/> by
            <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.Point3f.Zero">
            <summary>
            Returns a <see cref="T:OpenCV.Net.Point3f"/> that has <see cref="F:OpenCV.Net.Point3f.X"/>,
            <see cref="F:OpenCV.Net.Point3f.Y"/> and <see cref="F:OpenCV.Net.Point3f.Z"/> values set to zero.
            </summary>
        </member>
        <member name="T:OpenCV.Net.PositObject">
            <summary>
            Represents information about a 3D object model for camera pose estimation.
            </summary>
        </member>
        <member name="M:OpenCV.Net.PositObject.#ctor(OpenCV.Net.Point3f[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.PositObject"/> class with the
            specified 3D object model points.
            </summary>
            <param name="points">
            The points representing the vertices of the 3D model.
            </param>
        </member>
        <member name="M:OpenCV.Net.PositObject.POSIT(OpenCV.Net.Point2f[],System.Double,OpenCV.Net.TermCriteria,System.Single[],System.Single[])">
            <summary>
            Implements the POSIT algorithm.
            </summary>
            <param name="imagePoints">Pointer to the object point projections on the 2D image plane.</param>
            <param name="focalLength">Focal length of the camera used.</param>
            <param name="criteria">Termination criteria of the iterative POSIT algorithm.</param>
            <param name="rotationMatrix">The output rotation matrix representing the estimated pose.</param>
            <param name="translationVector">The output translation vector representing the estimated pose.</param>
        </member>
        <member name="M:OpenCV.Net.PositObject.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.PositObject"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="T:OpenCV.Net.Rect">
            <summary>
            Represents the offset and size of a rectangle.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Rect.X">
            <summary>
            The x-coordinate of the top-left corner.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Rect.Y">
            <summary>
            The y-coordinate of the top-left corner (or bottom-left depending on image origin).
            </summary>
        </member>
        <member name="F:OpenCV.Net.Rect.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Rect.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Rect"/> structure from the
            specified offset and dimensions.
            </summary>
            <param name="x">The x-coordinate of the top-left corner.</param>
            <param name="y">The y-coordinate of the top-left corner (or bottom-left depending on image origin).</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:OpenCV.Net.Rect.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:OpenCV.Net.Rect"/> structure.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:OpenCV.Net.Rect"/> structure.</returns>
        </member>
        <member name="M:OpenCV.Net.Rect.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref="T:OpenCV.Net.Rect"/> structure
            with the same offset and size as this <see cref="T:OpenCV.Net.Rect"/> structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is a <see cref="T:OpenCV.Net.Rect"/> and has the
            same offset and size as this <see cref="T:OpenCV.Net.Rect"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Rect.Equals(OpenCV.Net.Rect)">
            <summary>
            Returns a value indicating whether this instance has the same offset and size
            as a specified <see cref="T:OpenCV.Net.Rect"/> structure.
            </summary>
            <param name="other">The <see cref="T:OpenCV.Net.Rect"/> structure to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same offset and size as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Rect.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:OpenCV.Net.Rect"/>
            structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="F:OpenCV.Net.Rect.X"/> and <see cref="F:OpenCV.Net.Rect.Y"/> offset
            as well as the <see cref="F:OpenCV.Net.Rect.Width"/> and <see cref="F:OpenCV.Net.Rect.Height"/> of this
            <see cref="T:OpenCV.Net.Rect"/> structure.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Rect.op_Equality(OpenCV.Net.Rect,OpenCV.Net.Rect)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Rect"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Rect"/> structure on the left of the equality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Rect"/> structure on the right of the equality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have equal offset and size;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Rect.op_Inequality(OpenCV.Net.Rect,OpenCV.Net.Rect)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Rect"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Rect"/> structure on the left of the inequality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Rect"/> structure on the right of the inequality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ in offset or size;
            <b>false</b> if <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="T:OpenCV.Net.Scalar">
            <summary>
            A container for one-,two-,three- or four-tuples of doubles.
            <see cref="T:OpenCV.Net.Scalar"/> is always represented as a four-tuple.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Scalar.Val0">
            <summary>
            The first value of the scalar tuple.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Scalar.Val1">
            <summary>
            The second value of the scalar tuple.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Scalar.Val2">
            <summary>
            The third value of the scalar tuple.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Scalar.Val3">
            <summary>
            The fourth value of the scalar tuple.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Scalar.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Scalar"/> structure from
            the specified values.
            </summary>
            <param name="val0">The first value of the scalar tuple.</param>
            <param name="val1">The optional second value of the scalar tuple.</param>
            <param name="val2">The optional third value of the scalar tuple.</param>
            <param name="val3">The optional fourth value of the scalar tuple.</param>
        </member>
        <member name="M:OpenCV.Net.Scalar.Real(System.Double)">
            <summary>
            Initializes a new <see cref="T:OpenCV.Net.Scalar"/> instance representing a single scalar value.
            </summary>
            <param name="val0">The scalar value.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Scalar"/> instance representing a single scalar value.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Scalar.All(System.Double)">
            <summary>
            Initializes a new <see cref="T:OpenCV.Net.Scalar"/> instance where all the values
            of the tuple are initialized to the same scalar value.
            </summary>
            <param name="val0123">The scalar value from which to initialize all tuple scalars.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Scalar"/> instance where all the values
            of the tuple are initialized to the specified scalar value.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Scalar.Rgb(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:OpenCV.Net.Scalar"/> instance representing a
            color pixel value.
            </summary>
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <returns>
            A new <see cref="T:OpenCV.Net.Scalar"/> instance where the values of the
            tuple are initialized to the specified color components.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Scalar.PackedColor(System.Double,System.Int32)">
            <summary>
            Initializes a new <see cref="T:OpenCV.Net.Scalar"/> instance from a packed
            color value.
            </summary>
            <param name="color">The packed color value.</param>
            <param name="arrayType">
            The type of array elements. If the depth of the elements is not
            8-bit, the first channels of the returned <see cref="T:OpenCV.Net.Scalar"/>
            are set to the same value as <paramref name="color"/>.
            </param>
            <returns>
            A new <see cref="T:OpenCV.Net.Scalar"/> instance where the values of the
            tuple are initialized to represent the unpacked color.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Scalar.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:OpenCV.Net.Scalar"/> structure.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:OpenCV.Net.Scalar"/> structure.</returns>
        </member>
        <member name="M:OpenCV.Net.Scalar.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref="T:OpenCV.Net.Scalar"/> structure
            with the same tuple values as this <see cref="T:OpenCV.Net.Scalar"/> structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is a <see cref="T:OpenCV.Net.Scalar"/> and has the
            same Val0, Val1, Val2 and Val3 values as this <see cref="T:OpenCV.Net.Scalar"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Scalar.Equals(OpenCV.Net.Scalar)">
            <summary>
            Returns a value indicating whether this instance has the same tuple values
            as a specified <see cref="T:OpenCV.Net.Scalar"/> structure.
            </summary>
            <param name="other">The <see cref="T:OpenCV.Net.Scalar"/> structure to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same Val0, Val1, Val2 and Val3 values as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Scalar.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:OpenCV.Net.Scalar"/>
            structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the four tuple values of this
            <see cref="T:OpenCV.Net.Scalar"/> structure.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Scalar.op_Equality(OpenCV.Net.Scalar,OpenCV.Net.Scalar)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Scalar"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Scalar"/> structure on the left of the equality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Scalar"/> structure on the right of the equality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have equal Val0, Val1, Val2
            and Val3 values; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Scalar.op_Inequality(OpenCV.Net.Scalar,OpenCV.Net.Scalar)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Scalar"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Scalar"/> structure on the left of the inequality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Scalar"/> structure on the right of the inequality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ in Val0, Val1, Val2
            or Val3 values; <b>false</b> if <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="T:OpenCV.Net.Size">
            <summary>
            Represents the pixel-accurate size of a rectangle.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Size.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Size.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Size"/> structure from the specified dimensions.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:OpenCV.Net.Size.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:OpenCV.Net.Size"/> structure.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:OpenCV.Net.Size"/> structure.</returns>
        </member>
        <member name="M:OpenCV.Net.Size.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref="T:OpenCV.Net.Size"/> structure
            with the same dimensions as this <see cref="T:OpenCV.Net.Size"/> structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is a <see cref="T:OpenCV.Net.Size"/> and has the
            same width and height as this <see cref="T:OpenCV.Net.Size"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Size.Equals(OpenCV.Net.Size)">
            <summary>
            Returns a value indicating whether this instance has the same dimensions
            as a specified <see cref="T:OpenCV.Net.Size"/> structure.
            </summary>
            <param name="other">The <see cref="T:OpenCV.Net.Size"/> structure to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same width and height as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Size.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:OpenCV.Net.Size"/>
            structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="F:OpenCV.Net.Size.Width"/> and <see cref="F:OpenCV.Net.Size.Height"/>
            values of this <see cref="T:OpenCV.Net.Size"/> structure.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Size.op_Equality(OpenCV.Net.Size,OpenCV.Net.Size)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Size"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Size"/> structure on the left of the equality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Size"/> structure on the right of the equality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have equal width and height;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Size.op_Inequality(OpenCV.Net.Size,OpenCV.Net.Size)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Size"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Size"/> structure on the left of the inequality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Size"/> structure on the right of the inequality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ either in width or height;
            <b>false</b> if <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="P:OpenCV.Net.Size.Zero">
            <summary>
            Returns a <see cref="T:OpenCV.Net.Size"/> that has <see cref="F:OpenCV.Net.Size.Width"/> and
            <see cref="F:OpenCV.Net.Size.Height"/> values set to zero.
            </summary>
        </member>
        <member name="T:OpenCV.Net.Size2f">
            <summary>
            Represents the sub-pixel accurate size of a rectangle.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Size2f.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="F:OpenCV.Net.Size2f.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="M:OpenCV.Net.Size2f.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.Size2f"/> structure from the specified dimensions.
            </summary>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:OpenCV.Net.Size2f.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:OpenCV.Net.Size2f"/> structure.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:OpenCV.Net.Size2f"/> structure.</returns>
        </member>
        <member name="M:OpenCV.Net.Size2f.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref="T:OpenCV.Net.Size2f"/> structure
            with the same dimensions as this <see cref="T:OpenCV.Net.Size2f"/> structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is a <see cref="T:OpenCV.Net.Size2f"/> and has the
            same width and height as this <see cref="T:OpenCV.Net.Size2f"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Size2f.Equals(OpenCV.Net.Size2f)">
            <summary>
            Returns a value indicating whether this instance has the same dimensions
            as a specified <see cref="T:OpenCV.Net.Size2f"/> structure.
            </summary>
            <param name="other">The <see cref="T:OpenCV.Net.Size2f"/> structure to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same width and height as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Size2f.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:OpenCV.Net.Size2f"/>
            structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="F:OpenCV.Net.Size2f.Width"/> and <see cref="F:OpenCV.Net.Size2f.Height"/>
            values of this <see cref="T:OpenCV.Net.Size2f"/> structure.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Size2f.op_Equality(OpenCV.Net.Size2f,OpenCV.Net.Size2f)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Size2f"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Size2f"/> structure on the left of the equality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Size2f"/> structure on the right of the equality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have equal width and height;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:OpenCV.Net.Size2f.op_Inequality(OpenCV.Net.Size2f,OpenCV.Net.Size2f)">
            <summary>
            Tests whether two <see cref="T:OpenCV.Net.Size2f"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:OpenCV.Net.Size2f"/> structure on the left of the inequality operator.</param>
            <param name="right">The <see cref="T:OpenCV.Net.Size2f"/> structure on the right of the inequality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ either in width or height;
            <b>false</b> if <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="T:OpenCV.Net.SeqSlice">
            <summary>
            Represents a sequence slice.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SeqSlice.WholeSeqEndIndex">
            <summary>
            An index value that represents the end of the whole sequence.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SeqSlice.StartIndex">
            <summary>
            The inclusive start index of the slice.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SeqSlice.EndIndex">
            <summary>
            The exclusive end index boundary of the slice.
            </summary>
        </member>
        <member name="M:OpenCV.Net.SeqSlice.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.SeqSlice"/> structure from
            the specified start and end indices.
            </summary>
            <param name="start">The inclusive start index of the slice.</param>
            <param name="end">The exclusive end index boundary of the slice.</param>
        </member>
        <member name="M:OpenCV.Net.SeqSlice.SliceLength(OpenCV.Net.Seq)">
            <summary>
            Calculates the number of elements in the slice for a specified sequence.
            </summary>
            <param name="seq">The sequence on which to compute the slice length.</param>
            <returns>The number of elements in the slice for the specified sequence.</returns>
        </member>
        <member name="P:OpenCV.Net.SeqSlice.WholeSeq">
            <summary>
            Returns a <see cref="T:OpenCV.Net.SeqSlice"/> that is set to encompass the whole sequence.
            </summary>
        </member>
        <member name="T:OpenCV.Net.SparseMat">
            <summary>
            Represents a multi-dimensional sparse multi-channel array.
            </summary>
        </member>
        <member name="M:OpenCV.Net.SparseMat.#ctor(System.Int32[],OpenCV.Net.Depth,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.SparseMat"/> class with the
            specified dimension sizes, element bit <paramref name="depth"/> and
            <paramref name="channels"/> per element.
            </summary>
            <param name="dimSizes">The size of each of the multi-dimensional array dimensions.</param>
            <param name="depth">The bit depth of matrix elements.</param>
            <param name="channels">The number of channels per element.</param>
        </member>
        <member name="M:OpenCV.Net.SparseMat.Clone">
            <summary>
            Creates a new <see cref="T:OpenCV.Net.SparseMat"/> that is a copy of the current instance.
            </summary>
            <returns>
            A new <see cref="T:OpenCV.Net.SparseMat"/> that is a copy of this instance.
            </returns>
        </member>
        <member name="M:OpenCV.Net.SparseMat.GetSparseNodes">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> that supports iteration over the element nodes
            of the sparse array.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> that supports iteration over the element nodes
            of the sparse array.
            </returns>
        </member>
        <member name="M:OpenCV.Net.SparseMat.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.SparseMat"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.SparseMat.Depth">
            <summary>
            Gets the bit depth of matrix elements.
            </summary>
        </member>
        <member name="P:OpenCV.Net.SparseMat.Channels">
            <summary>
            Gets the number of channels per matrix element.
            </summary>
        </member>
        <member name="P:OpenCV.Net.SparseMat.ElementSize">
            <summary>
            Gets the size of each matrix element in bytes.
            </summary>
        </member>
        <member name="T:OpenCV.Net.SparseNode">
            <summary>
            Represents an element node in a sparse array.
            </summary>
        </member>
        <member name="M:OpenCV.Net.SparseNode.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.SparseNode"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.SparseNode.Index">
            <summary>
            Gets the multi-dimensional index of the node in the sparse array.
            </summary>
        </member>
        <member name="P:OpenCV.Net.SparseNode.Value">
            <summary>
            Gets the value of the node.
            </summary>
        </member>
        <member name="T:OpenCV.Net.StereoBM">
            <summary>
            Represents the block matching algorithm for computing stereo correspondence.
            </summary>
        </member>
        <member name="M:OpenCV.Net.StereoBM.#ctor(OpenCV.Net.StereoBMPreset,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.StereoBM"/> class with the specified
            parameter <paramref name="preset"/> and <paramref name="numberOfDisparities"/>.
            </summary>
            <param name="preset">Specifies the whole set of algorithm parameters.</param>
            <param name="numberOfDisparities">
            The disparity search range. For each pixel algorithm will find the best disparity from 0
            (default minimum disparity) to <paramref name="numberOfDisparities"/>. The search range
            can then be shifted by changing the minimum disparity.
            </param>
        </member>
        <member name="M:OpenCV.Net.StereoBM.FindStereoCorrespondence(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)">
            <summary>
            Computes the disparity map using block matching algorithm.
            </summary>
            <param name="left">The left single-channel, 8-bit image.</param>
            <param name="right">The right image of the same size and the same type.</param>
            <param name="disparity">
            The output single-channel 16-bit signed, or 32-bit floating-point disparity map of the
            same size as input images. In the first case the computed disparities are represented
            as fixed-point numbers with 4 fractional bits (i.e. the computed disparity values are
            multiplied by 16 and rounded to integers).
            </param>
        </member>
        <member name="M:OpenCV.Net.StereoBM.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.StereoBM"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.StereoBM.PreFilterType">
            <summary>
            Gets or sets the block matching pre-filter type.
            </summary>
        </member>
        <member name="P:OpenCV.Net.StereoBM.PreFilterSize">
            <summary>
            Gets or sets the pre-filter averaging window size. Must be odd.
            </summary>
        </member>
        <member name="P:OpenCV.Net.StereoBM.PreFilterCap">
            <summary>
            Gets or sets the cap for pre-filtering. The output is clipped to be within
            [-PreFilterCap,PreFilterCap].
            </summary>
        </member>
        <member name="P:OpenCV.Net.StereoBM.SadWindowSize">
            <summary>
            Gets or sets the Sum of Absolute Differences window size. Must be odd.
            </summary>
        </member>
        <member name="P:OpenCV.Net.StereoBM.MinDisparity">
            <summary>
            Gets or sets the minimum disparity (can be negative).
            </summary>
        </member>
        <member name="P:OpenCV.Net.StereoBM.NumberOfDisparities">
            <summary>
            Gets or sets the difference between the maximum disparity and minimum disparity.
            </summary>
        </member>
        <member name="P:OpenCV.Net.StereoBM.TextureThreshold">
            <summary>
            Gets or sets the texture threshold. The disparity is only computed for pixels
            with textured enough neighborhood.
            </summary>
        </member>
        <member name="P:OpenCV.Net.StereoBM.UniquenessRatio">
            <summary>
            Gets or sets the uniqueness ratio. The computed computed disparity d* should
            only be accepted if SAD(d) >= SAD(d*)*(1 + uniquenessRatio/100) for any
            d != d*+/-1 within the search range.
            </summary>
        </member>
        <member name="P:OpenCV.Net.StereoBM.SpeckleWindowSize">
            <summary>
            Gets or sets the size of the disparity variation window.
            </summary>
        </member>
        <member name="P:OpenCV.Net.StereoBM.SpeckleRange">
            <summary>
            Gets or sets the acceptable range of variation in window.
            </summary>
        </member>
        <member name="P:OpenCV.Net.StereoBM.TrySmallerWindows">
            <summary>
            Gets or sets a value indicating whether to use smaller windows. The results
            may be more accurate, at the expense of slower processing.
            </summary>
        </member>
        <member name="P:OpenCV.Net.StereoBM.Roi1">
            <summary>
            Gets or sets the clipping ROI for the left image.
            </summary>
        </member>
        <member name="P:OpenCV.Net.StereoBM.Roi2">
            <summary>
            Gets or sets the clipping ROI for the right image.
            </summary>
        </member>
        <member name="P:OpenCV.Net.StereoBM.Disparity12MaxDiff">
            <summary>
            Gets or sets the maximum allowed difference between the explicitly computed left-to-right
            disparity map and the implicitly computed right-to-left disparity. If for some pixel the
            difference is larger than the specified threshold, the disparity at the pixel is
            invalidated. By default this parameter is set to (-1), which means that the left-right
            check is not performed.
            </summary>
        </member>
        <member name="T:OpenCV.Net.StringHashNode">
            <summary>
            Represents a unique reference for a given name.
            </summary>
        </member>
        <member name="M:OpenCV.Net.StringHashNode.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.StringHashNode"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.StringHashNode.HashVal">
            <summary>
            Gets the hash code value of the name.
            </summary>
        </member>
        <member name="P:OpenCV.Net.StringHashNode.Str">
            <summary>
            Gets the string representation of the name.
            </summary>
        </member>
        <member name="T:OpenCV.Net.TermCriteria">
            <summary>
            Represents a termination criteria for iterative algorithms.
            </summary>
        </member>
        <member name="F:OpenCV.Net.TermCriteria.Type">
            <summary>
            Specifies the particular combination of criteria to use.
            </summary>
        </member>
        <member name="F:OpenCV.Net.TermCriteria.MaxIter">
            <summary>
            The maximum number of iterations.
            </summary>
        </member>
        <member name="F:OpenCV.Net.TermCriteria.Epsilon">
            <summary>
            The minimum required accuracy.
            </summary>
        </member>
        <member name="M:OpenCV.Net.TermCriteria.#ctor(OpenCV.Net.TermCriteriaType,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.TermCriteria"/> structure
            with the specified termination mode, maximum number of iterations and
            required accuracy.
            </summary>
            <param name="type">The particular combination of criteria to use.</param>
            <param name="maxIter">The maximum number of iterations.</param>
            <param name="epsilon">The minimum required accuracy.</param>
        </member>
        <member name="T:OpenCV.Net.VideoWriter">
            <summary>
            Represents a frame writer for a video file stream.
            </summary>
        </member>
        <member name="M:OpenCV.Net.VideoWriter.#ctor(System.String,System.Int32,System.Double,OpenCV.Net.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.VideoWriter"/> class with the specified
            <paramref name="fileName"/>, codec and format parameters.
            </summary>
            <param name="fileName">Name of the output video file.</param>
            <param name="fourCC">4-character code of codec used to compress the frames.</param>
            <param name="fps">Framerate of the created video stream.</param>
            <param name="frameSize">Size of the video frames.</param>
        </member>
        <member name="M:OpenCV.Net.VideoWriter.#ctor(System.String,System.Int32,System.Double,OpenCV.Net.Size,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.VideoWriter"/> class with the specified
            <paramref name="fileName"/>, codec and format parameters.
            </summary>
            <param name="fileName">Name of the output video file.</param>
            <param name="fourCC">4-character code of codec used to compress the frames.</param>
            <param name="fps">Framerate of the created video stream.</param>
            <param name="frameSize">Size of the video frames.</param>
            <param name="isColor">
            If <b>true</b>, the encoder will expect and encode color frames, otherwise it will work
            with grayscale frames (the flag is currently supported on Windows only).
            </param>
        </member>
        <member name="M:OpenCV.Net.VideoWriter.WriteFrame(OpenCV.Net.IplImage)">
            <summary>
            Writes a frame to a video file.
            </summary>
            <param name="image">The written frame.</param>
            <returns><b>True</b> if the frame was written successfully; false, otherwise.</returns>
        </member>
        <member name="M:OpenCV.Net.VideoWriter.FourCC(System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Creates the integer representation of a 4-character codec code.
            </summary>
            <param name="c1">The first character of the codec code.</param>
            <param name="c2">The second character of the codec code.</param>
            <param name="c3">The third character of the codec code.</param>
            <param name="c4">The fourth character of the codec code.</param>
            <returns>The integer representation of the codec code.</returns>
        </member>
        <member name="M:OpenCV.Net.VideoWriter.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.VideoWriter"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="T:OpenCV.Net.FontWeight">
            <summary>
            Specifies the predefined font weights for Qt fonts.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontWeight.Light">
            <summary>
            Specifies a light Qt font weight.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontWeight.Normal">
            <summary>
            Specifies a normal Qt font weight.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontWeight.DemiBold">
            <summary>
            Specifies a demibold Qt font weight.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontWeight.Bold">
            <summary>
            Specifies a bold Qt font weight.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontWeight.Black">
            <summary>
            Specifies a black Qt font weight.
            </summary>
        </member>
        <member name="T:OpenCV.Net.FontStyle">
            <summary>
            Specifies the available Qt font glyph styles.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontStyle.Normal">
            <summary>
            Specifies a normal (i.e. non-italicized) Qt font glyph style.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontStyle.Italic">
            <summary>
            Specifies an italicized Qt font glyph style.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FontStyle.Oblique">
            <summary>
            Specifies a Qt font glyph style with an italic appearance but based on unstyled glyphs.
            </summary>
        </member>
        <member name="T:OpenCV.Net.ButtonCallback">
            <summary>
            Represents the method that will be called when the button changes state.
            </summary>
            <param name="state">The new state of the button.</param>
        </member>
        <member name="T:OpenCV.Net.ButtonType">
            <summary>
            Specifies the available GUI button types.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ButtonType.PushButton">
            <summary>
            Specifies that the button will be a push button.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ButtonType.CheckBox">
            <summary>
            Specifies that the button will be a checkbox button.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ButtonType.RadioBox">
            <summary>
            Specifies that the button will be a radiobox button. The radiobox on the same button bar
            (same line) are exclusive; only one can be selected at a time.
            </summary>
        </member>
        <member name="T:OpenCV.Net.WindowProperty">
            <summary>
            Specifies the window properties that are available to query and modify.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WindowProperty.Fullscreen">
            <summary>
            Specifies the fullscreen state of the window.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WindowProperty.AutoSize">
            <summary>
            Specifies the autosize state of the window.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WindowProperty.AspectRatio">
            <summary>
            Specifies the aspect ratio of the window.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WindowProperty.OpenGL">
            <summary>
            Specifies the window's OpenGL support.
            </summary>
        </member>
        <member name="T:OpenCV.Net.WindowFlags">
            <summary>
            Specifies the available flags used to create a named window.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WindowFlags.Normal">
            <summary>
            Specifies that the user can resize the window (no constraint).
            </summary>
        </member>
        <member name="F:OpenCV.Net.WindowFlags.AutoSize">
            <summary>
            Specifies that the user cannot resize the window, i.e. the size is constrained by
            the displayed image.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WindowFlags.OpenGL">
            <summary>
            Specifies that the window will have OpenGL support.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WindowFlags.GuiExpanded">
            <summary>
            Specifies that the new Qt status and tool bars should be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WindowFlags.GuiNormal">
            <summary>
            Specifies that the classic GUI style should be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WindowFlags.Fullscreen">
            <summary>
            Specifies that the window should be fullscreen.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WindowFlags.FreeRatio">
            <summary>
            Specifies that the image can be resized freely (no ratio constraint).
            </summary>
        </member>
        <member name="F:OpenCV.Net.WindowFlags.KeepRatio">
            <summary>
            Specifies that the image aspect ratio will be maintained.
            </summary>
        </member>
        <member name="T:OpenCV.Net.TrackbarCallback">
            <summary>
            Represents the method that wil be called whenever the trackbar changes value.
            </summary>
            <param name="pos">The new position of the trackbar.</param>
        </member>
        <member name="T:OpenCV.Net.MouseEvent">
            <summary>
            Specifies mouse event categories.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEvent.MouseMove">
            <summary>
            Specifies that the event was triggered by mouse movement.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEvent.LButtonDown">
            <summary>
            Specifies that the event was triggered by depressing the left mouse button.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEvent.RButtonDown">
            <summary>
            Specifies that the event was triggered by depressing the right mouse button.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEvent.MButtonDown">
            <summary>
            Specifies that the event was triggered by depressing the middle mouse button.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEvent.LButtonUp">
            <summary>
            Specifies that the event was triggered by releasing the left mouse button.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEvent.RButtonUp">
            <summary>
            Specifies that the event was triggered by releasing the right mouse button.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEvent.MButtonUp">
            <summary>
            Specifies that the event was triggered by releasing the middle mouse button.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEvent.LButtonDblClk">
            <summary>
            Specifies that the event was triggered by double cliking with the left mouse button.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEvent.RButtonDblClk">
            <summary>
            Specifies that the event was triggered by double cliking with the right mouse button.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEvent.MButtonDblClk">
            <summary>
            Specifies that the event was triggered by double cliking with the middle mouse button.
            </summary>
        </member>
        <member name="T:OpenCV.Net.MouseEventFlags">
            <summary>
            Specifies mouse event modifier flags.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEventFlags.LButton">
            <summary>
            Specifies that the left mouse button is depressed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEventFlags.RButton">
            <summary>
            Specifies that the right mouse button is depressed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEventFlags.MButton">
            <summary>
            Specifies that the middle mouse button is depressed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEventFlags.CtrlKey">
            <summary>
            Specifies that the CTRL key is depressed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEventFlags.ShiftKey">
            <summary>
            Specifies that the SHIFT key is depressed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MouseEventFlags.AltKey">
            <summary>
            Specifies that the ALT key is depressed.
            </summary>
        </member>
        <member name="T:OpenCV.Net.MouseCallback">
            <summary>
            Represents the method that will handle mouse events of a named window.
            </summary>
            <param name="evt">The mouse event category.</param>
            <param name="x">The x-coordinate of the mouse during the generating mouse event.</param>
            <param name="y">The y-coordinate of the mouse during the generating mouse event.</param>
            <param name="flags">The mouse event modifier flags.</param>
        </member>
        <member name="T:OpenCV.Net.LoadImageFlags">
            <summary>
            Specifies the color type of a loaded image.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LoadImageFlags.Unchanged">
            <summary>
            Specifies that the image is 8-bit, color or not. Overrides all other flags.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LoadImageFlags.Grayscale">
            <summary>
            Specifies that the image is 8-bit grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LoadImageFlags.Color">
            <summary>
            Specifies that the image is 8-bit color.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LoadImageFlags.AnyDepth">
            <summary>
            Specifies that the image can be either 16-bit or 32-bit when the input
            has the corresponding depth. Otherwise, convert it to 8-bit.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LoadImageFlags.AnyColor">
            <summary>
            Specifies that the image can be color or not. Unless <see cref="F:OpenCV.Net.LoadImageFlags.AnyDepth"/>
            is specified, the image will be converted to 8-bit.
            </summary>
        </member>
        <member name="T:OpenCV.Net.CompressionParameters">
            <summary>
            Specifies the available image compression parameters.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CompressionParameters.JpegQuality">
            <summary>
            Specifies the quality of image JPEG compression from 0 to 100 (the higher the better).
            Default value is 95.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CompressionParameters.PngCompression">
            <summary>
            Specifies the PNG compression level from 0 to 9. A higher value means a smaller size
            and longer compression time. Default value is 3.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CompressionParameters.PngStrategy">
            <summary>
            Specifies the PNG compression strategy.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CompressionParameters.PngBiLevel">
            <summary>
            Specifies whether PNG compression should use bi-level (binary) images. 
            </summary>
        </member>
        <member name="F:OpenCV.Net.CompressionParameters.PngStrategyDefault">
            <summary>
            Specifies a default PNG compression strategy.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CompressionParameters.PngStrategyFiltered">
            <summary>
            Specifies a filtered PNG compression strategy.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CompressionParameters.PngStrategyHuffmanOnly">
            <summary>
            Specifies a huffman code based PNG compression strategy.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CompressionParameters.PngStrategyRle">
            <summary>
            Specifies a run-length encoding PNG compression strategy.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CompressionParameters.PngStrategyFixed">
            <summary>
            Specifies a fixed PNG compression strategy.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CompressionParameters.PxmBinary">
            <summary>
            Specifies a binary format flag for PPM, PGM or PBM. Default value is 1.
            </summary>
        </member>
        <member name="T:OpenCV.Net.ConvertImageFlags">
            <summary>
            Specifies operation flags for <see cref="M:OpenCV.Net.CV.ConvertImage(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.ConvertImageFlags)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ConvertImageFlags.None">
            <summary>
            Specifies that no flags should be used for this call.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ConvertImageFlags.Flip">
            <summary>
            Specifies that the image should be flipped vertically.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ConvertImageFlags.SwapRB">
            <summary>
            Specifies that the red and blue channels should be swapped.
            </summary>
        </member>
        <member name="T:OpenCV.Net.OpenGLDrawCallback">
            <summary>
            Represents the method that will draw OpenGL on top of the image display.
            </summary>
        </member>
        <member name="T:OpenCV.Net.CaptureDomain">
            <summary>
            Specifies the available camera or video capture domains.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.Any">
            <summary>
            Specifies that the domain will be automatically detected.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.Mil">
            <summary>
            Specifies the MIL proprietary driver domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.Vfw">
            <summary>
            Specifies the native platform specific video capture domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.V4L">
            <summary>
            Specifies the native platform specific video capture domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.V4L2">
            <summary>
            Specifies the native platform specific video capture domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.Fireware">
            <summary>
            Specifies the IEEE 1394 capture driver domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.Firewire">
            <summary>
            Specifies the IEEE 1394 capture driver domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.Ieee1394">
            <summary>
            Specifies the IEEE 1394 capture driver domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.DC1394">
            <summary>
            Specifies the IEEE 1394 capture driver domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.Cmu1394">
            <summary>
            Specifies the IEEE 1394 capture driver domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.Stereo">
            <summary>
            Specifies the TYZX proprietary driver domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.Tyzx">
            <summary>
            Specifies the TYZX proprietary driver domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.TyzxLeft">
            <summary>
            Specifies the TYZX proprietary driver's left source.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.TyzxRight">
            <summary>
            Specifies the TYZX proprietary driver's right source.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.TyzxColor">
            <summary>
            Specifies the TYZX proprietary driver's color source.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.TyzxZ">
            <summary>
            Specifies the TYZX proprietary driver's depth source.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.QuickTime">
            <summary>
            Specifies the Quicktime capture domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.Unicap">
            <summary>
            Specifies the Unicap driver domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.DirectShow">
            <summary>
            Specifies the DirectShow (via videoInput) capture domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.Msmf">
            <summary>
            Specifies the Microsoft Media Foundation (via videoInput) capture domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.PvAPI">
            <summary>
            Specifies the PvAPI, Prosilica GigE SDK capture domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.OpenNI">
            <summary>
            Specifies the OpenNI (for Kinect) capture domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.OpenNIAsus">
            <summary>
            Specifies the OpenNI (for Asus Xtion) capture domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.Android">
            <summary>
            Specifies the Android capture domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.AndroidBack">
            <summary>
            Specifies the Android back camera capture domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.AndroidFront">
            <summary>
            Specifies the Android front camera capture domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.XIApi">
            <summary>
            Specifies the XIMEA Camera API domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.AVFoundation">
            <summary>
            Specifies the AVFoundation framework for iOS capture domain (OS X Lion will have the same API).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.Giganetix">
            <summary>
            Specifies the Smartek Giganetix GigEVision SDK capture domain.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureDomain.IntelPerc">
            <summary>
            Specifies the Intel Perceptual Computing SDK capture domain.
            </summary>
        </member>
        <member name="T:OpenCV.Net.CaptureProperty">
            <summary>
            Specifies the available properties of a camera or video file.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.DC1394Off">
            <summary>
            Turn the feature off (not controlled manually nor automatically).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.DC1394ModeManual">
            <summary>
            Specifies the manual mode for the controlling register. Set automatically
            when a value of the feature is set by the user.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.DC1394ModeAuto">
            <summary>
            Specifies the auto mode for the controlling register.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.DC1394ModeOnePushAuto">
            <summary>
            Specifies the auto single push mode for the controlling register.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.PosMsec">
            <summary>
            Specifies the movie current position in milliseconds or video capture timestamp.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.PosFrames">
            <summary>
            Specifies the 0-based index of the frame to be decoded/captured next.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.PosAviRatio">
            <summary>
            Specifies the relative position of the video file (0 - start of the film, 1 - end of the film).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.FrameWidth">
            <summary>
            Specifies the width of the frames in the video stream.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.FrameHeight">
            <summary>
            Specifies the height of the frames in the video stream.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Fps">
            <summary>
            Specifies the frame rate.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.FourCC">
            <summary>
            Specifies the 4-character code of codec.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.FrameCount">
            <summary>
            Specifies the number of frames in the video file.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Format">
            <summary>
            Specifies the format of the <see cref="T:OpenCV.Net.IplImage"/> objects returned by
            <see cref="M:OpenCV.Net.Capture.RetrieveFrame(System.Int32)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Mode">
            <summary>
            Specifies a backend-specific value indicating the current capture mode.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Brightness">
            <summary>
            Specifies the brightness of the image (only for cameras).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Contrast">
            <summary>
            Specifies the contrast of the image (only for cameras).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Saturation">
            <summary>
            Specifies the saturation of the image (only for cameras).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Hue">
            <summary>
            Specifies the hue of the image (only for cameras).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Gain">
            <summary>
            Specifies the gain of the image (only for cameras).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Exposure">
            <summary>
            Specifies the exposure (only for cameras).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.ConvertRgb">
            <summary>
            Specifies a value indicating whether images should be converted to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.WhiteBalanceBlueU">
            <summary>
            Specifies the white balance blue to green ratio (only for cameras).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Rectification">
            <summary>
            Specifies a rectification flag for stereo cameras.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Monocrome">
            <summary>
            Specifies a value indicating whether images are captured in grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Sharpness">
            <summary>
            Specifies the sharpness of the image (only for cameras).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.AutoExposure">
            <summary>
            Specifies a value indicating whether auto exposure is enabled.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Gamma">
            <summary>
            Specifies the gamma correction of the image (only for cameras).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Temperature">
            <summary>
            Specifies the current temperature in the camera sensor.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Trigger">
            <summary>
            Specifies the current trigger mode (only for cameras).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.TriggerDelay">
            <summary>
            Specifies the trigger delay (only for cameras).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.WhiteBalanceRedV">
            <summary>
            Specifies the white balance red to green ratio (only for cameras).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Zoom">
            <summary>
            Specifies the camera's zoom setting.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Focus">
            <summary>
            Specifies the camera's focus setting.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Guid">
            <summary>
            Specifies the camera's device GUID.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IsoSpeed">
            <summary>
            Specifies the ISO speed of the camera.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.MaxDC1394">
            <summary>
            Specifies a value that indicates the end of DC1394 backend properties (internal use only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Backlight">
            <summary>
            Specifies the camera's backlight compensation setting.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Pan">
            <summary>
            Specifies the camera's pan setting, in degrees.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Tilt">
            <summary>
            Specifies the camera's tilt setting, in degrees.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Roll">
            <summary>
            Specifies the camera's roll setting, in degrees.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Iris">
            <summary>
            Specifies the camera's iris setting.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Settings">
            <summary>
            Specifies a value indicating whether the camera's driver configuration dialog is displayed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.Autograb">
            <summary>
            Specifies a value indicating whether auto-grab is enabled (Android cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.SupportedPreviewSizesString">
            <summary>
            Specifies the supported preview sizes. Returns a pointer to a native string
            (Android cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.PreviewFormat">
            <summary>
            Specifies the supported preview format. Returns a pointer to a native string
            (Android cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIDepthGenerator">
            <summary>
            Specifies a flag for getting/setting properties of the OpenNI sensor depth generator.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIImageGenerator">
            <summary>
            Specifies a flag for getting/setting properties of the OpenNI sensor image generator.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIGeneratorsMask">
            <summary>
            Specifies a combination of <see cref="F:OpenCV.Net.CaptureProperty.OpenNIDepthGenerator"/> and
            <see cref="F:OpenCV.Net.CaptureProperty.OpenNIImageGenerator"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIOutputMode">
            <summary>
            Specifies the output mode of the OpenNI generator.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIFrameMaxDepth">
            <summary>
            Specifies the maximum supported depth of the OpenNI sensor, in mm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIBaseline">
            <summary>
            Specifies the baseline sensor value, in mm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIFocalLength">
            <summary>
            Specifies the sensor focal length in pixels.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIRegistration">
            <summary>
            Specifies a flag that registers the remapping depth map to image map by changing
            the generator’s view point.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIRegistrationOn">
            <summary>
            Specifies that the <see cref="F:OpenCV.Net.CaptureProperty.OpenNIRegistration"/> flag is "on".
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIApproxFrameSync">
            <summary>
            Specifies whether the depth generator should be approximately synchronized with the image generator.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIMaxBufferSize">
            <summary>
            Specifies the maximum buffer size for generator synchronization.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNICircleBuffer">
            <summary>
            Specifies whether the synchronization buffer is circular.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIMaxTimeDuration">
            <summary>
            Specifies the maximum time difference to consider depth and image frame to be in sync.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIGeneratorPresent">
            <summary>
            Specifies a flag that is used to check whether a given OpenNI generator is present.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIImageGeneratorPresent">
            <summary>
            Specifies whether an image generator is present.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIImageGeneratorOutputMode">
            <summary>
            Specifies the output mode of the OpenNI image generator.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIDepthGeneratorBaseline">
            <summary>
            Specifies the depth sensor baseline value, in mm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIDepthGeneratorFocalLength">
            <summary>
            Specifies the depth sensor focal length in pixels.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIDepthGeneratorRegistration">
            <summary>
            Specifies a flag that registers the remapping depth map to image map by changing
            the depth generator’s view point.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.OpenNIDepthGeneratorRegistrationOn">
            <summary>
            Specifies that the <see cref="F:OpenCV.Net.CaptureProperty.OpenNIDepthGeneratorRegistration"/> flag is "on".
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.GStreamerQueueLength">
            <summary>
            Specifies the queue length of cameras acquired through the GStreamer interface.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.PVApiMulticastIP">
            <summary>
            Specifies the IP address to enable multicast master mode. A zero address disables
            multicast (GStreamer interface cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIDownsampling">
            <summary>
            Specifies whether to change image resolution by binning or skipping (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIDataFormat">
            <summary>
            Specifies the output data format (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIOffsetX">
            <summary>
            Specifies the horizontal offset from the origin to the area of interest, in pixels
            (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIOffsetY">
            <summary>
            Specifies the vertical offset from the origin to the area of interest, in pixels
            (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XITrgSource">
            <summary>
            Specifies the trigger source (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XITrgSoftware">
            <summary>
            Specifies whether to generate an internal trigger (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIGpiSelector">
            <summary>
            Specifies the general purpose input (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIGpiMode">
            <summary>
            Specifies the general purpose input mode (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIGpiLevel">
            <summary>
            Specifies the general purpose input level (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIGpoSelector">
            <summary>
            Specifies the general purpose output (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIGpoMode">
            <summary>
            Specifies the general purpose output mode (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XILedSelector">
            <summary>
            Specifies the camera signalling LED (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XILedMode">
            <summary>
            Specifies the functionality of the camera signalling LED (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIManualWb">
            <summary>
            Specifies whether to calculate white balance. Must be called during acquisition (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIAutoWb">
            <summary>
            Specifies automatic white balance calculation (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIAeag">
            <summary>
            Specifies automatic exposure and gain (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIExpPriority">
            <summary>
            Specifies exposure priority relative to gain (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIAeMaxLimit">
            <summary>
            Specifies the maximum limit of exposure in AEAG procedure (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIAgMaxLimit">
            <summary>
            Specifies the maximum limit of gain in AEAG procedure (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XIAeagLevel">
            <summary>
            Specifies the average intensity of the output signal that AEAG should achieve,
            in percentage (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.XITimeout">
            <summary>
            Specifies the image capture timeout in milliseconds (XIMEA SDK only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.AndroidFlashMode">
            <summary>
            Specifies the camera flash mode (Android cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.AndroidFocusMode">
            <summary>
            Specifies the camera focus mode (Android cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.AndroidWhiteBalance">
            <summary>
            Specifies the camera white balance mode (Android cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.AndroidAntibanding">
            <summary>
            Specifies the camera antibanding mode (Android cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.AndroidFocalLength">
            <summary>
            Specifies the camera focal length (Android cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.AndroidFocusDistanceNear">
            <summary>
            Specifies the camera near focus distance (Android cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.AndroidFocusDistanceOptimal">
            <summary>
            Specifies the camera optimal focus distance (Android cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.AndroidFocusDistanceFar">
            <summary>
            Specifies the camera far focus distance (Android cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IosDeviceFocus">
            <summary>
            Specifies the device focus (AV Foundation cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IosDeviceExposure">
            <summary>
            Specifies the device exposure (AV Foundation cameras only). 
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IosDeviceFlash">
            <summary>
            Specifies the device flash state (AV Foundation cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IosDeviceWhitebalance">
            <summary>
            Specifies the device white balance (AV Foundation cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IosDeviceTorch">
            <summary>
            Specifies whether the device has a torch (AV Foundation cameras only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.GigaFrameOffsetX">
            <summary>
            Specifies the horizontal offset of the image frame (Smartek Giganetix Ethernet vision interface only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.GigaFrameOffsetY">
            <summary>
            Specifies the vertical offset of the image frame (Smartek Giganetix Ethernet vision interface only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.GigaFrameWidthMax">
            <summary>
            Specifies the maximum frame width (Smartek Giganetix Ethernet vision interface only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.GigaFrameHeightMax">
            <summary>
            Specifies the maximum frame height (Smartek Giganetix Ethernet vision interface only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.GigaFrameSensorWidth">
            <summary>
            Specifies the sensor width (Smartek Giganetix Ethernet vision interface only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.GigaFrameSensorHeight">
            <summary>
            Specifies the sensor height (Smartek Giganetix Ethernet vision interface only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IntelPercProfileCount">
            <summary>
            Specifies the number of profiles (Intel Perceptual Computing interface only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IntelPercProfileIndex">
            <summary>
            Specifies the profile index (Intel Perceptual Computing interface only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IntelPercDepthLowConfidenceValue">
            <summary>
            Specifies the low confidence value of the depth sensor (Intel Perceptual Computing interface only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IntelPercDepthSaturationValue">
            <summary>
            Specifies the saturation value of the depth sensor (Intel Perceptual Computing interface only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IntelPercDepthConfidenceThreshold">
            <summary>
            Specifies the confidence threshold of the depth sensor (Intel Perceptual Computing interface only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IntelPercDepthFocalLengthHorizontal">
            <summary>
            Specifies the horizontal focal length of the depth sensor (Intel Perceptual Computing interface only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IntelPercDepthFocalLengthVertical">
            <summary>
            Specifies the vertical focal length of the depth sensor (Intel Perceptual Computing interface only).
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IntelPercDepthGenerator">
            <summary>
            Specifies a flag for getting/setting properties of the Intel Perceptual SDK sensor depth generator.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IntelPercImageGenerator">
            <summary>
            Specifies a flag for getting/setting properties of the Intel Perceptual SDK sensor image generator.
            </summary>
        </member>
        <member name="F:OpenCV.Net.CaptureProperty.IntelPercGeneratorsMask">
            <summary>
            Specifies a combination of <see cref="F:OpenCV.Net.CaptureProperty.IntelPercDepthGenerator"/> and
            <see cref="F:OpenCV.Net.CaptureProperty.IntelPercImageGenerator"/>.
            </summary>
        </member>
        <member name="T:OpenCV.Net.SmoothMethod">
            <summary>
            Specifies the type of smoothing used by <see cref="M:OpenCV.Net.CV.Smooth(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.SmoothMethod,System.Int32,System.Int32,System.Double,System.Double)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SmoothMethod.BlurNoScale">
            <summary>
            Specifies a linear convolution with size1 x size2 box kernel (all 1’s).
            If you want to smooth different pixels with different-size box kernels,
            you can use the integral image that is computed using <see cref="M:OpenCV.Net.CV.Integral(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SmoothMethod.Blur">
            <summary>
            Specifies a linear convolution with size1 x size2 box kernel (all 1’s)
            with subsequent scaling by 1 / (size1 x size2).
            </summary>
        </member>
        <member name="F:OpenCV.Net.SmoothMethod.Gaussian">
            <summary>
            Specifies a linear convolution with a size1 x size2 Gaussian kernel.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SmoothMethod.Median">
            <summary>
            Specifies a median filter with a size1 x size2 square aperture.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SmoothMethod.Bilateral">
            <summary>
            Specifies a bilateral filter with a size1 x size2 square aperture,
            color sigma = sigma1 and spatial sigma = sigma2.
            </summary>
        </member>
        <member name="T:OpenCV.Net.PyramidDecompositionFilter">
            <summary>
            Specifies the type of linear filter used for pyramid up and downsampling.
            </summary>
        </member>
        <member name="F:OpenCV.Net.PyramidDecompositionFilter.Gaussian5x5">
            <summary>
            Specifies a 5x5 gaussian filter.
            </summary>
        </member>
        <member name="T:OpenCV.Net.ColorConversion">
            <summary>
            Specifies the color space conversion used by <see cref="M:OpenCV.Net.CV.CvtColor(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.ColorConversion)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2Bgra">
            <summary>
            Specifies a conversion from the BGR color space to BGRA.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2Rgba">
            <summary>
            Specifies a conversion from the RGB color space to RGBA.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgra2Bgr">
            <summary>
            Specifies a conversion from the BGRA color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgba2Rgb">
            <summary>
            Specifies a conversion from the RGBA color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2Rgba">
            <summary>
            Specifies a conversion from the BGR color space to RGBA.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2Bgra">
            <summary>
            Specifies a conversion from the RGB color space to BGRA.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgba2Bgr">
            <summary>
            Specifies a conversion from the RGBA color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgra2Rgb">
            <summary>
            Specifies a conversion from the BGRA color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2Rgb">
            <summary>
            Specifies a conversion from the BGR color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2Bgr">
            <summary>
            Specifies a conversion from the RGB color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgra2Rgba">
            <summary>
            Specifies a conversion from the BGRA color space to RGBA.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgba2Bgra">
            <summary>
            Specifies a conversion from the RGBA color space to BGRA.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2Gray">
            <summary>
            Specifies a conversion from the BGR color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2Gray">
            <summary>
            Specifies a conversion from the RGB color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Gray2Bgr">
            <summary>
            Specifies a conversion from grayscale to the BGR color space.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Gray2Rgb">
            <summary>
            Specifies a conversion from grayscale to the RGB color space.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Gray2Bgra">
            <summary>
            Specifies a conversion from grayscale to the BGRA color space.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Gray2Rgba">
            <summary>
            Specifies a conversion from grayscale to the RGBA color space.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgra2Gray">
            <summary>
            Specifies a conversion from the BGRA color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgba2Gray">
            <summary>
            Specifies a conversion from the RGBA color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2Bgr565">
            <summary>
            Specifies a conversion from the BGR color space to 16-bit BGR565.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2Bgr565">
            <summary>
            Specifies a conversion from the RGB color space to 16-bit BGR565.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr5652Bgr">
            <summary>
            Specifies a conversion from the 16-bit BGR565 color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr5652Rgb">
            <summary>
            Specifies a conversion from the 16-bit BGR565 color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgra2Bgr565">
            <summary>
            Specifies a conversion from the BGRA color space to 16-bit BGR565.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgba2Bgr565">
            <summary>
            Specifies a conversion from the RGBA color space to 16-bit BGR565.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr5652Bgra">
            <summary>
            Specifies a conversion from the 16-bit BGR565 color space to BGRA.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr5652Rgba">
            <summary>
            Specifies a conversion from the 16-bit BGR565 color space to RGBA.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Gray2Bgr565">
            <summary>
            Specifies a conversion from grayscale to the 16-bit BGR565 color space.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr5652Gray">
            <summary>
            Specifies a conversion from the 16-bit BGR565 color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2Bgr555">
            <summary>
            Specifies a conversion from the BGR color space to 16-bit BGR555.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2Bgr555">
            <summary>
            Specifies a conversion from the RGB color space to 16-bit BGR555.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr5552Bgr">
            <summary>
            Specifies a conversion from the 16-bit BGR555 color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr5552Rgb">
            <summary>
            Specifies a conversion from the 16-bit BGR555 color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgra2Bgr555">
            <summary>
            Specifies a conversion from the BGRA color space to 16-bit BGR555.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgba2Bgr555">
            <summary>
            Specifies a conversion from the RGBA color space to 16-bit BGR555.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr5552Bgra">
            <summary>
            Specifies a conversion from the 16-bit BGR555 color space to BGRA.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr5552Rgba">
            <summary>
            Specifies a conversion from the 16-bit BGR555 color space to RGBA.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Gray2Bgr555">
            <summary>
            Specifies a conversion from grayscale to the 16-bit BGR555 color space.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr5552Gray">
            <summary>
            Specifies a conversion from the 16-bit BGR555 color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2Xyz">
            <summary>
            Specifies a conversion from the BGR color space to CIE XYZ Rec. 709.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2Xyz">
            <summary>
            Specifies a conversion from the RGB color space to CIE XYZ Rec. 709.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Xyz2Bgr">
            <summary>
            Specifies a conversion from the CIE XYZ Rec. 709 color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Xyz2Rgb">
            <summary>
            Specifies a conversion from the CIE XYZ Rec. 709 color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2YCrCb">
            <summary>
            Specifies a conversion from the BGR color space to YCrCb.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2YCrCb">
            <summary>
            Specifies a conversion from the RGB color space to YCrCb.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.YCrCb2Bgr">
            <summary>
            Specifies a conversion from the YCrCb color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.YCrCb2Rgb">
            <summary>
            Specifies a conversion from the YCrCb color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2Hsv">
            <summary>
            Specifies a conversion from the BGR color space to HSV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2Hsv">
            <summary>
            Specifies a conversion from the RGB color space to HSV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2Lab">
            <summary>
            Specifies a conversion from the BGR color space to CIE L*a*b*.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2Lab">
            <summary>
            Specifies a conversion from the RGB color space to CIE L*a*b*.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerBG2Bgr">
            <summary>
            Specifies a conversion from the Bayer "BG" color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerGB2Bgr">
            <summary>
            Specifies a conversion from the Bayer "GB" color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerRG2Bgr">
            <summary>
            Specifies a conversion from the Bayer "RG" color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerGR2Bgr">
            <summary>
            Specifies a conversion from the Bayer "GR" color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerBG2Rgb">
            <summary>
            Specifies a conversion from the Bayer "BG" color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerGB2Rgb">
            <summary>
            Specifies a conversion from the Bayer "GB" color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerRG2Rgb">
            <summary>
            Specifies a conversion from the Bayer "RG" color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerGR2Rgb">
            <summary>
            Specifies a conversion from the Bayer "GR" color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2Luv">
            <summary>
            Specifies a conversion from the BGR color space to CIE L*u*v*.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2Luv">
            <summary>
            Specifies a conversion from the RGB color space to CIE L*u*v*.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2Hls">
            <summary>
            Specifies a conversion from the BGR color space to HLS.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2Hls">
            <summary>
            Specifies a conversion from the RGB color space to HLS.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Hsv2Bgr">
            <summary>
            Specifies a conversion from the HSV color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Hsv2Rgb">
            <summary>
            Specifies a conversion from the HSV color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Lab2Bgr">
            <summary>
            Specifies a conversion from the CIE L*a*b* color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Lab2Rgb">
            <summary>
            Specifies a conversion from the CIE L*a*b* color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Luv2Bgr">
            <summary>
            Specifies a conversion from the CIE L*u*v* color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Luv2Rgb">
            <summary>
            Specifies a conversion from the CIE L*u*v* color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Hls2Bgr">
            <summary>
            Specifies a conversion from the HLS color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Hls2Rgb">
            <summary>
            Specifies a conversion from the HLS color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerBG2BgrVng">
            <summary>
            Specifies a conversion from the Bayer "BG" color space to BGR using the VNG demosaicing algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerGB2BgrVng">
            <summary>
            Specifies a conversion from the Bayer "GB" color space to BGR using the VNG demosaicing algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerRG2BgrVng">
            <summary>
            Specifies a conversion from the Bayer "RG" color space to BGR using the VNG demosaicing algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerGR2BgrVng">
            <summary>
            Specifies a conversion from the Bayer "GR" color space to BGR using the VNG demosaicing algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerBG2RgbVng">
            <summary>
            Specifies a conversion from the Bayer "BG" color space to RGB using the VNG demosaicing algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerGB2RgbVng">
            <summary>
            Specifies a conversion from the Bayer "GB" color space to RGB using the VNG demosaicing algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerRG2RgbVng">
            <summary>
            Specifies a conversion from the Bayer "RG" color space to RGB using the VNG demosaicing algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerGR2RgbVng">
            <summary>
            Specifies a conversion from the Bayer "GR" color space to RGB using the VNG demosaicing algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2HsvFull">
            <summary>
            Specifies a conversion from the BGR color space to HSV using the full 8-bit range for H ([0,255]).
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2HsvFull">
            <summary>
            Specifies a conversion from the RGB color space to HSV using the full 8-bit range for H ([0,255]).
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2HlsFull">
            <summary>
            Specifies a conversion from the BGR color space to HLS using the full 8-bit range for H ([0,255]).
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2HlsFull">
            <summary>
            Specifies a conversion from the RGB color space to HLS using the full 8-bit range for H ([0,255]).
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Hsv2BgrFull">
            <summary>
            Specifies a conversion from the HSV color space to BGR using the full 8-bit range for H ([0,255]).
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Hsv2RgbFull">
            <summary>
            Specifies a conversion from the HSV color space to RGB using the full 8-bit range for H ([0,255]).
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Hls2BgrFull">
            <summary>
            Specifies a conversion from the HLS color space to BGR using the full 8-bit range for H ([0,255]).
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Hls2RgbFull">
            <summary>
            Specifies a conversion from the HLS color space to RGB using the full 8-bit range for H ([0,255]).
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.LBgr2Lab">
            <summary>
            Specifies a conversion from the Luminance BGR color space to CIE L*a*b*.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.LRgb2Lab">
            <summary>
            Specifies a conversion from the Luminance RGB color space to CIE L*a*b*.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.LBgr2Luv">
            <summary>
            Specifies a conversion from the Luminance BGR color space to CIE L*u*v*.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.LRgb2Luv">
            <summary>
            Specifies a conversion from the Luminance RGB color space to CIE L*u*v*.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Lab2LBgr">
            <summary>
            Specifies a conversion from the CIE L*a*b* color space to Luminance BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Lab2LRgb">
            <summary>
            Specifies a conversion from the CIE L*a*b* color space to Luminance RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Luv2LBgr">
            <summary>
            Specifies a conversion from the CIE L*u*v* color space to Luminance BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Luv2LRgb">
            <summary>
            Specifies a conversion from the CIE L*u*v* color space to Luminance RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Bgr2Yuv">
            <summary>
            Specifies a conversion from the BGR color space to YUV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgb2Yuv">
            <summary>
            Specifies a conversion from the RGB color space to YUV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2Bgr">
            <summary>
            Specifies a conversion from the YUV color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2Rgb">
            <summary>
            Specifies a conversion from the YUV color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerBG2Gray">
            <summary>
            Specifies a conversion from the Bayer "BG" color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerGB2Gray">
            <summary>
            Specifies a conversion from the Bayer "GB" color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerRG2Gray">
            <summary>
            Specifies a conversion from the Bayer "RG" color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.BayerGR2Gray">
            <summary>
            Specifies a conversion from the Bayer "GR" color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbNV12">
            <summary>
            Specifies a conversion from the YUV color space to RGB with interleaved U/V plane with 2x2 subsampling.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgrNV12">
            <summary>
            Specifies a conversion from the YUV color space to BGR with interleaved U/V plane with 2x2 subsampling.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbNV21">
            <summary>
            Specifies a conversion from the YUV color space to RGB with U/V reversed in the interleaved plane with 2x2 subsampling.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgrNV21">
            <summary>
            Specifies a conversion from the YUV color space to BGR with U/V reversed in the interleaved plane with 2x2 subsampling.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv420sp2Rgb">
            <summary>
            Specifies a conversion from the YUV 420 semi-planar color space to RGB. Same as <see cref="F:OpenCV.Net.ColorConversion.Yuv2RgbNV21"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv420sp2Bgr">
            <summary>
            Specifies a conversion from the YUV 420 semi-planar color space to BGR. Same as <see cref="F:OpenCV.Net.ColorConversion.Yuv2BgrNV21"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbaNV12">
            <summary>
            Specifies a conversion from the YUV color space to RGBA with interleaved U/V plane with 2x2 subsampling.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgraNV12">
            <summary>
            Specifies a conversion from the YUV color space to BGRA with interleaved U/V plane with 2x2 subsampling.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbaNV21">
            <summary>
            Specifies a conversion from the YUV color space to RGBA with U/V reversed in the interleaved plane with 2x2 subsampling.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgraNV21">
            <summary>
            Specifies a conversion from the YUV color space to BGRA with U/V reversed in the interleaved plane with 2x2 subsampling.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv420sp2Rgba">
            <summary>
            Specifies a conversion from the YUV 420 semi-planar color space to RGBA. Same as <see cref="F:OpenCV.Net.ColorConversion.Yuv2RgbaNV21"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv420sp2Bgra">
            <summary>
            Specifies a conversion from the YUV 420 semi-planar color space to BGRA. Same as <see cref="F:OpenCV.Net.ColorConversion.Yuv2BgraNV21"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbYV12">
            <summary>
            Specifies a conversion from the YUV color space to RGB where the 8-bit Y plane is followed
            by two 8-bit 2x2 subsampled V and U planes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgrYV12">
            <summary>
            Specifies a conversion from the YUV color space to BGR where the 8-bit Y plane is followed
            by two 8-bit 2x2 subsampled V and U planes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbIYuv">
            <summary>
            Specifies a conversion from the YUV color space to RGB where the 8-bit Y plane is followed
            by two 8-bit 2x2 subsampled U and V planes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgrIYuv">
            <summary>
            Specifies a conversion from the YUV color space to BGR where the 8-bit Y plane is followed
            by two 8-bit 2x2 subsampled U and V planes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbI420">
            <summary>
            Specifies a conversion from the YUV color space to RGB where the 8-bit Y plane is followed
            by two 8-bit 2x2 subsampled U and V planes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgrI420">
            <summary>
            Specifies a conversion from the YUV color space to BGR where the 8-bit Y plane is followed
            by two 8-bit 2x2 subsampled U and V planes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv420p2Rgb">
            <summary>
            Specifies a conversion from the YUV 420 planar color space to RGB. Same as <see cref="F:OpenCV.Net.ColorConversion.Yuv2RgbYV12"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv420p2Bgr">
            <summary>
            Specifies a conversion from the YUV 420 planar color space to BGR. Same as <see cref="F:OpenCV.Net.ColorConversion.Yuv2BgrYV12"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbaYV12">
            <summary>
            Specifies a conversion from the YUV color space to RGBA where the 8-bit Y plane is followed
            by two 8-bit 2x2 subsampled V and U planes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgraYV12">
            <summary>
            Specifies a conversion from the YUV color space to BGRA where the 8-bit Y plane is followed
            by two 8-bit 2x2 subsampled V and U planes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbaIYuv">
            <summary>
            Specifies a conversion from the YUV color space to RGBA where the 8-bit Y plane is followed
            by two 8-bit 2x2 subsampled U and V planes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgraIYuv">
            <summary>
            Specifies a conversion from the YUV color space to BGRA where the 8-bit Y plane is followed
            by two 8-bit 2x2 subsampled U and V planes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbaI420">
            <summary>
            Specifies a conversion from the YUV color space to RGBA where the 8-bit Y plane is followed
            by two 8-bit 2x2 subsampled U and V planes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgraI420">
            <summary>
            Specifies a conversion from the YUV color space to BGRA where the 8-bit Y plane is followed
            by two 8-bit 2x2 subsampled U and V planes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv420p2Rgba">
            <summary>
            Specifies a conversion from the YUV 420 planar color space to RGBA. Same as <see cref="F:OpenCV.Net.ColorConversion.Yuv2RgbaYV12"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv420p2Bgra">
            <summary>
            Specifies a conversion from the YUV 420 planar color space to BGRA. Same as <see cref="F:OpenCV.Net.ColorConversion.Yuv2BgraYV12"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2Gray420">
            <summary>
            Specifies a conversion from the YUV 420 color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2GrayNV21">
            <summary>
            Specifies a conversion from the YUV 420 color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2GrayNV12">
            <summary>
            Specifies a conversion from the YUV 420 color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2GrayYV12">
            <summary>
            Specifies a conversion from the YUV 420 color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2GrayIYuv">
            <summary>
            Specifies a conversion from the YUV 420 color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2GrayI420">
            <summary>
            Specifies a conversion from the YUV 420 color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv420sp2Gray">
            <summary>
            Specifies a conversion from the YUV 420 color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv420p2Gray">
            <summary>
            Specifies a conversion from the YUV 420 color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbUyvy">
            <summary>
            Specifies a conversion from the YUV color space to RGB with two luminance samples for each chroma period
            in the pattern UYVY.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgrUyvy">
            <summary>
            Specifies a conversion from the YUV color space to BGR with two luminance samples for each chroma period
            in the pattern UYVY.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbY422">
            <summary>
            Specifies a conversion from the YUV 422 color space to RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgrY422">
            <summary>
            Specifies a conversion from the YUV 422 color space to BGR.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbUynv">
            <summary>
            Specifies a conversion from the YUV color space to RGB with two luminance samples for each chroma period
            in the pattern UYVY.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgrUynv">
            <summary>
            Specifies a conversion from the YUV color space to BGR with two luminance samples for each chroma period
            in the pattern UYVY.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbaUyvy">
            <summary>
            Specifies a conversion from the YUV color space to RGBA with two luminance samples for each chroma period
            in the pattern UYVY.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgraUyvy">
            <summary>
            Specifies a conversion from the YUV color space to BGRA with two luminance samples for each chroma period
            in the pattern UYVY.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbaY422">
            <summary>
            Specifies a conversion from the YUV 422 color space to RGBA.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgraY422">
            <summary>
            Specifies a conversion from the YUV 422 color space to BGRA.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbaUynv">
            <summary>
            Specifies a conversion from the YUV color space to RGBA with two luminance samples for each chroma period
            in the pattern UYVY.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgraUynv">
            <summary>
            Specifies a conversion from the YUV color space to BGRA with two luminance samples for each chroma period
            in the pattern UYVY.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbYuy2">
            <summary>
            Specifies a conversion from the YUV color space to RGB with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgrYuy2">
            <summary>
            Specifies a conversion from the YUV color space to BGR with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbYvyu">
            <summary>
            Specifies a conversion from the YUV color space to RGB with two luminance samples for each chroma period
            in the pattern YVYU.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgrYvyu">
            <summary>
            Specifies a conversion from the YUV color space to BGR with two luminance samples for each chroma period
            in the pattern YVYU.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbYuyv">
            <summary>
            Specifies a conversion from the YUV color space to RGB with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgrYuyv">
            <summary>
            Specifies a conversion from the YUV color space to BGR with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbYunv">
            <summary>
            Specifies a conversion from the YUV color space to RGB with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgrYunv">
            <summary>
            Specifies a conversion from the YUV color space to BGR with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbaYuy2">
            <summary>
            Specifies a conversion from the YUV color space to RGBA with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgraYuy2">
            <summary>
            Specifies a conversion from the YUV color space to BGRA with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbaYvyu">
            <summary>
            Specifies a conversion from the YUV color space to RGBA with two luminance samples for each chroma period
            in the pattern YVYU.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgraYvyu">
            <summary>
            Specifies a conversion from the YUV color space to BGRA with two luminance samples for each chroma period
            in the pattern YVYU.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbaYuyv">
            <summary>
            Specifies a conversion from the YUV color space to RGBA with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgraYuyv">
            <summary>
            Specifies a conversion from the YUV color space to BGRA with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2RgbaYunv">
            <summary>
            Specifies a conversion from the YUV color space to RGBA with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2BgraYunv">
            <summary>
            Specifies a conversion from the YUV color space to BGRA with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2GrayUyvy">
            <summary>
            Specifies a conversion from the YUV color space to grayscale with two luminance samples for each chroma period
            in the pattern UYVY.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2GrayYuy2">
            <summary>
            Specifies a conversion from the YUV color space to grayscale with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2GrayY422">
            <summary>
            Specifies a conversion from the YUV 422 color space to grayscale.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2GrayUynv">
            <summary>
            Specifies a conversion from the YUV color space to grayscale with two luminance samples for each chroma period
            in the pattern UYVY.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2GrayYvyu">
            <summary>
            Specifies a conversion from the YUV color space to grayscale with two luminance samples for each chroma period
            in the pattern YVYU.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2GrayYuyv">
            <summary>
            Specifies a conversion from the YUV color space to grayscale with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Yuv2GrayYunv">
            <summary>
            Specifies a conversion from the YUV color space to grayscale with two luminance samples for each chroma period
            in the pattern YUYV.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.Rgba2mRgba">
            <summary>
            Specifies a conversion from non-premultiplied RGBA color space to premultiplied alpha RGB.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ColorConversion.mRgba2Rgba">
            <summary>
            Specifies a conversion from premultiplied alpha RGB color space to non-premultiplied RGBA.
            </summary>
        </member>
        <member name="T:OpenCV.Net.SubPixelInterpolation">
            <summary>
            Specifies the interpolation method used by <see cref="M:OpenCV.Net.CV.Resize(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.SubPixelInterpolation)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SubPixelInterpolation.NearestNeighbor">
            <summary>
            Specifies a nearest-neighbor interpolation.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SubPixelInterpolation.Linear">
            <summary>
            Specifies a bilinear interpolation.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SubPixelInterpolation.Cubic">
            <summary>
            Specifies a bicubic interpolation over a 4x4 pixel neighborhood.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SubPixelInterpolation.Area">
            <summary>
            Specifies resampling using pixel area relation. It may be a preferred method for image decimation,
            as it gives moire’-free results. Similar to <see cref="F:OpenCV.Net.SubPixelInterpolation.NearestNeighbor"/> when image is zoomed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.SubPixelInterpolation.Lanczos4">
            <summary>
            Specifies a Lanczos interpolation over an 8x8 pixel neighborhood.
            </summary>
        </member>
        <member name="T:OpenCV.Net.WarpFlags">
            <summary>
            Specifies interpolation and operational flags for image warp methods.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WarpFlags.NearestNeighbor">
            <summary>
            Specifies a nearest-neighbor interpolation.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WarpFlags.Linear">
            <summary>
            Specifies a bilinear interpolation.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WarpFlags.Cubic">
            <summary>
            Specifies a bicubic interpolation over a 4x4 pixel neighborhood.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WarpFlags.Area">
            <summary>
            Specifies resampling using pixel area relation. It may be a preferred method for image decimation,
            as it gives moire’-free results. Similar to <see cref="F:OpenCV.Net.WarpFlags.NearestNeighbor"/> when image is zoomed.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WarpFlags.Lanczos4">
            <summary>
            Specifies a Lanczos interpolation over an 8x8 pixel neighborhood.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WarpFlags.FillOutliers">
            <summary>
            Specifies that all destination pixels should be filled. If some correspond to outliers in the
            source image, they are set to a constant value.
            </summary>
        </member>
        <member name="F:OpenCV.Net.WarpFlags.InverseMap">
            <summary>
            Specifies that the map matrix is inversely transformed from the destination image to the source
            and can thus be used directly for pixel interpolation.
            </summary>
        </member>
        <member name="T:OpenCV.Net.MorphologicalOperation">
            <summary>
            Specifies the type of morphological operation used by <see cref="M:OpenCV.Net.CV.MorphologyEx(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.IplConvKernel,OpenCV.Net.MorphologicalOperation,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MorphologicalOperation.Erode">
            <summary>
            Specifies the primitive erosion morphological operation.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MorphologicalOperation.Dilate">
            <summary>
            Specifies the primitive dilation morphological operation.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MorphologicalOperation.Open">
            <summary>
            Specifies a morphological operation performed by first eroding and then dilating the image.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MorphologicalOperation.Close">
            <summary>
            Specifies a morphological operation performed by first dilating and then eroding the image.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MorphologicalOperation.Gradient">
            <summary>
            Specifies a morphological operation obtained by subtracting the result of the <see cref="F:OpenCV.Net.MorphologicalOperation.Erode"/> operator
            from the result of the <see cref="F:OpenCV.Net.MorphologicalOperation.Dilate"/> operator.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MorphologicalOperation.TopHat">
            <summary>
            Specifies a morphological operation obtained by subtracting the result of the <see cref="F:OpenCV.Net.MorphologicalOperation.Open"/> operator
            from the input image.
            </summary>
        </member>
        <member name="F:OpenCV.Net.MorphologicalOperation.BlackHat">
            <summary>
            Specifies a morphological operation obtained by subtracting the input image
            from the result of the <see cref="F:OpenCV.Net.MorphologicalOperation.Close"/> operator.
            </summary>
        </member>
        <member name="T:OpenCV.Net.StructuringElementShape">
            <summary>
            Specifies the shape of the structuring element kernel.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StructuringElementShape.Rectangle">
            <summary>
            Specifies a rectangular structuring element.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StructuringElementShape.Cross">
            <summary>
            Specifies a cross-shaped structuring element.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StructuringElementShape.Ellipse">
            <summary>
            Specifies an elliptical structuring element.
            </summary>
        </member>
        <member name="F:OpenCV.Net.StructuringElementShape.Custom">
            <summary>
            Specifies a user-defined structuring element. In this case the kernel values are passed
            explicitly to the constructor method.
            </summary>
        </member>
        <member name="T:OpenCV.Net.TemplateMatchingMethod">
            <summary>
            Specifies the way the template is compared with image regions in <see cref="M:OpenCV.Net.CV.MatchTemplate(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.TemplateMatchingMethod)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.TemplateMatchingMethod.SquareDifference">
            <summary>
            Specifies that the sum of squared differences between region and template will be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.TemplateMatchingMethod.SquareDifferenceNormed">
            <summary>
            Specifies that the normed sum of squared differences between region and template will be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.TemplateMatchingMethod.CrossCorrelation">
            <summary>
            Specifies that the cross correlation between region and template will be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.TemplateMatchingMethod.CrossCorrelationNormed">
            <summary>
            Specifies that the normed cross correlation between region and template will be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.TemplateMatchingMethod.CorrelationCoefficient">
            <summary>
            Specifies that the correlaton coefficient between region and template will be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.TemplateMatchingMethod.CorrelationCoefficientNormed">
            <summary>
            Specifies that the normed correlaton coefficient between region and template will be used.
            </summary>
        </member>
        <member name="T:OpenCV.Net.DistanceType">
            <summary>
            Specifies the available types of distance functions.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DistanceType.User">
            <summary>
            Specifies that a user defined distance should be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DistanceType.L1">
            <summary>
            Specifies the L1 or Manhattan distance.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DistanceType.L2">
            <summary>
            Specifies the L2 or Euclidean distance.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DistanceType.C">
            <summary>
            Specifies the elementwise max distance.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DistanceType.L12">
            <summary>
            Specifies the L1-L2 metric.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DistanceType.Fair">
            <summary>
            Specifies the Fair metric given by c^2(|x|/c-log(1+|x|/c)), c = 1.3998.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DistanceType.Welsch">
            <summary>
            Specifies the Welsch metric given by distance = c^2/2(1-exp(-(x/c)^2)), c = 2.9846.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DistanceType.Huber">
            <summary>
            Specifies the Huber metric given by distance = x^2/2 if |x| is less than c, else c(|x|-c/2), c=1.345.
            </summary>
        </member>
        <member name="T:OpenCV.Net.ContourRetrieval">
            <summary>
            Specifies the available contour retrieval modes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ContourRetrieval.External">
            <summary>
            Specifies that only the extreme outer contours should be retrieved.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ContourRetrieval.List">
            <summary>
            Specifies that all the contours should be retrieved and stored in a list.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ContourRetrieval.ConnectedComponent">
            <summary>
            Specifies that all the contours should be retrieved and organized into a two-level
            hierarchy: on the top level are the external boundaries of the components, on the
            second level are the boundaries of the holes.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ContourRetrieval.Tree">
            <summary>
            Specifies that all the contours should be retrieved with the full hierarchy of nested contours.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ContourRetrieval.FloodFill">
            <summary>
            Specifies that all the contours should be retrieved using the flood fill algorithm.
            </summary>
        </member>
        <member name="T:OpenCV.Net.ContourApproximation">
            <summary>
            Specifies the available contour approximation methods.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ContourApproximation.ChainCode">
            <summary>
            Specifies that contours should be output in the Freeman chain code.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ContourApproximation.ChainApproxNone">
            <summary>
            Specifies that all the elements of the chain code should be translated into points.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ContourApproximation.ChainApproxSimple">
            <summary>
            Specifies that all horizontal, vertical, and diagonal segments should be compressed,
            leaving only their end points.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ContourApproximation.ChainApproxTC89L1">
            <summary>
            Specifies that Teh-Chin's L1 chain approximation algorithm should be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ContourApproximation.ChainApproxTC89KCos">
            <summary>
            Specifies that Teh-Chin's K cosines chain approximation algorithm should be used.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ContourApproximation.LinkRuns">
            <summary>
            Specifies a completely different contour retrieval algorithm by linking horizontal segments of ones.
            Only the <see cref="F:OpenCV.Net.ContourRetrieval.List"/> retrieval mode can be used with this method.
            </summary>
        </member>
        <member name="T:OpenCV.Net.PolygonApproximation">
            <summary>
            Specifies the available polygon approximation algorithms.
            </summary>
        </member>
        <member name="F:OpenCV.Net.PolygonApproximation.DouglasPeucker">
            <summary>
            Specifies that the Douglas-Peucker polygon approximation algorithm should be used.
            </summary>
        </member>
        <member name="T:OpenCV.Net.ShapeMatchingMethod">
            <summary>
            Specifies the available shape comparison methods.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ShapeMatchingMethod.MatchI1">
            <summary>
            Specifies that the match should be computed as I2(A,B) = sum{i}(|1/miA - 1/miB|).
            mi = sign(hi).log(hi) where hi is the ith Hu moment.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ShapeMatchingMethod.MatchI2">
            <summary>
            Specifies that the match should be computed as I2(A,B) = sum{i}(|miA - miB|).
            mi = sign(hi).log(hi) where hi is the ith Hu moment.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ShapeMatchingMethod.MatchI3">
            <summary>
            Specifies that the match should be computed as I2(A,B) = sum{i}(|miA - miB| / |miA|).
            mi = sign(hi).log(hi) where hi is the ith Hu moment.
            </summary>
        </member>
        <member name="T:OpenCV.Net.ShapeOrientation">
            <summary>
            Specifies the desired orientation of the convex hull.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ShapeOrientation.Clockwise">
            <summary>
            Specifies that the convex hull should be oriented clockwise.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ShapeOrientation.CounterClockwise">
            <summary>
            Specifies that the convex hull should be oriented counterclockwise.
            </summary>
        </member>
        <member name="T:OpenCV.Net.HistogramType">
            <summary>
            Specifies the available histogram types.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HistogramType.Array">
            <summary>
            Specifies that histogram data is represented as a multi-dimensional dense array <see cref="T:OpenCV.Net.MatND"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HistogramType.Sparse">
            <summary>
            Specifies that histogram data is represented as a multi-dimensional sparse array <see cref="T:OpenCV.Net.SparseMat"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HistogramType.Tree">
            <summary>
            Specifies that histogram data is represented as a multi-dimensional sparse array <see cref="T:OpenCV.Net.SparseMat"/>.
            </summary>
        </member>
        <member name="T:OpenCV.Net.HistogramComparison">
            <summary>
            Specifies the available histogram comparison methods.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HistogramComparison.Correlation">
            <summary>
            Specifies that the histograms should be compared using a correlation measure.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HistogramComparison.ChiSquare">
            <summary>
            Specifies that the histograms should be compared using a chi-squared statistic.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HistogramComparison.Intersection">
            <summary>
            Specifies that the histograms should be compared using bin intersection.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HistogramComparison.Bhattacharyya">
            <summary>
            Specifies that the histograms should be compared using the Bhattacharyya distance.
            This method only works on normalized histograms.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HistogramComparison.Hellinger">
            <summary>
            Specifies that the histograms should be compared using the Bhattacharyya distance.
            This method only works on normalized histograms.
            </summary>
        </member>
        <member name="T:OpenCV.Net.ThresholdTypes">
            <summary>
            Specifies the available threshold types.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ThresholdTypes.Binary">
            <summary>
            Specifies that all values above threshold should be set to a fixed max value
            while all other values should be set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ThresholdTypes.BinaryInv">
            <summary>
            Specifies that all values above threshold should be set to 0 while all other
            values should be set to a fixed max value.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ThresholdTypes.Truncate">
            <summary>
            Specifies that all values above threshold should be set to the threshold value
            while all other values should be left as they are.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ThresholdTypes.ToZero">
            <summary>
            Specifies that all values above threshold should be left as they are while all
            other values should be set to 0.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ThresholdTypes.ToZeroInv">
            <summary>
            Specifies that all values above threshold should be set to 0 while all other
            values should be left as they are.
            </summary>
        </member>
        <member name="F:OpenCV.Net.ThresholdTypes.Otsu">
            <summary>
            Specifies that the Otsu algorithm should be used to choose the optimal
            threshold value. Combine the flag with one of the other values.
            </summary>
        </member>
        <member name="T:OpenCV.Net.DistanceLabel">
            <summary>
            Specifies the content of the output label array in <see cref="M:OpenCV.Net.CV.DistTransform(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.DistanceType,System.Int32,System.Single[],OpenCV.Net.Arr,OpenCV.Net.DistanceLabel)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DistanceLabel.ConnectedComponent">
            <summary>
            Specifies that the content of the output label array are connected components.
            </summary>
        </member>
        <member name="F:OpenCV.Net.DistanceLabel.Pixel">
            <summary>
            Specifies that the content of the output label array are pixel values.
            </summary>
        </member>
        <member name="T:OpenCV.Net.AdaptiveThresholdMethod">
            <summary>
            Specifies the available adaptive threshold methods.
            </summary>
        </member>
        <member name="F:OpenCV.Net.AdaptiveThresholdMethod.MeanC">
            <summary>
            Specifies that the threshold value is the mean of the pixel neighborhood
            minus a constant.
            </summary>
        </member>
        <member name="F:OpenCV.Net.AdaptiveThresholdMethod.GaussianC">
            <summary>
            Specifies that the threshold value is the weighted sum (i.e. cross-correlation
            with a Gaussian window) of the pixel neighborhood minus a constant.
            </summary>
        </member>
        <member name="T:OpenCV.Net.FloodFillFlags">
            <summary>
            Specifies flags for the flood fill algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FloodFillFlags.Connected8">
            <summary>
            Specifies the 8-connected flood fill algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FloodFillFlags.Connected4">
            <summary>
            Specifies the 4-connected flood fill algorithm.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FloodFillFlags.FixedRange">
            <summary>
            Specifies that the difference between the current pixel and seed pixel is
            considered for flooding. Otherwise, the difference between neighbor pixels
            is considered (i.e. the range is floating).
            </summary>
        </member>
        <member name="F:OpenCV.Net.FloodFillFlags.MaskOnly">
            <summary>
            Specifies that the method does not change the image but fills the mask.
            </summary>
        </member>
        <member name="T:OpenCV.Net.HoughLinesMethod">
            <summary>
            Specifies available Hough transform variants for line detection.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HoughLinesMethod.Standard">
            <summary>
            Classical or standard Hough transform. Every line is represented by two
            floating-point numbers rho and theta, where rho is a distance between (0,0)
            point and the line, and theta is the angle between x-axis and the normal to
            the line.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HoughLinesMethod.Probabilistic">
            <summary>
            Probabilistic Hough transform (more efficient in case the picture contains
            a few long linear segments). It returns line segments rather than the whole
            line. Each segment is represented by starting and ending points.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HoughLinesMethod.MultiScale">
            <summary>
            Multi-scale variant of the classical Hough transform. The lines are encoded
            the same way as <see cref="F:OpenCV.Net.HoughLinesMethod.Standard"/>.
            </summary>
        </member>
        <member name="T:OpenCV.Net.HoughCirclesMethod">
            <summary>
            Specifies available Hough transform variants for circle detection.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HoughCirclesMethod.Gradient">
            <summary>
            Implements the 2-1 Hough Transform for circle detection.
            </summary>
        </member>
        <member name="T:OpenCV.Net.IplConvKernel">
            <summary>
            Represents a rectangular convolution kernel used for morphological operations.
            </summary>
        </member>
        <member name="M:OpenCV.Net.IplConvKernel.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,OpenCV.Net.StructuringElementShape)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.IplConvKernel"/> class with the specified
            size, anchor and shape for the structuring element.
            </summary>
            <param name="cols">The width of the structuring element.</param>
            <param name="rows">The height of the structuring element.</param>
            <param name="anchorX">The x-coordinate of the anchor.</param>
            <param name="anchorY">The y-coordinate of the anchor.</param>
            <param name="shape">The shape of the structuring element.</param>
        </member>
        <member name="M:OpenCV.Net.IplConvKernel.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,OpenCV.Net.StructuringElementShape,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.IplConvKernel"/> class with the specified
            size, anchor, shape and optionally custom kernel values for the structuring element.
            </summary>
            <param name="cols">The width of the structuring element.</param>
            <param name="rows">The height of the structuring element.</param>
            <param name="anchorX">The x-coordinate of the anchor.</param>
            <param name="anchorY">The y-coordinate of the anchor.</param>
            <param name="shape">The shape of the structuring element.</param>
            <param name="values">
            The kernel values that specify the custom shape of the structuring element, when
            <paramref name="shape"/> is equal to <see cref="F:OpenCV.Net.StructuringElementShape.Custom"/>.
            </param>
        </member>
        <member name="M:OpenCV.Net.IplConvKernel.ReleaseHandle">
            <summary>
            Executes the code required to free the native <see cref="T:OpenCV.Net.IplConvKernel"/> handle.
            </summary>
            <returns>
            <b>true</b> if the handle is released successfully; otherwise, in the event of a
            catastrophic failure, <b>false</b>.
            </returns>
        </member>
        <member name="P:OpenCV.Net.IplConvKernel.Size">
            <summary>
            Gets the size of the convolution kernel.
            </summary>
        </member>
        <member name="P:OpenCV.Net.IplConvKernel.Anchor">
            <summary>
            Gets the anchor position within the element. The default value (-1, -1) means that
            the anchor is at the center. Note that only the shape of a cross-shaped element depends
            on the anchor position. In other cases the anchor just regulates how much the result
            of the morphological operation is shifted.
            </summary>
        </member>
        <member name="T:OpenCV.Net.NamedWindow">
            <summary>
            Represents a window which can be used as placeholder for images and trackbars.
            </summary>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.NamedWindow"/> class from the
            specified native window handle.
            </summary>
            <param name="handle">
            The platform specific native window handle used to retrieve the window name.
            </param>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.#ctor(System.String,OpenCV.Net.WindowFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenCV.Net.NamedWindow"/> class with the
            specified name.
            </summary>
            <param name="name">The name of the window in the window caption.</param>
            <param name="flags">The flags of the window.</param>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.DisplayOverlay(System.String,System.Int32)">
            <summary>
            Displays text on the window’s image as an overlay for <paramref name="delayMs"/> milliseconds.
            This is not editing the image’s data. The text is displayed on the top of the image.
            </summary>
            <param name="text">Overlay text to write on the window’s image.</param>
            <param name="delayMs">
            Delay to display the overlay text. If this method is called before the previous overlay text
            times out, the timer is restarted and the text updated. If this value is zero, the text never
            disappears.
            </param>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.DisplayStatusBar(System.String,System.Int32)">
            <summary>
            Displays text on the window’s status bar for <paramref name="delayMs"/> milliseconds.
            </summary>
            <param name="text">Text to write on the window’s status bar.</param>
            <param name="delayMs">
            Delay to display the text. If this method is called before the previous text times out, the
            timer is restarted and the text updated. If this value is zero, the text never disappears.
            </param>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.SaveWindowParameters">
            <summary>
            Saves parameters of the window such as size, location, flags, etc.
            </summary>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.LoadWindowParameters">
            <summary>
            Loads parameters of the window such as size, location, flags, etc.
            </summary>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.SetProperty(OpenCV.Net.WindowProperty,OpenCV.Net.WindowFlags)">
            <summary>
            Change the parameters of the window dynamically.
            </summary>
            <param name="propId">The identifier of the property to edit.</param>
            <param name="propValue">The new value of the window property.</param>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.GetProperty(OpenCV.Net.WindowProperty)">
            <summary>
            Gets the parameters of the window.
            </summary>
            <param name="propId">The identifier of the property to retrieve.</param>
            <returns>The value of the window property.</returns>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.ShowImage(OpenCV.Net.Arr)">
            <summary>
            Displays the image in the specified window.
            </summary>
            <param name="image">The image to be shown.</param>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.Resize(System.Int32,System.Int32)">
            <summary>
            Sets the window size.
            </summary>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.Move(System.Int32,System.Int32)">
            <summary>
            Sets the position of the window.
            </summary>
            <param name="x">The new x-coordinate of the top-left corner.</param>
            <param name="y">The new y-coordinate of the top-left corner.</param>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.DestroyAllWindows">
            <summary>
            Destroys all of the HighGUI windows.
            </summary>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.CreateTrackbar(System.String,System.Int32@,System.Int32,OpenCV.Net.TrackbarCallback)">
            <summary>
            Creates a trackbar and attaches it to the window.
            </summary>
            <param name="trackbarName">Name of the created trackbar.</param>
            <param name="value">A reference to an integer value that specifies the position of the slider.</param>
            <param name="count">Maximal position of the slider. Minimal position is always 0.</param>
            <param name="onChanged">
            The callback method that will be called every time the slider changes position.
            </param>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.GetTrackbarPos(System.String)">
            <summary>
            Returns the trackbar position.
            </summary>
            <param name="trackbarName">The name of the trackbar.</param>
            <returns>The current position of the specified trackbar.</returns>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.SetTrackbarPos(System.String,System.Int32)">
            <summary>
            Sets the trackbar position.
            </summary>
            <param name="trackbarName">The name of the trackbar.</param>
            <param name="pos">The new trackbar position.</param>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.SetMouseCallback(OpenCV.Net.MouseCallback)">
            <summary>
            Assigns a callback for mouse events.
            </summary>
            <param name="onMouse">
            The callback method that will handle mouse events of this named window.
            </param>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.SetOpenGLDrawCallback(OpenCV.Net.OpenGLDrawCallback)">
            <summary>
            Assigns a callback to draw OpenGL on top of the image display.
            Used only for windows with OpenGL support.
            </summary>
            <param name="callback">
            The callback method that will be called every frame.
            </param>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.SetOpenGLContext">
            <summary>
            Makes the GL context current. Used only for windows with OpenGL support.
            </summary>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.Update">
            <summary>
            Updates the window. Used only for windows with OpenGL support.
            </summary>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.Finalize">
            <summary>
            Allows an object to try to free resources and perform other cleanup operations
            before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:OpenCV.Net.NamedWindow.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:OpenCV.Net.NamedWindow"/>.
            </summary>
        </member>
        <member name="P:OpenCV.Net.NamedWindow.Name">
            <summary>
            Gets the name of the window.
            </summary>
        </member>
        <member name="P:OpenCV.Net.NamedWindow.Handle">
            <summary>
            Gets the platform specific native window handle.
            </summary>
        </member>
        <member name="T:OpenCV.Net.HaarDetectObjectFlags">
            <summary>
            Specifies available operation flags for <see cref="M:OpenCV.Net.HaarClassifierCascade.DetectObjects(OpenCV.Net.Arr,OpenCV.Net.MemStorage,System.Double,System.Int32,OpenCV.Net.HaarDetectObjectFlags,OpenCV.Net.Size,OpenCV.Net.Size)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HaarDetectObjectFlags.None">
            <summary>
            Specifies that no operation flags are active.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HaarDetectObjectFlags.DoCannyPruning">
            <summary>
            Specifies that flat regions of the image (with no lines) should be skipped by the classifier.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HaarDetectObjectFlags.ScaleImage">
            <summary>
            Specifies that the image should be scaled rather than the detector.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HaarDetectObjectFlags.FindBiggestObject">
            <summary>
            Specifies that only the largest object found should be returned.
            </summary>
        </member>
        <member name="F:OpenCV.Net.HaarDetectObjectFlags.DoRoughSearch">
            <summary>
            Specifies that the search should terminate at whatever scale the first candidate is found.
            Used only in combination with <see cref="F:OpenCV.Net.HaarDetectObjectFlags.FindBiggestObject"/>.
            </summary>
        </member>
        <member name="T:OpenCV.Net.InpaintMethod">
            <summary>
            Specifies available inpainting methods.
            </summary>
        </member>
        <member name="F:OpenCV.Net.InpaintMethod.NavierStokes">
            <summary>
            Specifies a Navier-Stokes based method.
            </summary>
        </member>
        <member name="F:OpenCV.Net.InpaintMethod.Telea">
            <summary>
            Specifies the method by Alexandru Telea.
            </summary>
        </member>
        <member name="T:OpenCV.Net.LKFlowFlags">
            <summary>
            Specifies available operation flags for <see cref="M:OpenCV.Net.CV.CalcOpticalFlowPyrLK(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Point2f[],OpenCV.Net.Point2f[],OpenCV.Net.Size,System.Int32,System.Byte[],System.Single[],OpenCV.Net.TermCriteria,OpenCV.Net.LKFlowFlags)"/> and
            <see cref="M:OpenCV.Net.CV.CalcAffineFlowPyrLK(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Point2f[],OpenCV.Net.Point2f[],System.Single[],OpenCV.Net.Size,System.Int32,System.Byte[],System.Single[],OpenCV.Net.TermCriteria,OpenCV.Net.LKFlowFlags)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LKFlowFlags.None">
            <summary>
            Specifies that no operation flags are active.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LKFlowFlags.PyrAReady">
            <summary>
            Specifies that the pyramid for the first frame was precalculated before the call.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LKFlowFlags.PyrBReady">
            <summary>
            Specifies that the pyramid for the second frame was precalculated before the call.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LKFlowFlags.InitialGuesses">
            <summary>
            Specifies that output array contains initial coordinate estimates of the features.
            </summary>
        </member>
        <member name="F:OpenCV.Net.LKFlowFlags.GetMinEigenVals">
            <summary>
            Specifies that output error array will contain the minimum eigenvalues of detected features.
            </summary>
        </member>
        <member name="T:OpenCV.Net.FarnebackFlowFlags">
            <summary>
            Specifies available operation flags for <see cref="M:OpenCV.Net.CV.CalcOpticalFlowFarneback(OpenCV.Net.Arr,OpenCV.Net.Arr,OpenCV.Net.Arr,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,OpenCV.Net.FarnebackFlowFlags)"/>.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FarnebackFlowFlags.None">
            <summary>
            Specifies that no operation flags are active.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FarnebackFlowFlags.InitialFlow">
            <summary>
            Specifies that output array contains the initial flow approximation.
            </summary>
        </member>
        <member name="F:OpenCV.Net.FarnebackFlowFlags.Gaussian">
            <summary>
            Specifies that a Gaussian filter should be used instead of a box filter for optical flow estimation.
            Usually, this option gives more accurate flow than a box filter, at the cost of lower speed.
            The size of the Gaussian window should be set to a larger value to achieve the same level of robustness.
            </summary>
        </member>
    </members>
</doc>
