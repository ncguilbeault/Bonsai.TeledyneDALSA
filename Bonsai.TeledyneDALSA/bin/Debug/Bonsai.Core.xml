<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bonsai.Core</name>
    </assembly>
    <members>
        <member name="T:Bonsai.BinaryCombinator">
            <summary>
            Represents a generic operation on two observable sequences where the elements of the first
            sequence are propagated based on notifications from the second sequence.
            </summary>
        </member>
        <member name="M:Bonsai.BinaryCombinator.Process``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Processes the <paramref name="source"/> sequence into a new sequence of the
            same element type based on notifications from the <paramref name="other"/> sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the first sequence.</typeparam>
            <typeparam name="TOther">The type of the elements in the other sequence.</typeparam>
            <param name="source">The source sequence to process.</param>
            <param name="other">
            Observable sequence which controls propagation of the <paramref name="source"/> sequence.
            </param>
            <returns>
            An observable sequence of the same data type as <paramref name="source"/>.
            </returns>
        </member>
        <member name="T:Bonsai.Combinator">
            <summary>
            Represents a generic operation on observable sequences that preserves
            the sequence element type.
            </summary>
        </member>
        <member name="M:Bonsai.Combinator.Process``1(System.IObservable{``0})">
            <summary>
            Processes the <paramref name="source"/> sequence into a new sequence of the
            same element type.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to process.</param>
            <returns>
            An observable sequence of the same data type as <paramref name="source"/>.
            </returns>
        </member>
        <member name="T:Bonsai.Combinator`1">
            <summary>
            Represents a generic operation on observable sequences that returns
            another sequence of the specified element type.
            </summary>
            <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
        </member>
        <member name="M:Bonsai.Combinator`1.Process``1(System.IObservable{``0})">
            <summary>
            Processes the <paramref name="source"/> sequence into a new sequence of the
            specified element type.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to process.</param>
            <returns>
            An observable sequence with elements of type <typeparamref name="TResult"/>.
            </returns>
        </member>
        <member name="T:Bonsai.Combinator`2">
            <summary>
            Represents an operation on observable sequences of a specific element type.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
        </member>
        <member name="M:Bonsai.Combinator`2.Process(System.IObservable{`0})">
            <summary>
            Processes the <paramref name="source"/> sequence into a new sequence of the
            specified element type.
            </summary>
            <param name="source">The source sequence to process.</param>
            <returns>
            An observable sequence with elements of type <typeparamref name="TResult"/>.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.AddBuilder">
            <summary>
            Represents an expression builder that applies the arithmetic addition operation
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.BinaryOperatorBuilder">
            <summary>
            Provides a base class for expression builders that define a simple binary operator
            on paired elements of an observable sequence. This is an abstract class.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.SelectBuilder">
            <summary>
            Provides a base class for expression builders that define a simple selector on the
            elements of an observable sequence. This is an abstract class.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.SingleArgumentExpressionBuilder">
            <summary>
            Provides a base class for expression builders that require a single input argument.
            This is an abstract class.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.ExpressionBuilder">
            <summary>
            Provides the base class from which the classes that generate expression tree nodes
            are derived. This is an abstract class.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.IExpressionBuilder">
            <summary>
            Defines methods that support the generation of expression tree nodes from
            a collection of expression input arguments.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.IExpressionBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Expressions.IExpressionBuilder.ArgumentRange">
            <summary>
            Gets the range of input arguments that this expression builder accepts.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            When overridden in a derived class, generates an <see cref="T:System.Linq.Expressions.Expression"/> node
            from a collection of input arguments. The result can be chained with other
            builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilder.ToString">
            <summary>
            Returns a string that represents the display name of this <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> instance.
            </summary>
            <returns>
            The string representation of this <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> object.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilder.Unwrap(Bonsai.Expressions.ExpressionBuilder)">
            <summary>
            Removes all decorators from a specified <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> instance
            and returns the first non-decorated (i.e. primitive) builder to be retrieved.
            </summary>
            <param name="builder">
            An <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> instance from which to remove decorators.
            </param>
            <returns>
            The first non-decorated <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> instance that is retrieved.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilder.GetWorkflowElement(Bonsai.Expressions.ExpressionBuilder)">
            <summary>
            Returns the editor browsable element for the specified <see cref="T:Bonsai.Expressions.ExpressionBuilder"/>.
            </summary>
            <param name="builder">
            The <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> for which to retrieve the editor browsable element.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that is the editor browsable element for the specified
            <paramref name="builder"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilder.FromWorkflowElement(System.Object,Bonsai.ElementCategory)">
            <summary>
            Creates a new expression builder from the specified editor browsable element and category.
            </summary>
            <param name="element">The editor browsable element for which to build a new expression builder.</param>
            <param name="elementCategory">The workflow category of the specified element.</param>
            <returns>A new <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> object.</returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilder.GetElementDisplayName(System.Type)">
            <summary>
            Gets the display name for the specified type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to retrieve the display name.</param>
            <returns>The display name for the specified <paramref name="type"/>.</returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilder.GetElementDisplayName(System.Object)">
            <summary>
            Gets the display name for the specified element.
            </summary>
            <param name="element">The element for which to retrieve the display name.</param>
            <returns>The name of the element.</returns>
        </member>
        <member name="P:Bonsai.Expressions.ExpressionBuilder.ArgumentRange">
            <summary>
            When overridden in a derived class, gets the range of input arguments
            that this expression builder accepts.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.SingleArgumentExpressionBuilder.ArgumentRange">
            <summary>
            Gets the range of input arguments that this expression builder accepts.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.SelectBuilder.BuildSelector(System.Linq.Expressions.Expression)">
            <summary>
            When overridden in a derived class, returns the expression
            that maps the specified input parameter to the selector result.
            </summary>
            <param name="expression">The input parameter to the selector.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that maps the input parameter to the
            selector result.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.SelectBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="T:Bonsai.Expressions.IPropertyMappingBuilder">
            <summary>
            Represents expression builder instances that can dynamically remap input sources
            into object property assignments.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.IPropertyMappingBuilder.PropertyMappings">
            <summary>
            Gets the collection of property mappings assigned to this expression builder.
            Property mapping subscriptions are processed before evaluating other output generation
            expressions.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.BinaryOperatorBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            When overridden in a derived class, returns the expression that applies a binary
            operator to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies the binary operator to the left
            and right parameters.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.BinaryOperatorBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="M:Bonsai.Expressions.BinaryOperatorBuilder.BuildSelector(System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that maps the specified input parameter to the selector result.
            </summary>
            <param name="expression">The input parameter to the selector.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that maps the input parameter to the
            selector result.
            </returns>
        </member>
        <member name="P:Bonsai.Expressions.BinaryOperatorBuilder.Operand">
            <summary>
            Gets or sets the value of the right hand operand which will be paired with elements
            of the observable sequence in case the sequence itself is not composed of paired elements.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.BinaryOperatorBuilder.PropertyMappings">
            <summary>
            Gets the collection of property mappings assigned to this expression builder.
            Property mapping subscriptions are processed before evaluating other output generation
            expressions.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.AddBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies the arithmetic addition operation
            to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies the arithmetic addition operation
            to the left and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.AsyncSubjectBuilder">
            <summary>
            Represents an expression builder that broadcasts the last value of an observable
            sequence to all subscribed and future observers using a shared subject.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.SubjectBuilder">
            <summary>
            Provides a base class for expression builders that broadcast the values of an observable
            sequence to multiple subscribers using a shared subject. This is an abstract class.
            </summary>
        </member>
        <member name="T:Bonsai.INamedElement">
            <summary>
            Represents workflow elements that have a name.
            </summary>
        </member>
        <member name="P:Bonsai.INamedElement.Name">
            <summary>
            Gets the name of the element.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.SubjectBuilder.BuildSubject(System.Linq.Expressions.Expression)">
            <summary>
            When overridden in a derived class, returns the expression
            that creates the shared subject.
            </summary>
            <param name="expression">
            The expression representing the observable input sequence.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that creates the shared subject.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.SubjectBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Expressions.SubjectBuilder.Name">
            <summary>
            Gets or sets the name of the shared subject.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.AsyncSubjectBuilder.BuildSubject(System.Linq.Expressions.Expression)">
            <summary>
            When overridden in a derived class, returns the expression
            that creates the shared subject.
            </summary>
            <param name="expression">
            The expression representing the observable input sequence.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that creates the shared subject.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.CombinatorExpressionBuilder">
            <summary>
            Provides a base class for expression builders that will generate combinator outputs that
            can be combined with dynamic property mappings. This is an abstract class.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.VariableArgumentExpressionBuilder">
            <summary>
            Provides a base class for expression builders that can have a variable number of
            input arguments. This is an abstract class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.VariableArgumentExpressionBuilder.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.VariableArgumentExpressionBuilder"/> class
            with the specified argument range.
            </summary>
            <param name="minArguments">The inclusive lower bound of the argument range.</param>
            <param name="maxArguments">The inclusive upper bound of the argument range.</param>
        </member>
        <member name="M:Bonsai.Expressions.VariableArgumentExpressionBuilder.SetArgumentRange(System.Int32,System.Int32)">
            <summary>
            Updates the argument range of the expression builder.
            </summary>
            <param name="minArguments">The inclusive lower bound of the argument range.</param>
            <param name="maxArguments">The inclusive upper bound of the argument range.</param>
        </member>
        <member name="P:Bonsai.Expressions.VariableArgumentExpressionBuilder.ArgumentRange">
            <summary>
            Gets the range of input arguments that this expression builder accepts.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.CombinatorExpressionBuilder.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.CombinatorExpressionBuilder"/> class
            with the specified argument range.
            </summary>
            <param name="minArguments">The inclusive lower bound of the argument range.</param>
            <param name="maxArguments">The inclusive upper bound of the argument range.</param>
        </member>
        <member name="M:Bonsai.Expressions.CombinatorExpressionBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="M:Bonsai.Expressions.CombinatorExpressionBuilder.BuildCombinator(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            When overridden in a derived class, generates an <see cref="T:System.Linq.Expressions.Expression"/> node
            that will be combined with any existing property mappings to produce the final
            output of the expression builder.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>
            An <see cref="T:System.Linq.Expressions.Expression"/> tree node that represents the combinator output.
            </returns>
        </member>
        <member name="P:Bonsai.Expressions.CombinatorExpressionBuilder.PropertyMappings">
            <summary>
            Gets the collection of property mappings assigned to this expression builder.
            Property mapping subscriptions are processed before evaluating other output generation
            expressions.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.ConditionBuilder">
            <summary>
            Represents an expression builder which filters the elements of an observable
            sequence according to a condition specified by the encapsulated workflow.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.SingleArgumentWorkflowExpressionBuilder">
            <summary>
            Provides a base class for workflow expression builders that require a single input argument.
            This is an abstract class.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.WorkflowExpressionBuilder">
            <summary>
            Provides a base class for expression builders that generate their output by means
            of an encapsulated workflow.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.WorkflowExpressionBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.WorkflowExpressionBuilder"/> class
            with the specified argument range.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.WorkflowExpressionBuilder.#ctor(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.WorkflowExpressionBuilder"/> class
            with the specified expression builder workflow and argument range.
            </summary>
            <param name="workflow">
            The expression builder workflow instance that will be used by this builder
            to generate the output expression tree.
            </param>
        </member>
        <member name="M:Bonsai.Expressions.WorkflowExpressionBuilder.BuildWorkflow(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Builds the output of the encapsulated workflow for the specified source and applies
            a selector taking into account any available workflow mappings.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <param name="source">
            The expression tree that will be used as input to the encapsulated workflow.
            </param>
            <param name="selector">
            A selector that will be applied to the output of the encapsulated workflow to determine
            the final output of the expression builder.
            </param>
            <returns>
            An <see cref="T:System.Linq.Expressions.Expression"/> tree that is the result of applying the encapsulated
            workflow to the specified input <paramref name="source"/>. Property mappings are also
            resolved in the correct sequence.
            </returns>
        </member>
        <member name="P:Bonsai.Expressions.WorkflowExpressionBuilder.Name">
            <summary>
            Gets or sets the name of the encapsulated workflow.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.WorkflowExpressionBuilder.Description">
            <summary>
            Gets or sets a description for the encapsulated workflow.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.WorkflowExpressionBuilder.Workflow">
            <summary>
            Gets the expression builder workflow that will be used to generate the
            output expression tree.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.WorkflowExpressionBuilder.WorkflowDescriptor">
            <summary>
            Gets the XML serializable representation of the encapsulated workflow.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.WorkflowExpressionBuilder.PropertyMappings">
            <summary>
            Gets the collection of property mappings assigned to this expression builder.
            Property mapping subscriptions are processed before evaluating other output generation
            expressions. In the case of an encapsulated workflow, mappings to nested workflow
            properties are also allowed.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.WorkflowExpressionBuilder.ArgumentRange">
            <summary>
            Gets the range of input arguments that this expression builder accepts.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.SingleArgumentWorkflowExpressionBuilder.ArgumentRange">
            <summary>
            Gets the range of input arguments that this expression builder accepts.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ConditionBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.ConditionBuilder"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ConditionBuilder.#ctor(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.ConditionBuilder"/> class
            with the specified expression builder workflow.
            </summary>
            <param name="workflow">
            The expression builder workflow instance that will be used by this builder
            to generate the output expression tree.
            </param>
        </member>
        <member name="M:Bonsai.Expressions.ConditionBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="T:Bonsai.Expressions.BitwiseAndBuilder">
            <summary>
            Represents an expression builder that applies a bitwise AND operation
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.BitwiseAndBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies a bitwise AND operation to the left
            and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies a bitwise AND operation to the left
            and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.BitwiseOrBuilder">
            <summary>
            Represents an expression builder that applies a bitwise OR operation
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.BitwiseOrBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies a bitwise OR operation to the left
            and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies a bitwise OR operation to the left
            and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.BitwiseNotBuilder">
            <summary>
            Represents an expression builder that applies a bitwise complement operation
            on elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.BitwiseNotBuilder.BuildSelector(System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies a bitwise complement operation on
            the specified input parameter to the selector result.
            </summary>
            <param name="expression">The input parameter to the selector.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies a bitwise complement operation
            on the input parameter to the selector result.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.BehaviorSubjectBuilder">
            <summary>
            Represents an expression builder that broadcasts the latest value of an observable
            sequence to all subscribed and future observers using a shared subject.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.BehaviorSubjectBuilder.BuildSubject(System.Linq.Expressions.Expression)">
            <summary>
            When overridden in a derived class, returns the expression
            that creates the shared subject.
            </summary>
            <param name="expression">
            The expression representing the observable input sequence.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that creates the shared subject.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.RightShiftBuilder">
            <summary>
            Represents an expression builder that applies a bitwise right-shift operation
            on elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.RightShiftBuilder.BuildSelector(System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies a bitwise right-shift operation
            to the input parameter.
            </summary>
            <param name="expression">The input parameter to the selector.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies a bitwise right-shift operation
            to the input parameter.
            </returns>
        </member>
        <member name="P:Bonsai.Expressions.RightShiftBuilder.Value">
            <summary>
            Gets or sets the number of positions by which to shift the bits of the input elements.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.LeftShiftBuilder">
            <summary>
            Represents an expression builder that applies a bitwise left-shift operation
            on elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.LeftShiftBuilder.BuildSelector(System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies a bitwise left-shift operation
            to the input parameter.
            </summary>
            <param name="expression">The input parameter to the selector.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies a bitwise left-shift operation
            to the input parameter.
            </returns>
        </member>
        <member name="P:Bonsai.Expressions.LeftShiftBuilder.Value">
            <summary>
            Gets or sets the number of positions by which to shift the bits of the input elements.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.SkipWhileBuilder">
            <summary>
            Represents an expression builder which bypasses elements in an observable sequence
            as long as the condition specified by the encapsulated workflow is true.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.SkipWhileBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.SkipWhileBuilder"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.SkipWhileBuilder.#ctor(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.SkipWhileBuilder"/> class
            with the specified expression builder workflow.
            </summary>
            <param name="workflow">
            The expression builder workflow instance that will be used by this builder
            to generate the output expression tree.
            </param>
        </member>
        <member name="T:Bonsai.Expressions.TakeWhileBuilder">
            <summary>
            Represents an expression builder which returns elements from an observable sequence
            as long as the condition specified by the encapsulated workflow is true.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.TakeWhileBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.TakeWhileBuilder"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.TakeWhileBuilder.#ctor(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.TakeWhileBuilder"/> class
            with the specified expression builder workflow.
            </summary>
            <param name="workflow">
            The expression builder workflow instance that will be used by this builder
            to generate the output expression tree.
            </param>
        </member>
        <member name="T:Bonsai.Expressions.MulticastSubjectBuilder">
            <summary>
            Represents an expression builder that pushes a sequence of values
            into a shared subject.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.MulticastSubjectBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Expressions.MulticastSubjectBuilder.Name">
            <summary>
            Gets or sets the name of the shared subject.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.PublishBuilder">
            <summary>
            Represents an expression builder that shares a single subscription to an observable
            sequence across the encapsulated workflow.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.MulticastBuilder">
            <summary>
            Provides a base class for expression builders that handle sharing of sequences
            between multiple branches of an expression builder workflow by means of an observable
            query. This is an abstract class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.MulticastBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="M:Bonsai.Expressions.PublishBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.PublishBuilder"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.PublishBuilder.#ctor(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.PublishBuilder"/> class
            with the specified expression builder workflow.
            </summary>
            <param name="workflow">
            The expression builder workflow instance that will be used by this builder
            to generate the output expression tree.
            </param>
        </member>
        <member name="T:Bonsai.Expressions.SinkBuilder">
            <summary>
            Represents an expression builder that adds the side effects specified by the
            encapsulated workflow to an observable sequence without modifying its elements.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.SinkBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.SinkBuilder"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.SinkBuilder.#ctor(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.SinkBuilder"/> class
            with the specified expression builder workflow.
            </summary>
            <param name="workflow">
            The expression builder workflow instance that will be used by this builder
            to generate the output expression tree.
            </param>
        </member>
        <member name="M:Bonsai.Expressions.SinkBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="T:Bonsai.Expressions.ReplaySubjectBuilder">
            <summary>
            Represents an expression builder that replays the values of an observable
            sequence to all subscribed and future observers using a shared subject.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ReplaySubjectBuilder.BuildSubject(System.Linq.Expressions.Expression)">
            <summary>
            When overridden in a derived class, returns the expression
            that creates the shared subject.
            </summary>
            <param name="expression">
            The expression representing the observable input sequence.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that creates the shared subject.
            </returns>
        </member>
        <member name="P:Bonsai.Expressions.ReplaySubjectBuilder.BufferSize">
            <summary>
            Gets or sets the maximum element count of the replay buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.ReplaySubjectBuilder.Window">
            <summary>
            Gets or sets the maximum time length of the replay buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.ReplaySubjectBuilder.WindowXml">
            <summary>
            Gets or sets the XML serializable representation of the replay window interval.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.PublishSubjectBuilder">
            <summary>
            Represents an expression builder that broadcasts the values of an observable
            sequence to multiple subscribers using a shared subject.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.PublishSubjectBuilder.BuildSubject(System.Linq.Expressions.Expression)">
            <summary>
            When overridden in a derived class, returns the expression
            that creates the shared subject.
            </summary>
            <param name="expression">
            The expression representing the observable input sequence.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that creates the shared subject.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.InputMappingBuilder">
            <summary>
            Represents an expression builder that selects inner properties of elements of the sequence
            and assigns their values to properties of a workflow element.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.PropertyMappingBuilder">
            <summary>
            Represents an expression builder that assigns values of an observable sequence
            to properties of a workflow element.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.PropertyMappingBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Expressions.PropertyMappingBuilder.PropertyMappings">
            <summary>
            Gets a collection of property mappings that specify how input values are assigned
            to properties of the workflow element.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.InputMappingBuilder.Selector">
            <summary>
            Gets or sets a string used to select the input element member to project
            as output of the sequence.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.ScanBuilder">
            <summary>
            Represents an expression builder which accumulates the values of an observable
            sequence using the encapsulated workflow.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ScanBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.ScanBuilder"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ScanBuilder.#ctor(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.ScanBuilder"/> class
            with the specified expression builder workflow.
            </summary>
            <param name="workflow">
            The expression builder workflow instance that will be used by this builder
            to generate the output expression tree.
            </param>
        </member>
        <member name="M:Bonsai.Expressions.ScanBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Expressions.ScanBuilder.ArgumentRange">
            <summary>
            Gets the range of input arguments that this expression builder accepts.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.ParseBuilder">
            <summary>
            Represents an expression builder that applies a pattern matching operation on
            elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ParseBuilder.BuildSelector(System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies a pattern matching operation on
            the specified input parameter to the selector result.
            </summary>
            <param name="expression">The input parameter to the selector.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies a pattern matching operation
            on the input parameter to the selector result.
            </returns>
        </member>
        <member name="P:Bonsai.Expressions.ParseBuilder.Pattern">
            <summary>
            Gets or sets the parse pattern to match, including conversion specifications
            for the different output data types.
            </summary>
            <remarks>
            The allowed conversion specifications are preceded by the character '%'.
            Currently the only supported types are: int (%i); float (%f); double (%d);
            bool (%b); char (%c); string (%s); date-time (%t) and time-span (%p).
            </remarks>
        </member>
        <member name="T:Bonsai.Expressions.ExternalizedTimeSpan`1">
            <summary>
            Represents a <see cref="T:System.TimeSpan"/> property that has been externalized
            from a workflow element.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.ExternalizedProperty">
            <summary>
            Represents a property that has been externalized from a workflow element.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ExternalizedProperty.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Expressions.ExternalizedProperty.MemberName">
            <summary>
            Gets the name of the externalized class member.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.ExternalizedProperty.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.ExternalizedProperty.ArgumentRange">
            <summary>
            Gets the range of input arguments that this expression builder accepts.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ExternalizedTimeSpan`1.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Expressions.ExternalizedTimeSpan`1.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.ExternalizedTimeSpan`1.ValueXml">
            <summary>
            Gets or sets an XML representation of the property value for serialization.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.ExternalizedDateTimeOffset`1">
            <summary>
            Represents a <see cref="T:System.DateTimeOffset"/> property that has been externalized
            from a workflow element.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ExternalizedDateTimeOffset`1.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Expressions.ExternalizedDateTimeOffset`1.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.ExternalizedDateTimeOffset`1.ValueXml">
            <summary>
            Gets or sets an XML representation of the property value for serialization.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.ExternalizedProperty`2">
            <summary>
            Represents a strongly typed property that has been externalized from a workflow element.
            This class can be used to convert class parameters of workflow elements into explicit
            source modules.
            </summary>
            <typeparam name="TValue">The type of the externalized property value.</typeparam>
            <typeparam name="TElement">
            The type of the workflow element to which the externalized member is bound to.
            </typeparam>
        </member>
        <member name="M:Bonsai.Expressions.ExternalizedProperty`2.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Expressions.ExternalizedProperty`2.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.Int64Property">
            <summary>
            Represents a workflow property containing a 64-bit signed integer.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.WorkflowProperty`1">
            <summary>
            Represents a strongly typed workflow property.
            </summary>
            <typeparam name="TValue">The type of the property value.</typeparam>
        </member>
        <member name="T:Bonsai.Expressions.WorkflowProperty">
            <summary>
            Represents a workflow property.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.WorkflowProperty`1.Generate">
            <summary>
            Generates an observable sequence that produces a value whenever the
            workflow property changes, starting with the initial property value.
            </summary>
            <returns>An observable sequence of property values.</returns>
        </member>
        <member name="M:Bonsai.Expressions.WorkflowProperty`1.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence that produces a value whenever the
            source sequence emits a new element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence used to generate new values.</param>
            <returns>An observable sequence of property values.</returns>
        </member>
        <member name="P:Bonsai.Expressions.WorkflowProperty`1.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.DoubleProperty">
            <summary>
            Represents a workflow property containing a double-precision floating-point number.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.ReplayBuilder">
            <summary>
            Represents an expression builder that handles sharing of an observable sequence
            across the encapsulated workflow by eagerly replaying notifications.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ReplayBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.ReplayBuilder"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ReplayBuilder.#ctor(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.ReplayBuilder"/> class
            with the specified expression builder workflow.
            </summary>
            <param name="workflow">
            The expression builder workflow instance that will be used by this builder
            to generate the output expression tree.
            </param>
        </member>
        <member name="P:Bonsai.Expressions.ReplayBuilder.BufferSize">
            <summary>
            Gets or sets the maximum element count of the replay buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.ReplayBuilder.Window">
            <summary>
            Gets or sets the maximum time length of the replay buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.ReplayBuilder.WindowXml">
            <summary>
            Gets or sets the XML serializable representation of the replay window interval.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.SubscribeSubjectBuilder">
            <summary>
            Represents an expression builder that generates a sequence of values
            by subscribing to a shared subject.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.ZeroArgumentExpressionBuilder">
            <summary>
            Provides a base class for expression builders that require zero input arguments.
            This is an abstract class.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.ZeroArgumentExpressionBuilder.ArgumentRange">
            <summary>
            Gets the range of input arguments that this expression builder accepts.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.SubscribeSubjectBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Expressions.SubscribeSubjectBuilder.Name">
            <summary>
            Gets or sets the name of the shared subject.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.UnknownTypeBuilder">
            <summary>
            Represents an expression builder that is a proxy for an unknown type.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.UnknownTypeBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Throws a <see cref="T:System.NotImplementedException"/> by design in order to indicate
            the current builder is a proxy for an unknown type.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>This method never returns.</returns>
            <exception cref="T:System.NotImplementedException">
            This method always throws this exception, by design.
            </exception>
        </member>
        <member name="P:Bonsai.Expressions.UnknownTypeBuilder.ArgumentRange">
            <summary>
            Gets the range of input arguments that this expression builder accepts.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.LogicalAndBuilder">
            <summary>
            Represents an expression builder that applies a conditional AND operation
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.LogicalAndBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies the conditional AND operation
            to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies the conditional AND operation
            to the left and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.LogicalOrBuilder">
            <summary>
            Represents an expression builder that applies a conditional OR operation
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.LogicalOrBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies the conditional OR operation
            to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies the conditional OR operation
            to the left and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.MemberSelectorBuilder">
            <summary>
            Represents an expression builder that defines a simple selector on the elements
            of an observable sequence by mapping each element to one of its member values.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.MemberSelectorBuilder.BuildSelector(System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that maps the specified input parameter
            to the selector result.
            </summary>
            <param name="expression">The input parameter to the selector.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that maps the input parameter to the
            selector result.
            </returns>
        </member>
        <member name="P:Bonsai.Expressions.MemberSelectorBuilder.Selector">
            <summary>
            Gets or sets a string used to select the input element member to project
            as output of the sequence.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.NotEqualBuilder">
            <summary>
            Represents an expression builder that applies an inequality comparison
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.NotEqualBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies an inequality comparison
            to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies an inequality comparison
            to the left and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.EqualBuilder">
            <summary>
            Represents an expression builder that applies an equality comparison
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.EqualBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies an equality comparison
            to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies an equality comparison
            to the left and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.LessThanOrEqualBuilder">
            <summary>
            Represents an expression builder that applies a "less than or equal" numeric comparison
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.LessThanOrEqualBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies a "less than or equal" numeric comparison
            to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies a "less than or equal" numeric comparison
            to the left and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.LessThanBuilder">
            <summary>
            Represents an expression builder that applies a "less than" numeric comparison
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.LessThanBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies a "less than" numeric comparison
            to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies a "less than" numeric comparison
            to the left and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.GreaterThanOrEqualBuilder">
            <summary>
            Represents an expression builder that applies a "greater than or equal" numeric comparison
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.GreaterThanOrEqualBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies a "greater than or equal" numeric comparison
            to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies a "greater than or equal" numeric comparison
            to the left and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.GreaterThanBuilder">
            <summary>
            Represents an expression builder that applies a "greater than" numeric comparison
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.GreaterThanBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies a "greater than" numeric comparison
            to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies a "greater than" numeric comparison
            to the left and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.XorBuilder">
            <summary>
            Represents an expression builder that applies a bitwise XOR operation
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.XorBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies a bitwise XOR operation to the left
            and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies a bitwise XOR operation to the left
            and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.ModBuilder">
            <summary>
            Represents an expression builder that applies the arithmetic remainder operation
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ModBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies the arithmetic remainder operation
            to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies the arithmetic remainder operation
            to the left and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.DivideBuilder">
            <summary>
            Represents an expression builder that applies the arithmetic division operation
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.DivideBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies the arithmetic division operation
            to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies the arithmetic division operation
            to the left and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.MultiplyBuilder">
            <summary>
            Represents an expression builder that applies the arithmetic multiplication operation
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.MultiplyBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies the arithmetic multiplication operation
            to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies the arithmetic multiplication operation
            to the left and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.NegateBuilder">
            <summary>
            Represents an expression builder that applies an arithmetic negation operation
            on elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.NegateBuilder.BuildSelector(System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies an arithmetic negation operation on
            the specified input parameter to the selector result.
            </summary>
            <param name="expression">The input parameter to the selector.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies an arithmetic negation operation
            on the input parameter to the selector result.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.SubtractBuilder">
            <summary>
            Represents an expression builder that applies the arithmetic subtraction operation
            on paired elements of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.SubtractBuilder.BuildSelector(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression that applies the arithmetic subtraction operation
            to the left and right parameters.
            </summary>
            <param name="left">The left input parameter.</param>
            <param name="right">The right input parameter.</param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that applies the arithmetic subtraction operation
            to the left and right parameters.
            </returns>
        </member>
        <member name="T:Bonsai.ExternalizableAttribute">
            <summary>
            Specifies whether a property is allowed to be explicitly externalized on a
            workflow editor.
            </summary>
        </member>
        <member name="F:Bonsai.ExternalizableAttribute.Default">
            <summary>
            Specifies the default value for the <see cref="T:Bonsai.ExternalizableAttribute"/> which is set to
            allow a property to be explicitly externalized on a workflow editor.
            </summary>
        </member>
        <member name="M:Bonsai.ExternalizableAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.ExternalizableAttribute"/> class.
            </summary>
            <param name="externalizable">
            <b>true</b> if the property can be explicitly externalized on a workflow editor;
            otherwise, <b>false</b>. The default is <b>true</b>.
            </param>
        </member>
        <member name="P:Bonsai.ExternalizableAttribute.Externalizable">
            <summary>
            Gets a value indicating whether a property is externalizable.
            </summary>
        </member>
        <member name="T:Bonsai.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bonsai.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Bonsai.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Bonsai.Properties.Resources.Exception_AmbiguousNamedElement">
            <summary>
              Looks up a localized string similar to Multiple elements with the specified name &apos;{0}&apos; were found in the workflow..
            </summary>
        </member>
        <member name="P:Bonsai.Properties.Resources.Exception_PropertyNotFound">
            <summary>
              Looks up a localized string similar to The specified property &apos;{0}&apos; was not found in the workflow. .
            </summary>
        </member>
        <member name="P:Bonsai.Properties.Resources.Exception_SerializingUnknownTypeBuilder">
            <summary>
              Looks up a localized string similar to The workflow contains unspecified types. Please install any missing packages or replace the affected modules and try again..
            </summary>
        </member>
        <member name="T:Bonsai.Range`1">
            <summary>
            Represents a range of values defined by an inclusive lower and upper bounds.
            </summary>
            <typeparam name="TValue">The type of values in the range.</typeparam>
        </member>
        <member name="M:Bonsai.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Range`1"/> class with the specified
            lower and upper bounds.
            </summary>
            <param name="lowerBound">The inclusive lower bound of the range.</param>
            <param name="upperBound">The inclusive upper bound of the range.</param>
        </member>
        <member name="M:Bonsai.Range`1.#ctor(`0,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Range`1"/> class with the specified 
            lower and upper bounds and using the specified comparer.
            </summary>
            <param name="lowerBound">The inclusive lower bound of the range.</param>
            <param name="upperBound">The inclusive upper bound of the range.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to use to compare values.</param>
        </member>
        <member name="M:Bonsai.Range`1.Contains(`0)">
            <summary>
            Tests whether a specified value falls within the range.
            </summary>
            <param name="value">The value to test.</param>
            <returns>
            <b>true</b> if <paramref name="value"/> is between or equal to <see cref="P:Bonsai.Range`1.LowerBound"/>
            and <see cref="P:Bonsai.Range`1.UpperBound"/>; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Bonsai.Range`1.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:Bonsai.Range`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="P:Bonsai.Range`1.LowerBound"/> and
            <see cref="P:Bonsai.Range`1.UpperBound"/> values of this <see cref="T:Bonsai.Range`1"/>.
            </returns>
        </member>
        <member name="P:Bonsai.Range`1.LowerBound">
            <summary>
            Gets the inclusive lower bound of the range.
            </summary>
        </member>
        <member name="P:Bonsai.Range`1.UpperBound">
            <summary>
            Gets the inclusive upper bound of the range.
            </summary>
        </member>
        <member name="T:Bonsai.Range">
            <summary>
            Provides static methods for creating range objects.
            </summary>
        </member>
        <member name="M:Bonsai.Range.Create``1(``0,``0)">
            <summary>
            Creates a new range with the specified lower and upper bounds.
            </summary>
            <typeparam name="TValue">The type of values in the range.</typeparam>
            <param name="lowerBound">The inclusive lower bound of the range.</param>
            <param name="upperBound">The inclusive lower bound of the range.</param>
            <returns>A new instance of the <see cref="T:Bonsai.Range`1"/> class.</returns>
        </member>
        <member name="M:Bonsai.Range.Create``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a new range with the specified lower and upper bounds and
            using the specified comparer.
            </summary>
            <typeparam name="TValue">The type of values in the range.</typeparam>
            <param name="lowerBound">The inclusive lower bound of the range.</param>
            <param name="upperBound">The inclusive lower bound of the range.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to use to compare values.</param>
            <returns>A new instance of the <see cref="T:Bonsai.Range`1"/> class.</returns>
        </member>
        <member name="T:Bonsai.Reactive.AccumulateBuilder">
            <summary>
            Represents a combinator that computes the cumulative sum of an observable sequence
            and returns each intermediate result.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.AccumulateBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="T:Bonsai.Reactive.Average">
            <summary>
            Represents a combinator that computes the numerical average of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Average.Process(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Decimal"/> values to calculate the average of.
            </param>
            <returns>
            An observable sequence containing a single element with the average of the
            sequence of values.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Average.Process(System.IObservable{System.Decimal})">
            <summary>
            Computes the average of an observable sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Decimal"/> values to calculate the average of.
            </param>
            <returns>
            An observable sequence containing a single element with the average of the
            sequence of values.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Average.Process(System.IObservable{System.Nullable{System.Double}})">
            <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Double"/> values to calculate the average of.
            </param>
            <returns>
            An observable sequence containing a single element with the average of the
            sequence of values.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Average.Process(System.IObservable{System.Double})">
            <summary>
            Computes the average of an observable sequence of <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Double"/> values to calculate the average of.
            </param>
            <returns>
            An observable sequence containing a single element with the average of the
            sequence of values.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Average.Process(System.IObservable{System.Nullable{System.Single}})">
            <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Single"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Single"/> values to calculate the average of.
            </param>
            <returns>
            An observable sequence containing a single element with the average of the
            sequence of values.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Average.Process(System.IObservable{System.Single})">
            <summary>
            Computes the average of an observable sequence of <see cref="T:System.Single"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Single"/> values to calculate the average of.
            </param>
            <returns>
            An observable sequence containing a single element with the average of the
            sequence of values.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Average.Process(System.IObservable{System.Nullable{System.Int32}})">
            <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Int32"/> values to calculate the average of.
            </param>
            <returns>
            An observable sequence containing a single element with the average of the
            sequence of values.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Average.Process(System.IObservable{System.Int32})">
            <summary>
            Computes the average of an observable sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Int32"/> values to calculate the average of.
            </param>
            <returns>
            An observable sequence containing a single element with the average of the
            sequence of values.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Average.Process(System.IObservable{System.Nullable{System.Int64}})">
            <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Int64"/> values to calculate the average of.
            </param>
            <returns>
            An observable sequence containing a single element with the average of the
            sequence of values.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Average.Process(System.IObservable{System.Int64})">
            <summary>
            Computes the average of an observable sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Int64"/> values to calculate the average of.
            </param>
            <returns>
            An observable sequence containing a single element with the average of the
            sequence of values.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.Buffer">
            <summary>
            Represents a combinator that projects each element of the sequence into zero or more
            buffers based on element count information.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Buffer.Process``1(System.IObservable{``0})">
            <summary>
            Projects each element of an observable sequence into zero or more buffers
            based on element count information.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to produce buffers over.</param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="P:Bonsai.Reactive.Buffer.Count">
            <summary>
            Gets or sets the length of each buffer.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.Buffer.Skip">
            <summary>
            Gets or sets the number of elements to skip between the creation of consecutive buffers.
            If it is not specified, <see cref="P:Bonsai.Reactive.Buffer.Skip"/> will be equal to <see cref="P:Bonsai.Reactive.Buffer.Count"/> in order
            to generate consecutive non-overlapping buffers.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.Catch">
            <summary>
            Represents a combinator that continues an observable sequence that is terminated
            by an exception with the next observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Catch.Process``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Continues an observable sequence that is terminated by an exception with
            the next observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source and handler sequences.</typeparam>
            <param name="first">The first observable sequence whose exception (if any) is caught.</param>
            <param name="second">
            The second observable sequence used to produce results when the first sequence
            terminates exceptionally.
            </param>
            <returns>
            An observable sequence containing the first sequence's elements, followed
            by the elements of the second sequence in case an exception occurred.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Catch.Process``1(System.IObservable{``0}[])">
            <summary>
            Continues an observable sequence that is terminated by an exception with
            the next observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source and handler sequences.</typeparam>
            <param name="sources">The observable sequences to catch exceptions for.</param>
            <returns>
            An observable sequence containing elements from consecutive source sequences
            until a source sequence terminates successfully.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.Concat">
            <summary>
            Represents a combinator that concatenates any number of observable sequences as long as the
            previous sequence terminated successfully.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Concat.Process``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Concatenates the second observable sequence to the first observable sequence upon
            successful termination of the first.
            </summary>
            <typeparam name="TSource">The type of the elements in the first sequence.</typeparam>
            <param name="first">The first observable sequence.</param>
            <param name="second">The second observable sequence.</param>
            <returns>
            An observable sequence that contains the elements of the first sequence,
            followed by those of the second sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Concat.Process``1(System.IObservable{``0},System.IObservable{``0},System.IObservable{``0}[])">
            <summary>
            Concatenates all of the specified observable sequences, as long as the previous
            observable sequence terminated successfully.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="first">The first observable sequence.</param>
            <param name="second">The second observable sequence.</param>
            <param name="remainder">The remaining observable sequences to concatenate.</param>
            <returns>
            An observable sequence that contains the elements of each given sequence,
            in sequential order.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Concat.Process``1(System.IObservable{System.IObservable{``0}})">
            <summary>
            Concatenates all inner observable sequences, as long as the previous observable
            sequence terminated successfully.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="sources">The observable sequence of inner observable sequences.</param>
            <returns>
            An observable sequence that contains the elements of each observed inner
            sequence, in sequential order.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Concat.Process``1(System.IObservable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Concatenates all inner enumerable sequences into one observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="sources">The observable sequence of inner enumerable sequences.</param>
            <returns>
            An observable sequence that contains the elements of each inner enumerable
            sequence, in sequential order.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.DistinctByBuilder">
            <summary>
            Represents a combinator that returns an observable sequence that
            contains only distinct elements according to the specified key.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.DistinctByBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Reactive.DistinctByBuilder.KeySelector">
            <summary>
            Gets or sets a string used to specify a key to test for the uniqueness of each element in the observable sequence.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.DistinctUntilChangedByBuilder">
            <summary>
            Represents a combinator that ensures that only distinct contiguous
            elements according to the specified key are propagated.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.DistinctUntilChangedByBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Reactive.DistinctUntilChangedByBuilder.KeySelector">
            <summary>
            Gets or sets a string used to specify a key to test for contiguity of each element in the observable sequence.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.Synchronize">
            <summary>
            Represents a combinator that synchronizes the observable sequence
            such that observer notifications cannot be delivered concurrently.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Synchronize.Process``1(System.IObservable{``0})">
            <summary>
            Synchronizes the observable sequence such that observer notifications
            cannot be delivered concurrently.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The observable sequence to synchronize.</param>
            <returns>
            The source sequence whose outgoing calls to observers are synchronized.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.GroupByBuilder">
            <summary>
            Represents a combinator that groups the elements of an observable
            sequence according to the specified key.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.GroupByBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Reactive.GroupByBuilder.KeySelector">
            <summary>
            Gets or sets a string used to specify a key for each element of the observable sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.GroupByBuilder.ElementSelector">
            <summary>
            Gets or sets a string used to specify the properties used as elements in each
            grouped observable sequence.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.LastOrDefault">
            <summary>
            Represents a combinator that returns the last element of an observable sequence,
            or a default value if no such element exists.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.LastOrDefault.Process``1(System.IObservable{``0})">
            <summary>
            Returns the last element of an observable sequence, or a default value
            if no such element exists.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence to take the last element from.</param>
            <returns>
            An observable sequence with a single element that contains the last element
            of the observable sequence, or a default value if no such element exists.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.Last">
            <summary>
            Represents a combinator that returns the last element of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Last.Process``1(System.IObservable{``0})">
            <summary>
            Returns the last element of an observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence to take the last element from.</param>
            <returns>
            An observable sequence with a single element that contains the last element
            of the observable sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.First">
            <summary>
            Represents a combinator that returns the first element of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.First.Process``1(System.IObservable{``0})">
            <summary>
            Returns the first element of an observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence to take the first element from.</param>
            <returns>
            An observable sequence with a single element that contains the first element
            of the observable sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.FirstOrDefault">
            <summary>
            Represents a combinator that returns the first element of an observable sequence,
            or a default value if no such element exists.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.FirstOrDefault.Process``1(System.IObservable{``0})">
            <summary>
            Returns the first element of an observable sequence, or a default value
            if no such element exists.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence to take the first element from.</param>
            <returns>
            An observable sequence with a single element that contains the first element
            of the observable sequence, or a default value if no such element exists.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.MinByBuilder">
            <summary>
            Represents a combinator that returns the elements in the observable
            sequence with the minimum key value.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.MinByBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Reactive.MinByBuilder.KeySelector">
            <summary>
            Gets or sets a string used to specify a key for each element of the observable sequence.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.IsEmpty">
            <summary>
            Represents a combinator that determines whether the observable
            sequence is empty.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.IsEmpty.Process``1(System.IObservable{``0})">
            <summary>
            Determines whether the observable sequence is empty.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to check.</param>
            <returns>
            An observable sequence containing a single element determining whether
            the source sequence is empty.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.MaxByBuilder">
            <summary>
            Represents a combinator that returns the elements in the observable
            sequence with the maximum key value.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.MaxByBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Reactive.MaxByBuilder.KeySelector">
            <summary>
            Gets or sets a string used to specify a key for each element of the observable sequence.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.ToArray">
            <summary>
            Represents a combinator that creates an array containing every element
            in the observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.ToArray.Process``1(System.IObservable{``0})">
            <summary>
            Creates an array containing every element in the observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to get an array of elements for.</param>
            <returns>
            An observable sequence containing a single element with the array of all elements
            in the source sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.Dematerialize">
            <summary>
            Represents a combinator that dematerializes the explicit notification values of an observable
            sequence as implicit notifications.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Dematerialize.Process``1(System.IObservable{System.Reactive.Notification{``0}})">
            <summary>
            Dematerializes the explicit notification values of an observable sequence as implicit
            notifications.
            </summary>
            <typeparam name="TSource">
            The type of the elements materialized in the source sequence notification objects.
            </typeparam>
            <param name="source">
            An observable sequence containing explicit notification values which have
            to be turned into implicit notifications.
            </param>
            <returns>
            An observable sequence exhibiting the behavior corresponding to the source
            sequence's notification values.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.DelaySubscription">
            <summary>
            Represents a combinator that time-shifts the observable sequence by delaying the
            subscription with the specified relative time duration.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.DelaySubscription.Process``1(System.IObservable{``0})">
            <summary>
            Time-shifts the observable sequence by delaying the subscription with the specified
            relative time duration.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to delay subscription for.</param>
            <returns>The time-shifted sequence.</returns>
        </member>
        <member name="P:Bonsai.Reactive.DelaySubscription.DueTime">
            <summary>
            Gets or sets the time interval by which to delay the subscription to the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.DelaySubscription.DueTimeXml">
            <summary>
            Gets or sets the XML serializable representation of due time.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.ElementAccumulation`2">
            <summary>
            Represents the current state of an accumulation over an observable sequence.
            </summary>
            <typeparam name="TAccumulation">The type of values in the accumulation.</typeparam>
            <typeparam name="TElement">The type of values in the observable sequence.</typeparam>
        </member>
        <member name="M:Bonsai.Reactive.ElementAccumulation`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Reactive.ElementAccumulation`2"/> class
            with the specified accumulator state and current element information.
            </summary>
            <param name="accumulation">The current state of the accumulator.</param>
            <param name="value">The current value of the sequence to accumulate.</param>
        </member>
        <member name="M:Bonsai.Reactive.ElementAccumulation`2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:Bonsai.Reactive.ElementAccumulation`2"/>
            object is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <b>true</b> if the current instance is equal to the specified object;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.ElementAccumulation`2.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:Bonsai.Reactive.ElementAccumulation`2"/> object.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Bonsai.Reactive.ElementAccumulation`2.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Bonsai.Reactive.ElementAccumulation`2"/>
            instance.
            </summary>
            <returns>
            The string representation of this <see cref="T:Bonsai.Reactive.ElementAccumulation`2"/> object.
            </returns>
        </member>
        <member name="P:Bonsai.Reactive.ElementAccumulation`2.Accumulation">
            <summary>
            Gets the current state of the accumulator.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.ElementAccumulation`2.Value">
            <summary>
            Gets the current value of the sequence to accumulate.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.ElementIndex`1">
            <summary>
            Represents an element from an observable sequence associated with its index information.
            The zero-based index represents the order of the element in the sequence.
            </summary>
            <typeparam name="T">The type of the value being annotated with index information.</typeparam>
        </member>
        <member name="M:Bonsai.Reactive.ElementIndex`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Reactive.ElementIndex`1"/> class with the specified
            value and index information.
            </summary>
            <param name="value">The value to be annotated with index information.</param>
            <param name="index">The zero-based index of the element in the sequence.</param>
        </member>
        <member name="M:Bonsai.Reactive.ElementIndex`1.Equals(Bonsai.Reactive.ElementIndex{`0})">
            <summary>
            Returns a value indicating whether this instance has the same value and index
            as a specified <see cref="T:Bonsai.Reactive.ElementIndex`1"/> structure.
            </summary>
            <param name="other">The <see cref="T:Bonsai.Reactive.ElementIndex`1"/> structure to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same value and index as this
            instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.ElementIndex`1.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is an <see cref="T:Bonsai.Reactive.ElementIndex`1"/> structure
            with the same value and index as this <see cref="T:Bonsai.Reactive.ElementIndex`1"/> structure.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is an <see cref="T:Bonsai.Reactive.ElementIndex`1"/> and has the
            same value and index as this <see cref="T:Bonsai.Reactive.ElementIndex`1"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.ElementIndex`1.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:Bonsai.Reactive.ElementIndex`1"/> structure.
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:Bonsai.Reactive.ElementIndex`1"/> structure.</returns>
        </member>
        <member name="M:Bonsai.Reactive.ElementIndex`1.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this <see cref="T:Bonsai.Reactive.ElementIndex`1"/>
            structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="P:Bonsai.Reactive.ElementIndex`1.Value"/> and <see cref="P:Bonsai.Reactive.ElementIndex`1.Index"/>
            properties of this <see cref="T:Bonsai.Reactive.ElementIndex`1"/> structure.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.ElementIndex`1.op_Equality(Bonsai.Reactive.ElementIndex{`0},Bonsai.Reactive.ElementIndex{`0})">
            <summary>
            Tests whether two <see cref="T:Bonsai.Reactive.ElementIndex`1"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:Bonsai.Reactive.ElementIndex`1"/> structure on the left of the equality operator.</param>
            <param name="right">The <see cref="T:Bonsai.Reactive.ElementIndex`1"/> structure on the right of the equality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have equal value and index;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.ElementIndex`1.op_Inequality(Bonsai.Reactive.ElementIndex{`0},Bonsai.Reactive.ElementIndex{`0})">
            <summary>
            Tests whether two <see cref="T:Bonsai.Reactive.ElementIndex`1"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:Bonsai.Reactive.ElementIndex`1"/> structure on the left of the inequality operator.</param>
            <param name="right">The <see cref="T:Bonsai.Reactive.ElementIndex`1"/> structure on the right of the inequality operator.</param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ either in value or index;
            <b>false</b> if <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="P:Bonsai.Reactive.ElementIndex`1.Index">
            <summary>
            Gets the zero-based index of the element in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.ElementIndex`1.Value">
            <summary>
            Gets the value of the element.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.Index">
            <summary>
            Represents a combinator that records the zero-based index of elements produced
            by an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Index.Process``1(System.IObservable{``0})">
            <summary>
            Records the zero-based index of elements produced by an observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence for which to record element indices.</param>
            <returns>An observable sequence with index information on elements.</returns>
        </member>
        <member name="T:Bonsai.Reactive.Materialize">
            <summary>
            Represents a combinator that materializes the implicit notifications of an observable
            sequence as explicit notification values.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Materialize.Process``1(System.IObservable{``0})">
            <summary>
            Materializes the implicit notifications of an observable sequence as explicit
            notification values.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An observable sequence to get notification values for.</param>
            <returns>
            An observable sequence containing the materialized notification values from
            the source sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.OnErrorResumeNext">
            <summary>
            Represents a combinator that concatenates any number of observable sequences even if any of
            the sequences terminates exceptionally.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.OnErrorResumeNext.Process``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Concatenates the second observable sequence to the first observable sequence upon
            successful or exceptional termination of the first.
            </summary>
            <typeparam name="TSource">The type of the elements in the first sequence.</typeparam>
            <param name="first">The first observable sequence.</param>
            <param name="second">The second observable sequence.</param>
            <returns>
            An observable sequence that concatenates the first and second sequence, even
            if the first sequence terminates exceptionally.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.OnErrorResumeNext.Process``1(System.IObservable{``0}[])">
            <summary>
            Concatenates all of the specified observable sequences, even if the previous
            observable sequence terminated exceptionally.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="sources">The observable sequences to concatenate.</param>
            <returns>
            An observable sequence that concatenates the source sequences, even if a
            sequence terminates exceptionally.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.Retry">
            <summary>
            Represents a combinator that repeats an observable sequence
            until it successfully terminates.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Retry.Process``1(System.IObservable{``0})">
            <summary>
            Repeats the observable sequence until it successfully terminates.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The observable sequence to repeat until it successfully terminates.</param>
            <returns>
            The observable sequence producing the elements of the given sequence repeatedly
            until it terminates successfully.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.RetryCount">
            <summary>
            Represents a combinator that repeats an observable sequence the specified
            number of times or until it successfully terminates.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.RetryCount.Process``1(System.IObservable{``0})">
            <summary>
            Repeats the observable sequence the specified number of times
            or until it successfully terminates.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The observable sequence to repeat until it successfully terminates.</param>
            <returns>
            The observable sequence producing the elements of the given sequence repeatedly
            until it terminates successfully.
            </returns>
        </member>
        <member name="P:Bonsai.Reactive.RetryCount.Count">
            <summary>
            Gets or sets the number of times to repeat the sequence.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.SequenceEqual">
            <summary>
            Represents a combinator which determines whether two sequences are equal by comparing
            the elements pairwise.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.SequenceEqual.Process``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements pairwise.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="first">First observable sequence.</param>
            <param name="second">Second observable sequence.</param>
            <returns>
            An observable sequence that contains a single element which indicates whether
            both sequences are of equal length and their corresponding elements are equal
            according to the default equality comparer for their type.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.Switch">
            <summary>
            Represents a combinator that transforms a sequence of windows into a sequence of values
            produced only from the most recent window.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Switch.Process``1(System.IObservable{System.IObservable{``0}})">
            <summary>
            Transforms a sequence of windows into a sequence of values produced only from
            the most recent window.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence of windows to switch over.</param>
            <returns>
            An observable sequence of values produced only from the most recent window.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.ToList">
            <summary>
            Represents a combinator that creates a list containing every element
            in the observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.ToList.Process``1(System.IObservable{``0})">
            <summary>
            Creates a list containing every element in the observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to get a list of elements for.</param>
            <returns>
            An observable sequence containing a single element with the list of all elements
            in the source sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.TriggeredBuffer">
            <summary>
            Represents a combinator that projects each element of an observable sequence into zero
            or more buffers aligned on an external trigger.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.TriggeredBuffer.Process``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Projects each element of an observable sequence into zero or more buffers.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TBufferOpening">
            The type of the elements in the sequence indicating buffer opening events.
            </typeparam>
            <param name="source">The source sequence to produce buffers over.</param>
            <param name="bufferOpenings">
            The sequence of buffer opening events. If no maximum length is specified, the current
            buffer is closed and a new buffer is opened upon receiving a buffer opening event.
            </param>
            <returns>An observable sequence of buffers.</returns>
        </member>
        <member name="P:Bonsai.Reactive.TriggeredBuffer.TimeSpan">
            <summary>
            Gets or sets the time length of each buffer. If it is not specified, the buffer will have
            its length set by either a maximum number of elements or an external trigger boundary.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.TriggeredBuffer.Count">
            <summary>
            Gets or sets the maximum number of elements in each buffer. If it is not specified, the
            buffer will have its length set by the optional time span or by an external trigger boundary.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.TriggeredBuffer.TimeSpanXml">
            <summary>
            Gets or sets the XML serializable representation of buffer time span.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.Max">
            <summary>
            Represents a combinator that computes the maximum element in an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Max.Process(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable
            <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Decimal"/> values to determine the
            maximum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the maximum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Max.Process(System.IObservable{System.Decimal})">
            <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Decimal"/>
            values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Decimal"/> values to determine the maximum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the maximum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Max.Process(System.IObservable{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable
            <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Double"/> values to determine the
            maximum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the maximum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Max.Process(System.IObservable{System.Double})">
            <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Double"/>
            values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Double"/> values to determine the maximum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the maximum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Max.Process(System.IObservable{System.Nullable{System.Single}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable
            <see cref="T:System.Single"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Single"/> values to determine the
            maximum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the maximum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Max.Process(System.IObservable{System.Single})">
            <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Single"/>
            values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Single"/> values to determine the maximum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the maximum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Max.Process(System.IObservable{System.Nullable{System.Int32}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable
            <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int32"/> values to determine the
            maximum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the maximum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Max.Process(System.IObservable{System.Int32})">
            <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Int32"/>
            values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Int32"/> values to determine the maximum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the maximum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Max.Process(System.IObservable{System.Nullable{System.Int64}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable
            <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int64"/> values to determine the
            maximum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the maximum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Max.Process(System.IObservable{System.Int64})">
            <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Int64"/>
            values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Int64"/> values to determine the maximum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the maximum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Max.Process``1(System.IObservable{``0})">
            <summary>
            Returns the maximum element in an observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">
            An observable sequence to determine the maximum element of.
            </param>
            <returns>
            An observable sequence containing a single element with the maximum value
            in the source sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.Min">
            <summary>
            Represents a combinator that computes the minimum element in an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Min.Process(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable
            <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Decimal"/> values to determine the
            minimum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the minimum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Min.Process(System.IObservable{System.Decimal})">
            <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Decimal"/>
            values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Decimal"/> values to determine the minimum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the minimum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Min.Process(System.IObservable{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable
            <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Double"/> values to determine the
            minimum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the minimum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Min.Process(System.IObservable{System.Double})">
            <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Double"/>
            values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Double"/> values to determine the minimum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the minimum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Min.Process(System.IObservable{System.Nullable{System.Single}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable
            <see cref="T:System.Single"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Single"/> values to determine the
            minimum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the minimum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Min.Process(System.IObservable{System.Single})">
            <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Single"/>
            values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Single"/> values to determine the minimum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the minimum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Min.Process(System.IObservable{System.Nullable{System.Int32}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable
            <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int32"/> values to determine the
            minimum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the minimum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Min.Process(System.IObservable{System.Int32})">
            <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Int32"/>
            values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Int32"/> values to determine the minimum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the minimum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Min.Process(System.IObservable{System.Nullable{System.Int64}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable
            <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int64"/> values to determine the
            minimum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the minimum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Min.Process(System.IObservable{System.Int64})">
            <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Int64"/>
            values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Int64"/> values to determine the minimum value of.
            </param>
            <returns>
            An observable sequence containing a single element with the minimum value
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Min.Process``1(System.IObservable{``0})">
            <summary>
            Returns the minimum element in an observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">
            An observable sequence to determine the minimum element of.
            </param>
            <returns>
            An observable sequence containing a single element with the minimum value
            in the source sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.Sum">
            <summary>
            Represents a combinator that computes the sum of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Sum.Process(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Decimal"/> values to calculate the sum of.
            </param>
            <returns>
            An observable sequence containing a single element with the sum of the values
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Sum.Process(System.IObservable{System.Decimal})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Decimal"/> values to calculate the sum of.
            </param>
            <returns>
            An observable sequence containing a single element with the sum of the values
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Sum.Process(System.IObservable{System.Nullable{System.Double}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Double"/> values to calculate the sum of.
            </param>
            <returns>
            An observable sequence containing a single element with the sum of the values
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Sum.Process(System.IObservable{System.Double})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Double"/> values to calculate the sum of.
            </param>
            <returns>
            An observable sequence containing a single element with the sum of the values
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Sum.Process(System.IObservable{System.Nullable{System.Single}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Single"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Single"/> values to calculate the sum of.
            </param>
            <returns>
            An observable sequence containing a single element with the sum of the values
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Sum.Process(System.IObservable{System.Single})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Single"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Single"/> values to calculate the sum of.
            </param>
            <returns>
            An observable sequence containing a single element with the sum of the values
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Sum.Process(System.IObservable{System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int32"/> values to calculate the sum of.
            </param>
            <returns>
            An observable sequence containing a single element with the sum of the values
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Sum.Process(System.IObservable{System.Int32})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Int32"/> values to calculate the sum of.
            </param>
            <returns>
            An observable sequence containing a single element with the sum of the values
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Sum.Process(System.IObservable{System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">
            A sequence of nullable <see cref="T:System.Int64"/> values to calculate the sum of.
            </param>
            <returns>
            An observable sequence containing a single element with the sum of the values
            in the source sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Sum.Process(System.IObservable{System.Int64})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.Int64"/> values to calculate the sum of.
            </param>
            <returns>
            An observable sequence containing a single element with the sum of the values
            in the source sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.BooleanProperty">
            <summary>
            Represents a workflow property containing a Boolean value.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.DateTimeOffsetProperty">
            <summary>
            Represents a workflow property containing a timestamp in Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.DateTimeOffsetProperty.Generate">
            <summary>
            Generates an observable sequence that produces a value whenever the
            workflow property changes, starting with the initial property value.
            </summary>
            <returns>An observable sequence of property values.</returns>
        </member>
        <member name="M:Bonsai.Expressions.DateTimeOffsetProperty.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence that produces a value whenever the
            source sequence emits a new element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence used to generate new values.</param>
            <returns>An observable sequence of property values.</returns>
        </member>
        <member name="P:Bonsai.Expressions.DateTimeOffsetProperty.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.DateTimeOffsetProperty.ValueXml">
            <summary>
            Gets or sets an XML representation of the property value for serialization.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.DateTimeProperty">
            <summary>
            Represents a workflow property containing a date and time of day.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.FloatProperty">
            <summary>
            Represents a workflow property containing a single-precision floating-point number.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.IntProperty">
            <summary>
            Represents a workflow property containing a 32-bit signed integer.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.StringProperty">
            <summary>
            Represents a workflow property containing Unicode text.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.TimeSpanProperty">
            <summary>
            Represents a workflow property containing a time interval.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.TimeSpanProperty.Generate">
            <summary>
            Generates an observable sequence that produces a value whenever the
            workflow property changes, starting with the initial property value.
            </summary>
            <returns>An observable sequence of property values.</returns>
        </member>
        <member name="M:Bonsai.Expressions.TimeSpanProperty.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence that produces a value whenever the
            source sequence emits a new element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence used to generate new values.</param>
            <returns>An observable sequence of property values.</returns>
        </member>
        <member name="P:Bonsai.Expressions.TimeSpanProperty.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.TimeSpanProperty.ValueXml">
            <summary>
            Gets or sets an XML representation of the property value for serialization.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.Range">
            <summary>
            Represents an observable sequence of integral numbers within a specified range.
            </summary>
        </member>
        <member name="T:Bonsai.Source`1">
            <summary>
            Represents a generator of observable sequences of data elements.
            </summary>
            <typeparam name="TSource">The type of the elements emitted by the generator.</typeparam>
        </member>
        <member name="M:Bonsai.Source`1.Generate">
            <summary>
            Generates an observable sequence of data elements.
            </summary>
            <returns>
            An observable sequence of data elements of type <typeparamref name="TSource"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Range.Generate">
            <summary>
            Generates an observable sequence of integral numbers within a specified range.
            </summary>
            <returns>
            An observable sequence that contains a range of sequential integral numbers.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Range.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of integral numbers within a specified range
            whenever the source sequence emits a new element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence used to advance the range.</param>
            <returns>
            An observable sequence that contains a range of sequential integral numbers.
            </returns>
        </member>
        <member name="P:Bonsai.Reactive.Range.Start">
            <summary>
            Gets or sets the value of the first integer in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.Range.Count">
            <summary>
            Gets or sets the number of sequential integers to generate.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.IgnoreElements">
            <summary>
            Represents a combinator that ignores all elements in an observable sequence
            leaving only the termination messages.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.IgnoreElements.Process``1(System.IObservable{``0})">
            <summary>
            Ignores all elements in an observable sequence leaving only the termination messages.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>
            An empty observable sequence that signals termination, successful or exceptional,
            of the source sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.Distinct">
            <summary>
            Represents a combinator that returns an observable sequence containing only distinct elements.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Distinct.Process``1(System.IObservable{``0})">
            <summary>
            Returns an observable sequence containing only distinct elements.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An observable sequence to retain distinct elements for.</param>
            <returns>
            An observable sequence containing only the distinct elements from the source
            sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.Count">
            <summary>
            Represents a combinator that returns an observable sequence containing an integer
            representing the total number of elements in an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Count.Process``1(System.IObservable{``0})">
            <summary>
            Returns an observable sequence containing an integer representing the
            total number of elements in an observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An observable sequence that contains elements to be counted.</param>
            <returns>
            An observable sequence containing a single element with the number of elements
            in the source sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.Delay">
            <summary>
            Represents a combinator that delays the notifications of an observable sequence by
            the specified relative time duration.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Delay.Process``1(System.IObservable{``0})">
            <summary>
            Delays the notifications of an observable sequence by the specified
            relative time duration.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to delay values for.</param>
            <returns>The time-shifted sequence.</returns>
        </member>
        <member name="P:Bonsai.Reactive.Delay.DueTime">
            <summary>
            Gets or sets the time interval by which to delay the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.Delay.DueTimeXml">
            <summary>
            Gets or sets the XML serializable representation of due time.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.Repeat">
            <summary>
            Represents a combinator that repeats an observable sequence indefinitely.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Repeat.Process``1(System.IObservable{``0})">
            <summary>
            Repeats the observable sequence indefinitely.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The observable sequence to repeat.</param>
            <returns>
            The observable sequence producing the elements of the given sequence repeatedly
            and sequentially.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.RepeatCount">
            <summary>
            Represents a combinator that repeats an observable sequence a specified number of times.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.RepeatCount.Process``1(System.IObservable{``0})">
            <summary>
            Repeats the observable sequence a specified number of times.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The observable sequence to repeat.</param>
            <returns>
            The observable sequence producing the elements of the given sequence repeatedly.
            </returns>
        </member>
        <member name="P:Bonsai.Reactive.RepeatCount.Count">
            <summary>
            Gets or sets the number of times to repeat the sequence.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.Skip">
            <summary>
            Represents a combinator that bypasses the specified number of elements at the start
            of an observable sequence and returns the remaining elements.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Skip.Process``1(System.IObservable{``0})">
            <summary>
            Bypasses the specified number of elements at the start of an observable sequence
            and returns the remaining elements.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence to take elements from.</param>
            <returns>
            An observable sequence that contains the elements that occur after the specified
            index in the input sequence.
            </returns>
        </member>
        <member name="P:Bonsai.Reactive.Skip.Count">
            <summary>
            Gets or sets the number of elements to skip.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.SkipLast">
            <summary>
            Represents a combinator that bypasses the specified number of elements at the end
            of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.SkipLast.Process``1(System.IObservable{``0})">
            <summary>
            Bypasses the specified number of elements at the end of an observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence to take elements from.</param>
            <returns>
            An observable sequence containing the source sequence elements except for
            the bypassed ones at the end.
            </returns>
        </member>
        <member name="P:Bonsai.Reactive.SkipLast.Count">
            <summary>
            Gets or sets the number of elements to skip at the end of the sequence.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.SkipUntil">
            <summary>
            Represents a combinator that returnsthe elements from the source sequence only after the
            other sequence produces an element.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.SkipUntil.Process``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Returns the elements from the source observable sequence only after the other
            observable sequence produces an element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TOther">
            The type of the elements in the other sequence that indicates the end of the skip behavior.
            </typeparam>
            <param name="source">The source sequence to propagate elements for.</param>
            <param name="other">
            The observable sequence that triggers propagation of elements of the source sequence.
            </param>
            <returns>
            An observable sequence containing the elements of the source sequence starting
            from the point the other sequence triggered propagation.
            </returns>
        </member>
        <member name="T:Bonsai.ArrayConvert">
            <summary>
            Provides methods for converting between instances of the <see cref="T:System.Array"/> class
            and <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Bonsai.ArrayConvert.ToString(System.Array)">
            <summary>
            Converts the <see cref="T:System.Array"/> to a <see cref="T:System.String"/>.
            </summary>
            <param name="array">The <see cref="T:System.Array"/> to be converted.</param>
            <returns>
            A string representation of the <see cref="T:System.Array"/> using the system's
            current culture.
            </returns>
        </member>
        <member name="M:Bonsai.ArrayConvert.ToString(System.Array,System.IFormatProvider)">
            <summary>
            Converts the <see cref="T:System.Array"/> to a <see cref="T:System.String"/> using the specified
            culture-specific format information.
            </summary>
            <param name="array">The <see cref="T:System.Array"/> to be converted.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
            A string representation of the <see cref="T:System.Array"/> using the specified
            culture-specific format information.
            </returns>
        </member>
        <member name="M:Bonsai.ArrayConvert.ToArray(System.String,System.Int32,System.Type)">
            <summary>
            Converts the <see cref="T:System.String"/> to an <see cref="T:System.Array"/> equivalent with
            the specified <paramref name="rank"/> and <paramref name="elementType"/>.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="rank">The rank of the result array; can be either one- or two-dimensional.</param>
            <param name="elementType">The type of the elements in the array.</param>
            <returns>An <see cref="T:System.Array"/> equivalent of the string.</returns>
        </member>
        <member name="M:Bonsai.ArrayConvert.ToArray(System.String,System.Int32,System.Type,System.IFormatProvider)">
            <summary>
            Converts the <see cref="T:System.String"/> to an <see cref="T:System.Array"/> equivalent with
            the specified <paramref name="rank"/> and <paramref name="elementType"/> using
            a <paramref name="provider"/> of culture-specific formatting information.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="rank">The rank of the result array; can be either one- or two-dimensional.</param>
            <param name="elementType">The type of the elements in the array.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>An <see cref="T:System.Array"/> equivalent of the string.</returns>
        </member>
        <member name="T:Bonsai.Expressions.PropertyMappingCollection">
            <summary>
            Represents a collection of dynamic property mappings.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.PropertyMappingCollection.GetKeyForItem(Bonsai.Expressions.PropertyMapping)">
            <summary>
            Extracts the key from the specified property mapping.
            </summary>
            <param name="item">The property mapping from which to extract the key.</param>
            <returns>
            The key for the specified property mapping. The current key is the name of
            the property mapping.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.PropertyMapping">
            <summary>
            Represents a dynamic assignment between a selected input source and a property of
            a workflow element.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.PropertyMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.PropertyMapping"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.PropertyMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.PropertyMapping"/> class with
            the specified property name and source selector.
            </summary>
            <param name="name">
            The name of the property that will be assigned by this mapping.
            </param>
            <param name="selector">
            A string that will be used to select the input source that will assign
            values to this property mapping.
            </param>
        </member>
        <member name="P:Bonsai.Expressions.PropertyMapping.Name">
            <summary>
            Gets or sets the name of the property that will be assigned by this mapping.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.PropertyMapping.Selector">
            <summary>
            Gets or sets a string that will be used to select the input source that will assign
            values to this property mapping.
            </summary>
        </member>
        <member name="T:Bonsai.CombinatorAttribute">
            <summary>
            Specifies that a class provides a method that can combine one or more observable
            sequences into a new observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.CombinatorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.CombinatorAttribute"/> class using the
            default expression builder class.
            </summary>
        </member>
        <member name="M:Bonsai.CombinatorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.CombinatorAttribute"/> class using the
            specified expression builder class.
            </summary>
            <param name="builderType">
            The <see cref="T:System.Type"/> of the expression builder class used to build expressions
            from this combinator.
            </param>
        </member>
        <member name="M:Bonsai.CombinatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.CombinatorAttribute"/> class using the
            specified expression builder class.
            </summary>
            <param name="builderTypeName">
            The fully qualified name of the expression builder class used to build expressions
            from this combinator.
            </param>
        </member>
        <member name="P:Bonsai.CombinatorAttribute.MethodName">
            <summary>
            Gets or sets the name of the method that can combine one or more observable sequences into a
            new observable sequence.
            </summary>
        </member>
        <member name="P:Bonsai.CombinatorAttribute.ExpressionBuilderTypeName">
            <summary>
            Gets the fully qualified name of the expression builder class used to build expressions
            from this combinator.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.Timer">
            <summary>
            Represents an observable sequence that periodically produces a value after the
            specified initial relative due time has elapsed.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Timer.Generate">
            <summary>
            Returns an observable sequence that periodically produces a value after the
            specified initial relative due time has elapsed.
            </summary>
            <returns>
            An observable sequence that produces a value after due time has elapsed and
            then after each period.
            </returns>
        </member>
        <member name="P:Bonsai.Reactive.Timer.DueTime">
            <summary>
            Gets or sets the relative time at which to produce the first value. If this
            value is less than or equal to <see cref="F:System.TimeSpan.Zero"/>, the timer will
            fire as soon as possible.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.Timer.Period">
            <summary>
            Gets or sets the period to produce subsequent values. If this value is equal
            to <see cref="F:System.TimeSpan.Zero"/> the timer will recur as fast as possible.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.Timer.DueTimeXml">
            <summary>
            Gets or sets the XML serializable representation of the due time.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.Timer.PeriodXml">
            <summary>
            Gets or sets the XML serializable representation of the period.
            </summary>
        </member>
        <member name="T:Bonsai.SourceAttribute">
            <summary>
            Specifies that a class provides a parameterless method that can generate observable sequences.
            </summary>
        </member>
        <member name="M:Bonsai.SourceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.SourceAttribute"/> class with the
            default generator method name.
            </summary>
        </member>
        <member name="M:Bonsai.SourceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.SourceAttribute"/> class with the
            specified generator method name.
            </summary>
            <param name="methodName">
            The name of the parameterless method that can be used to generate
            observable sequences.
            </param>
        </member>
        <member name="P:Bonsai.SourceAttribute.MethodName">
            <summary>
            Gets the name of the parameterless method that can be used to generate
            observable sequences.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.UnitBuilder">
            <summary>
            Represents an expression builder that generates a sequence of <see cref="T:System.Reactive.Unit"/> elements.
            </summary>
            <remarks>
            This expression builder generates its elements by either returning the single default
            <see cref="T:System.Reactive.Unit"/> instance if no input sequence is provided; or applying a selector
            on the elements of the source sequence that will convert each input element into the
            default <see cref="T:System.Reactive.Unit"/> instance.
            </remarks>
        </member>
        <member name="M:Bonsai.Expressions.UnitBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Expressions.UnitBuilder.ArgumentRange">
            <summary>
            Gets the range of input arguments that this expression builder accepts.
            </summary>
        </member>
        <member name="T:Bonsai.Transform`2">
            <summary>
            Represents an operation on observable sequences which transforms every element of the source
            sequence into an element in the result sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
        </member>
        <member name="T:Bonsai.WindowCombinator">
            <summary>
            Represents a generic operation which projects each element of an observable sequence
            into a sequence of windows.
            </summary>
        </member>
        <member name="M:Bonsai.WindowCombinator.Process``1(System.IObservable{``0})">
            <summary>
            Projects each element of the <paramref name="source"/> sequence into a sequence of
            windows.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to produce windows over.</param>
            <returns>The sequence of windows.</returns>
        </member>
        <member name="T:Bonsai.Expressions.CombinatorBuilder">
            <summary>
            Represents an expression builder which uses a specified combinator instance
            to process one or more input observable sequences.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.CombinatorBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.CombinatorBuilder"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.CombinatorBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="M:Bonsai.Expressions.CombinatorBuilder.BuildCombinator(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node that will be combined with any
            existing property mappings to produce the final output of the expression builder.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>
            An <see cref="T:System.Linq.Expressions.Expression"/> tree node that represents the combinator output.
            </returns>
        </member>
        <member name="P:Bonsai.Expressions.CombinatorBuilder.Name">
            <summary>
            Gets the display name of the combinator.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.CombinatorBuilder.Combinator">
            <summary>
            Gets or sets the combinator instance used to process input
            observable sequences.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.Slice">
            <summary>
            Represents a combinator that extracts a range of elements from an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Slice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Reactive.Slice"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Slice.Process``1(System.IObservable{``0})">
            <summary>
            Extracts a range of elements from an observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to slice.</param>
            <returns>The sliced sequence.</returns>
        </member>
        <member name="P:Bonsai.Reactive.Slice.Start">
            <summary>
            Gets or sets the element index at which the slice begins.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.Slice.Step">
            <summary>
            Gets or sets the number of elements to skip between slice elements.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.Slice.Stop">
            <summary>
            Gets or sets the optional element index at which the slice ends.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.WindowWorkflowBuilder">
            <summary>
            Represents an expression builder that generates an expression tree by applying
            an encapsulated workflow selector to the elements of an observable sequence of windows.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.WindowWorkflowBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.WindowWorkflowBuilder"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.WindowWorkflowBuilder.#ctor(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.WindowWorkflowBuilder"/> class
            with the specified expression builder workflow.
            </summary>
            <param name="workflow">
            The expression builder workflow instance that will be used by this builder
            to generate the output expression tree.
            </param>
        </member>
        <member name="M:Bonsai.Expressions.WindowWorkflowBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="T:Bonsai.UnidimensionalArrayConverter">
            <summary>
            Provides a type converter to convert one-dimensional <see cref="T:System.Array"/> objects
            to and from various other representations.
            </summary>
        </member>
        <member name="M:Bonsai.UnidimensionalArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to
            the type of this converter, using the specified context.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the type you want to convert from.
            </param>
            <returns>
            <b>true</b> if this converter can perform the conversion; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.UnidimensionalArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="M:Bonsai.UnidimensionalArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
            context and culture information.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If <b>null</b> is passed, the current culture
            is assumed.
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="T:Bonsai.ExpressionHelper">
            <summary>
            Provides a set of static methods to manipulate expression trees.
            </summary>
        </member>
        <member name="F:Bonsai.ExpressionHelper.MemberSeparator">
            <summary>
            Represents the character separating class members in a member selector
            <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:Bonsai.ExpressionHelper.ArgumentSeparator">
            <summary>
            Represents the character separating selected members in a member selector
            <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Bonsai.ExpressionHelper.IsEnumerableType(System.Type)">
            <summary>
            Tests whether the specified type implements the generic enumerable interface.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to test.</param>
            <returns>
            <b>true</b> if the type implements the generic enumerable interface;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.ExpressionHelper.SelectMemberNames(System.String)">
            <summary>
            Extracts the set of member accessor paths from a composite selector string.
            </summary>
            <param name="selector">
            The comma-separated selector string used to extract multiple members.
            </param>
            <returns>
            An enumerator of the set of member accessor paths extracted from
            the composite selector string.
            </returns>
        </member>
        <member name="M:Bonsai.ExpressionHelper.MemberAccess(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> representing a chained access to a member
            variable.
            </summary>
            <param name="instance">The object to which the member chain belongs.</param>
            <param name="memberPath">
            The path to an inner member variable, separated by a dot. Indexed accessors
            are also allowed.
            </param>
            <returns>The created <see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:Bonsai.ExpressionHelper.Parse(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> representing the result of parsing
            a string with the specified pattern.
            </summary>
            <param name="expression">
            An <see cref="T:System.Linq.Expressions.Expression"/> that represents the string to parse.
            </param>
            <param name="pattern">
            The parse pattern to match, including conversion specifications
            for the different output data types.
            </param>
            <returns>
            An <see cref="T:System.Linq.Expressions.Expression"/> that represents the result of parsing
            the specified string.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.WorkflowOutputBuilder">
            <summary>
            Represents the expression that is used as the output of an encapsulated workflow.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.WorkflowOutputBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Returns the single output expression specified in <paramref name="arguments"/>.
            </summary>
            <returns>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            An <see cref="T:System.Linq.Expressions.Expression"/> that will be used as the output of an
            encapsulated workflow.
            </returns>
        </member>
        <member name="T:Bonsai.MultidimensionalArrayConverter">
            <summary>
            Provides a type converter to convert two-dimensional <see cref="T:System.Array"/> objects
            to and from various other representations.
            </summary>
        </member>
        <member name="M:Bonsai.MultidimensionalArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to
            the type of this converter, using the specified context.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the type you want to convert from.
            </param>
            <returns>
            <b>true</b> if this converter can perform the conversion; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.MultidimensionalArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="M:Bonsai.MultidimensionalArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
            context and culture information.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If <b>null</b> is passed, the current culture
            is assumed.
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="T:Bonsai.WorkflowElementCategoryAttribute">
            <summary>
            Determines the category of the workflow element this attribute is bound to.
            </summary>
        </member>
        <member name="F:Bonsai.WorkflowElementCategoryAttribute.Default">
            <summary>
            Specifies the default value for the <see cref="T:Bonsai.WorkflowElementCategoryAttribute"/>. This field is read-only.
            </summary>
        </member>
        <member name="M:Bonsai.WorkflowElementCategoryAttribute.#ctor(Bonsai.ElementCategory)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowElementCategoryAttribute"/> class with
            the specified category.
            </summary>
            <param name="category">The category of the workflow element this attribute is bound to.</param>
        </member>
        <member name="P:Bonsai.WorkflowElementCategoryAttribute.Category">
            <summary>
            Gets the category of the workflow element this attribute is bound to.
            </summary>
        </member>
        <member name="T:Bonsai.WorkflowRuntimeException">
            <summary>
            Represents errors that occur during the execution of an expression builder workflow.
            </summary>
        </member>
        <member name="T:Bonsai.WorkflowException">
            <summary>
            Represents errors that occur in expression builder workflows.
            </summary>
        </member>
        <member name="M:Bonsai.WorkflowException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowException"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.WorkflowException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowException"/> class with
            a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Bonsai.WorkflowException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowException"/> class with
            a specified error message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Bonsai.WorkflowException.#ctor(System.String,Bonsai.Expressions.ExpressionBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowException"/> class with
            a specified error message and a reference to the <see cref="T:Bonsai.Expressions.ExpressionBuilder"/>
            that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="builder">
            The <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> that is the cause of the current exception, or
            a null reference (Nothing in Visual Basic) if no builder is specified.
            </param>
        </member>
        <member name="M:Bonsai.WorkflowException.#ctor(System.String,Bonsai.Expressions.ExpressionBuilder,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowException"/> class with a
            specified error message and a reference to both the <see cref="T:Bonsai.Expressions.ExpressionBuilder"/>
            and the inner exception that caused this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="builder">
            The <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> that is the cause of the current exception, or
            a null reference (Nothing in Visual Basic) if no builder is specified.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Bonsai.WorkflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowException"/> class with
            serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about
            the source or destination.
            </param>
        </member>
        <member name="P:Bonsai.WorkflowException.Builder">
            <summary>
            Gets the <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> instance that was the cause for the exception.
            </summary>
        </member>
        <member name="M:Bonsai.WorkflowRuntimeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowRuntimeException"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.WorkflowRuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowRuntimeException"/> class with
            a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Bonsai.WorkflowRuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowRuntimeException"/> class with
            a specified error message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Bonsai.WorkflowRuntimeException.#ctor(System.String,Bonsai.Expressions.ExpressionBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowRuntimeException"/> class with
            a specified error message and a reference to the <see cref="T:Bonsai.Expressions.ExpressionBuilder"/>
            that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="builder">
            The <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> that is the cause of the current exception, or
            a null reference (Nothing in Visual Basic) if no builder is specified.
            </param>
        </member>
        <member name="M:Bonsai.WorkflowRuntimeException.#ctor(System.String,Bonsai.Expressions.ExpressionBuilder,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowRuntimeException"/> class with a
            specified error message and a reference to both the <see cref="T:Bonsai.Expressions.ExpressionBuilder"/>
            and the inner exception that caused this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="builder">
            The <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> that is the cause of the current exception, or
            a null reference (Nothing in Visual Basic) if no builder is specified.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Bonsai.WorkflowRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowRuntimeException"/> class with
            serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about
            the source or destination.
            </param>
        </member>
        <member name="T:Bonsai.Reactive.CombineTimestamp">
            <summary>
            Represents a combinator that converts element-timestamp tuples of an observable
            sequence into proper timestamped elements.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.CombineTimestamp.Process``1(System.IObservable{System.Tuple{``0,System.DateTimeOffset}})">
            <summary>
            Converts element-timestamp tuples of an observable sequence into proper
            timestamped elements.
            </summary>
            <typeparam name="TSource">
            The type of values in the tuple elements of the source sequence.
            </typeparam>
            <param name="source">The sequence of element-timestamp tuples.</param>
            <returns>An observable sequence of timestamped values.</returns>
        </member>
        <member name="T:Bonsai.Reactive.TriggeredWindow">
            <summary>
            Represents a combinator that projects each element of an observable sequence into zero
            or more windows aligned on an external trigger.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.TriggeredWindow.Process``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Projects each element of an observable sequence into zero or more windows.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TWindowOpening">
            The type of the elements in the sequence indicating window opening events.
            </typeparam>
            <param name="source">The source sequence to produce windows over.</param>
            <param name="windowOpenings">
            The sequence of window opening events. If no maximum length is specified, the current
            window is closed and a new window is opened upon receiving a window opening event.
            </param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="P:Bonsai.Reactive.TriggeredWindow.TimeSpan">
            <summary>
            Gets or sets the time length of each window. If it is not specified, the window will have
            its length set by either a maximum number of elements or an external trigger boundary.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.TriggeredWindow.Count">
            <summary>
            Gets or sets the maximum number of elements in each window. If it is not specified, the
            window will have its length set by the optional time span or by an external trigger boundary.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.TriggeredWindow.TimeSpanXml">
            <summary>
            Gets or sets the XML serializable representation of window time span.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.ElementCountWindow">
            <summary>
            Represents a combinator that projects each element of an observable sequence into zero
            or more windows based on element count information.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.ElementCountWindow.Process``1(System.IObservable{``0})">
            <summary>
            Projects each element of an observable sequence into zero or more windows
            based on element count information.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to produce windows over.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="P:Bonsai.Reactive.ElementCountWindow.Count">
            <summary>
            Gets or sets the maximum number of elements in each window.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.ElementCountWindow.Skip">
            <summary>
            Gets or sets the number of elements to skip between the creation of each window.
            If it is not specified, <see cref="P:Bonsai.Reactive.ElementCountWindow.Skip"/> will be equal to <see cref="P:Bonsai.Reactive.ElementCountWindow.Count"/>
            in order to generate consecutive non-overlapping windows.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.Merge">
            <summary>
            Represents a combinator that merges any number of observable sequences into a
            single observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Merge.Process``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Merges elements from two observable sequences into a single observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the first sequence.</typeparam>
            <param name="first">The first observable sequence.</param>
            <param name="second">The second observable sequence.</param>
            <returns>The observable sequence that merges the elements of the two sequences.</returns>
        </member>
        <member name="M:Bonsai.Reactive.Merge.Process``1(System.IObservable{``0},System.IObservable{``0},System.IObservable{``0}[])">
            <summary>
            Merges elements from the specified observable sequences into a single observable
            sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="first">The first observable sequence.</param>
            <param name="second">The second observable sequence.</param>
            <param name="remainder">The remaining observable sequences to merge.</param>
            <returns>The observable sequence that merges the elements of the observable sequences.</returns>
        </member>
        <member name="M:Bonsai.Reactive.Merge.Process``1(System.IObservable{System.IObservable{``0}})">
            <summary>
            Merges elements from all inner observable sequences into a single observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="sources">The observable sequence of inner observable sequences.</param>
            <returns>The observable sequence that merges the elements of the inner sequences.</returns>
        </member>
        <member name="T:Bonsai.Expressions.NestedWorkflowBuilder">
            <summary>
            Represents an expression builder that generates an expression tree using a nested
            expression builder workflow.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.NestedWorkflowBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.NestedWorkflowBuilder"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.NestedWorkflowBuilder.#ctor(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.NestedWorkflowBuilder"/> class
            with the specified expression builder workflow.
            </summary>
            <param name="workflow">
            The expression builder workflow instance that will be used by this builder
            to generate the output expression tree.
            </param>
        </member>
        <member name="M:Bonsai.Expressions.NestedWorkflowBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="T:Bonsai.Expressions.SelectManyBuilder">
            <summary>
            Represents an expression builder that generates an expression tree by applying the
            SelectMany operator using an encapsulated workflow selector to an observable sequence
            of windows.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.SelectManyBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.SelectManyBuilder"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.SelectManyBuilder.#ctor(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.SelectManyBuilder"/> class
            with the specified expression builder workflow.
            </summary>
            <param name="workflow">
            The expression builder workflow instance that will be used by this builder
            to generate the output expression tree.
            </param>
        </member>
        <member name="M:Bonsai.Expressions.SelectManyBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="T:Bonsai.Reactive.SubscribeWhen">
            <summary>
            Represents a combinator that subscribes to an observable sequence only after the second
            sequence produces an element.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.SubscribeWhen.Process``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Subscribes to an observable sequence only after the second sequence
            produces an element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TOther">
            The type of the elements in the other sequence that indicates the start of
            subscription to the first sequence.
            </typeparam>
            <param name="source">The sequence to subscribe to.</param>
            <param name="other">
            The observable sequence that initiates subscription to the source sequence.
            </param>
            <returns>
            An observable sequence that propagates elements of the source sequence but where
            subscription is delayed until a second sequence produces an element.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.TakeLast">
            <summary>
            Represents a combinator that returns a specified number of contiguous elements
            from the end of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.TakeLast.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Reactive.TakeLast"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.TakeLast.Process``1(System.IObservable{``0})">
            <summary>
            Returns a specified number of contiguous elements from the end of an observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence to take elements from.</param>
            <returns>
            An observable sequence containing the specified number of elements from the
            end of the source sequence.
            </returns>
        </member>
        <member name="P:Bonsai.Reactive.TakeLast.Count">
            <summary>
            Gets or sets the number of elements to take from the end of the sequence.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.ExpressionBuilderGraphDescriptor">
            <summary>
            Represents a serializable descriptor of the nodes and edges in an expression builder graph.
            </summary>
        </member>
        <member name="T:Bonsai.Dag.DirectedGraphDescriptor`2">
            <summary>
            Represents a serializable descriptor of the nodes and edges in a directed graph.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
        </member>
        <member name="P:Bonsai.Dag.DirectedGraphDescriptor`2.Nodes">
            <summary>
            Gets the collection of labels associated with each node in the directed graph.
            </summary>
        </member>
        <member name="P:Bonsai.Dag.DirectedGraphDescriptor`2.Edges">
            <summary>
            Gets a collection of descriptors corresponding to each edge in the directed graph.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.Take">
            <summary>
            Represents a combinator that returns the specified number of contiguous elements
            from the start of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Take.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Reactive.Take"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Take.Process``1(System.IObservable{``0})">
            <summary>
            Returns the specified number of contiguous elements from the start of an
            observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence to take elements from.</param>
            <returns>
            An observable sequence that contains the specified number of elements from
            the start of the input sequence.
            </returns>
        </member>
        <member name="P:Bonsai.Reactive.Take.Count">
            <summary>
            Gets or sets the number of elements to take.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.TimedGate">
            <summary>
            Represents a combinator that takes the single next element from the sequence if this
            element is produced within a specified time interval after the gate produces an element.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.TimedGate.Process``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Takes the single next element from the sequence if this element is produced
            within a specified time interval after the gate produces an element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TOther">The type of the elements in the sequence of gate events.</typeparam>
            <param name="source">The observable sequence to be gated.</param>
            <param name="other">
            The sequence of gate events. Every time a new gate event is received, the single
            next element from <paramref name="source"/> is allowed to propagate if it is
            produced before the maximum <see cref="P:Bonsai.Reactive.TimedGate.TimeSpan"/> elapses.
            </param>
            <returns>The gated observable sequence.</returns>
        </member>
        <member name="P:Bonsai.Reactive.TimedGate.TimeSpan">
            <summary>
            Gets or sets the maximum interval that can elapse after a gate event
            for a source element to be propagated.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.TimedGate.TimeSpanXml">
            <summary>
            Gets or sets the XML serializable representation of the maximum gate time span.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.GateInterval">
            <summary>
            Represents a combinator that takes the single next element from the sequence every
            time the specified interval elapses.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.GateInterval.Process``1(System.IObservable{``0})">
            <summary>
            Takes the single next element from the sequence every time the specified
            interval elapses.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The observable sequence to be gated.</param>
            <returns>The gated observable sequence.</returns>
        </member>
        <member name="P:Bonsai.Reactive.GateInterval.Interval">
            <summary>
            Gets or sets the time interval after which a new element of the sequence is allowed to propagate.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.GateInterval.IntervalXml">
            <summary>
            Gets or sets the XML serializable representation of the interval.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.Gate">
            <summary>
            Represents a combinator that takes the single next element from the sequence every
            time the trigger produces an element.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Gate.Process``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Takes the single next element from the sequence every time the trigger
            produces an element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TOther">The type of the elements in the sequence of gate events.</typeparam>
            <param name="source">The observable sequence to be gated.</param>
            <param name="other">
            The sequence of gate events. Every time a new gate event is received, the single
            next element from <paramref name="source"/> is allowed to propagate.
            </param>
            <returns>The gated observable sequence.</returns>
        </member>
        <member name="T:Bonsai.Reactive.TimeSpanWindow">
            <summary>
            Represents a combinator that projects each element of an observable sequence into zero
            or more windows based on timing information.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.TimeSpanWindow.Process``1(System.IObservable{``0})">
            <summary>
            Projects each element of an observable sequence into zero or more windows
            based on timing information.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to produce windows over.</param>
            <returns>An observable sequence of windows.</returns>
        </member>
        <member name="P:Bonsai.Reactive.TimeSpanWindow.TimeSpan">
            <summary>
            Gets or sets the length of each window.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.TimeSpanWindow.TimeShift">
            <summary>
            Gets or sets the interval between creation of consecutive windows.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.TimeSpanWindow.TimeSpanXml">
            <summary>
            Gets or sets the XML serializable representation of window time span.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.TimeSpanWindow.TimeShiftXml">
            <summary>
            Gets or sets the XML serializable representation of window interval.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.WorkflowInputBuilder">
            <summary>
            Represents the expression that is used as the input source of an encapsulated workflow.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.WorkflowInputBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Returns the source input expression specified in <see cref="P:Bonsai.Expressions.WorkflowInputBuilder.Source"/>.
            </summary>
            <returns>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            An <see cref="T:System.Linq.Expressions.Expression"/> that will be used as the source of an
            encapsulated workflow.
            </returns>
        </member>
        <member name="P:Bonsai.Expressions.WorkflowInputBuilder.Index">
            <summary>
            Gets or sets the zero-based index of the input parameter.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.WorkflowInputBuilder.Name">
            <summary>
            Gets or sets the name of the input parameter. Arbitrary named arguments are not supported, so all
            names must start with the <see cref="F:Bonsai.Expressions.ExpressionBuilderArgument.ArgumentNamePrefix"/> followed by the one-based
            argument index.
            </summary>
        </member>
        <member name="T:Bonsai.FileNameFilterAttribute">
            <summary>
            Specifies the file name filter which determines the choices that appear in the file type
            selection box of a file dialog.
            </summary>
        </member>
        <member name="M:Bonsai.FileNameFilterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.FileNameFilterAttribute"/> class with
            the specified file name filter.
            </summary>
            <param name="filter">
            The file name filter string which determines the choices that appear in the file type
            selection box of a file dialog.
            </param>
        </member>
        <member name="P:Bonsai.FileNameFilterAttribute.Filter">
            <summary>
            Gets the file name filter string used to determine the choices in the file type
            selection box of a file dialog.
            </summary>
        </member>
        <member name="T:Bonsai.HighResolutionScheduler">
            <summary>
            Provides a set of static properties to access schedulers that use the
            <see cref="T:System.Diagnostics.Stopwatch"/> class for generating timestamps.
            </summary>
        </member>
        <member name="P:Bonsai.HighResolutionScheduler.Now">
            <summary>
            Gets the current time according to the timer used by the <see cref="T:System.Diagnostics.Stopwatch"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.HighResolutionScheduler.Default">
            <summary>
            Gets a scheduler that schedules work on the platform's default scheduler
            but provides high resolution timestamps.
            </summary>
        </member>
        <member name="T:Bonsai.ObservableCombinators">
            <summary>
            Provides a set of static methods to aid in writing queries over observable sequences.
            </summary>
        </member>
        <member name="M:Bonsai.ObservableCombinators.GenerateWithThread``1(System.Action{System.IObserver{``0}})">
            <summary>
            Generates a new observable sequence by starting a new <see cref="T:System.Threading.Thread"/> that
            applies the specified action on subscribed observers in a loop which recurs as
            fast as possible.
            </summary>
            <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
            <param name="generator">
            The action that will be applied to an observer every time the generator
            completes a loop.
            </param>
            <returns>A new observable sequence which notifies observers in a loop.</returns>
        </member>
        <member name="M:Bonsai.ObservableCombinators.Gate``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Takes the single next element from the sequence every time the specified
            interval elapses.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The observable sequence to be gated.</param>
            <param name="interval">
            The time interval after which a new element of the sequence is allowed to propagate.
            </param>
            <returns>The gated observable sequence.</returns>
        </member>
        <member name="M:Bonsai.ObservableCombinators.Gate``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Takes the single next element from the sequence every time the specified
            interval elapses, using the specified scheduler to run gating timers.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The observable sequence to be gated.</param>
            <param name="interval">
            The time interval after which a new element of the sequence is allowed to propagate.
            </param>
            <param name="scheduler">The scheduler to run the gating timer on.</param>
            <returns>The gated observable sequence.</returns>
        </member>
        <member name="M:Bonsai.ObservableCombinators.Gate``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Takes the single next element from the sequence every time the gate
            produces an element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TGate">The type of the elements in the sequence of gate events.</typeparam>
            <param name="source">The observable sequence to be gated.</param>
            <param name="gate">
            The sequence of gate events. Every time a new gate event is received, the single
            next element from <paramref name="source"/> is allowed to propagate.
            </param>
            <returns>The gated observable sequence.</returns>
        </member>
        <member name="M:Bonsai.ObservableCombinators.Gate``2(System.IObservable{``0},System.IObservable{``1},System.TimeSpan)">
            <summary>
            Takes the single next element from the sequence if this element is produced
            within a specified time interval after the gate produces an element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TGate">The type of the elements in the sequence of gate events.</typeparam>
            <param name="source">The observable sequence to be gated.</param>
            <param name="gate">
            The sequence of gate events. Every time a new gate event is received, the single
            next element from <paramref name="source"/> is allowed to propagate if it is
            produced before the maximum <paramref name="timeSpan"/> elapses.
            </param>
            <param name="timeSpan">
            After receiving a gate event, the maximum interval that can elapse before an
            element from the source sequence is produced. If the element arrives after the
            interval elapsed, it is dropped.
            </param>
            <returns>The gated observable sequence.</returns>
        </member>
        <member name="M:Bonsai.ObservableCombinators.Gate``2(System.IObservable{``0},System.IObservable{``1},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Takes the single next element from the sequence if this element is produced
            within a specified time interval after the gate produces an element, using
            the specified scheduler to run gate closing timers.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TGate">The type of the elements in the sequence of gate events.</typeparam>
            <param name="source">The observable sequence to be gated.</param>
            <param name="gate">
            The sequence of gate events. Every time a new gate event is received, the single
            next element from <paramref name="source"/> is allowed to propagate if it is
            produced before the maximum <paramref name="timeSpan"/> elapses.
            </param>
            <param name="timeSpan">
            After receiving a gate event, the maximum interval that can elapse before an
            element from the source sequence is produced. If the element arrives after the
            interval elapsed, it is dropped.
            </param>
            <param name="scheduler">The scheduler to run the gate closing timer on.</param>
            <returns>The gated observable sequence.</returns>
        </member>
        <member name="M:Bonsai.ObservableCombinators.Gate``3(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2})">
            <summary>
            Takes the single next element from the sequence if this element is produced
            between a gate opening and gate closing event.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TGateOpening">The type of the elements in the sequence of gate opening events.</typeparam>
            <typeparam name="TGateClosing">The type of the elements in the sequence of gate closing events.</typeparam>
            <param name="source">The observable sequence to be gated.</param>
            <param name="openGate">
            The sequence of gate opening events. Every time a new gate event is received,
            the single next element from <paramref name="source"/> is allowed to propagate
            if it is produced before the next gate closing event.
            </param>
            <param name="closeGate">
            The sequence of gate closing events. Every time a new gate event is received,
            the single next element from <paramref name="source"/> is allowed to propagate
            if it is produced before the next gate closing event.
            </param>
            <returns>The gated observable sequence.</returns>
        </member>
        <member name="M:Bonsai.ObservableCombinators.Multicast``2(System.IObservable{``0},System.Func{System.Reactive.Subjects.ISubject{``0,``1}})">
            <summary>
            Returns a connectable observable sequence that upon connection causes the <paramref name="source"/>
            to push results into a new fresh subject, which is created by invoking the specified
            <paramref name="subjectFactory"/>.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
            <param name="source">The source sequence whose elements will be pushed into the specified subject.</param>
            <param name="subjectFactory">
            The factory function used to create the subject that notifications will be pushed into.
            </param>
            <returns>The reconnectable sequence.</returns>
        </member>
        <member name="M:Bonsai.ObservableCombinators.PublishReconnectable``1(System.IObservable{``0})">
            <summary>
            Returns a connectable observable sequence that upon connection causes the <paramref name="source"/>
            to push results into a new fresh <see cref="T:System.Reactive.Subjects.Subject`1"/>.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence whose elements will be pushed into the specified subject.</param>
            <returns>The reconnectable sequence.</returns>
        </member>
        <member name="M:Bonsai.ObservableCombinators.Zip``3(System.IObservable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges an observable sequence and an enumerable sequence into one observable sequence
            by using the selector function.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first observable source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second observable source sequence.</typeparam>
            <typeparam name="TResult">
            The type of the elements in the result sequence, returned by the selector function.
            </typeparam>
            <param name="first">The first observable source.</param>
            <param name="second">The second enumerable source.</param>
            <param name="resultSelector">
            The function to invoke for each consecutive pair of elements from the first and second source.
            </param>
            <returns>
            An observable sequence containing the result of pairwise combining the elements
            of the first and second source using the specified result selector function.
            </returns>
        </member>
        <member name="T:Bonsai.Dag.DirectedGraph`2">
            <summary>
            Represents a directed graph that consists of labeled nodes and edges.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraph`2.Add(`0)">
            <summary>
            Creates and adds a new node with the specified <paramref name="value"/> to the
            <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </summary>
            <param name="value">The value of the node label.</param>
            <returns>A newly created <see cref="T:Bonsai.Dag.Node`2{T,U}"/> instance.</returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraph`2.Add(Bonsai.Dag.Node{`0,`1})">
            <summary>
            Adds a node to the <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </summary>
            <param name="node">
            The node to be added to the <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </param>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraph`2.AddEdge(Bonsai.Dag.Node{`0,`1},Bonsai.Dag.Node{`0,`1},`1)">
            <summary>
            Creates and adds a new labeled edge linking the specified nodes in the
            <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </summary>
            <param name="from">The node that is the source of the edge.</param>
            <param name="to">The node that is the target of the edge.</param>
            <param name="label">The value of the edge label.</param>
            <returns>A newly created <see cref="T:Bonsai.Dag.Edge`2{T,U}"/> instance.</returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraph`2.AddEdge(Bonsai.Dag.Node{`0,`1},Bonsai.Dag.Edge{`0,`1})">
            <summary>
            Adds a labeled outgoing edge from the specified node in the
            <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </summary>
            <param name="from">The node that is the source of the edge.</param>
            <param name="edge">
            The labeled outgoing edge to be added to the <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </param>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraph`2.InsertEdge(Bonsai.Dag.Node{`0,`1},System.Int32,Bonsai.Dag.Node{`0,`1},`1)">
            <summary>
            Creates and inserts a labeled outgoing edge of the source node at the specified index.
            </summary>
            <param name="from">The node that is the source of the edge.</param>
            <param name="edgeIndex">
            The zero-based index at which the edge should be inserted on the successor list
            of the <paramref name="from"/> node.
            </param>
            <param name="to">The node that is the target of the edge.</param>
            <param name="label">The value of the edge label.</param>
            <returns>A newly created <see cref="T:Bonsai.Dag.Edge`2{T,U}"/> instance.</returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraph`2.InsertEdge(Bonsai.Dag.Node{`0,`1},System.Int32,Bonsai.Dag.Edge{`0,`1})">
            <summary>
            Inserts a labeled outgoing edge of a source node at the specified index.
            </summary>
            <param name="from">The node that is the source of the edge.</param>
            <param name="edgeIndex">
            The zero-based index at which the edge should be inserted on the successor list
            of the <paramref name="from"/> node.
            </param>
            <param name="edge">
            The labeled outgoing edge that is to be inserted at the specified index on the successor
            list of the <paramref name="from"/> node.
            </param>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraph`2.SetEdge(Bonsai.Dag.Node{`0,`1},System.Int32,Bonsai.Dag.Node{`0,`1},`1)">
            <summary>
            Creates and replaces a labeled outgoing edge of the source node at the specified index.
            </summary>
            <param name="from">The node that is the source of the edge.</param>
            <param name="edgeIndex">
            The zero-based index of the edge to replace on the successor list
            of the <paramref name="from"/> node.
            </param>
            <param name="to">The node that is the target of the edge.</param>
            <param name="label">The value of the edge label.</param>
            <returns>A newly created <see cref="T:Bonsai.Dag.Edge`2{T,U}"/> instance.</returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraph`2.SetEdge(Bonsai.Dag.Node{`0,`1},System.Int32,Bonsai.Dag.Edge{`0,`1})">
            <summary>
            Replaces a labeled outgoing edge of a source node at the specified index.
            </summary>
            <param name="from">The node that is the source of the edge.</param>
            <param name="edgeIndex">
            The zero-based index of the edge to replace on the successor list
            of the <paramref name="from"/> node.
            </param>
            <param name="edge">
            The labeled outgoing edge that is to be set at the specified index on the successor
            list of the <paramref name="from"/> node.
            </param>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraph`2.Contains(Bonsai.Dag.Node{`0,`1})">
            <summary>
            Determines whether a node is in the <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </summary>
            <param name="node">The node to locate in the <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.</param>
            <returns>
            <b>true</b> if <paramref name="node"/> is found in the <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraph`2.Remove(Bonsai.Dag.Node{`0,`1})">
            <summary>
            Removes the specified node from the <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </summary>
            <param name="node">The node to remove from the <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.</param>
            <returns>
            <b>true</b> if <paramref name="node"/> is successfully removed; otherwise, <b>false</b>.
            This method also returns <b>false</b> if <paramref name="node"/> was not found in the
            <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraph`2.RemoveEdge(Bonsai.Dag.Node{`0,`1},Bonsai.Dag.Edge{`0,`1})">
            <summary>
            Removes the specified edge from the <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </summary>
            <param name="from">The node that is the source of the edge.</param>
            <param name="edge">
            The outgoing edge to remove from the <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </param>
            <returns>
            <b>true</b> if <paramref name="edge"/> is successfully removed; otherwise, <b>false</b>.
            This method also returns <b>false</b> if <paramref name="edge"/> was not found in the
            <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraph`2.Clear">
            <summary>
            Removes all nodes and corresponding edges from the
            <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </summary>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraph`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the nodes in the
            <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1{T}"/> of
            <see cref="T:Bonsai.Dag.Node`2{T,U}"/> for the directed graph.
            </returns>
        </member>
        <member name="P:Bonsai.Dag.DirectedGraph`2.Count">
            <summary>
            Gets the number of nodes in the <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </summary>
        </member>
        <member name="T:Bonsai.Dag.DirectedGraphExtensions">
            <summary>
            Provides a set of static methods for searching, sorting and manipulating directed graphs.
            </summary>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraphExtensions.Predecessors``2(Bonsai.Dag.DirectedGraph{``0,``1},Bonsai.Dag.Node{``0,``1})">
            <summary>
            Returns the sequence of predecessors to the specified node.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="source">The source directed graph to search for predecessors.</param>
            <param name="node">The node for which to obtain the sequence of predecessors.</param>
            <returns>
            A sequence of <see cref="T:Bonsai.Dag.Node`2{T,U}"/> that contains all the predecessors
            to the specified node.
            </returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraphExtensions.PredecessorEdges``2(Bonsai.Dag.DirectedGraph{``0,``1},Bonsai.Dag.Node{``0,``1})">
            <summary>
            Returns the sequence of predecessor edges to the specified node.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="source">The source directed graph to search for predecessors.</param>
            <param name="node">The node for which to obtain the sequence of predecessors.</param>
            <returns>
            A sequence of triples containing the predecessor node, the edge linking the predecessor
            to the specified node and the edge index.
            </returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraphExtensions.Successors``2(Bonsai.Dag.DirectedGraph{``0,``1},Bonsai.Dag.Node{``0,``1})">
            <summary>
            Returns the sequence of successors to the specified node.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="source">The source directed graph to search for successors.</param>
            <param name="node">The node for which to obtain the sequence of successors.</param>
            <returns>
            A sequence of <see cref="T:Bonsai.Dag.Node`2{T,U}"/> that contains all the successors
            to the specified node.
            </returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraphExtensions.Sources``2(Bonsai.Dag.DirectedGraph{``0,``1})">
            <summary>
            Returns the sequence of all the nodes in the directed graph that have zero incoming edges.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="source">The directed graph to search for sources.</param>
            <returns>
            A sequence of <see cref="T:Bonsai.Dag.Node`2{T,U}"/> that contains all the nodes in the
            directed graph that have zero incoming edges.
            </returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraphExtensions.Sinks``2(Bonsai.Dag.DirectedGraph{``0,``1})">
            <summary>
            Returns the sequence of all the nodes in the directed graph that have zero outgoing edges.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="source">The directed graph to search for sinks.</param>
            <returns>
            A sequence of <see cref="T:Bonsai.Dag.Node`2{T,U}"/> that contains all the nodes in the
            directed graph that have zero outgoing edges.
            </returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraphExtensions.DepthFirstSearch``2(Bonsai.Dag.Node{``0,``1})">
            <summary>
            Traverses through all the directed graph nodes in depth-first order, starting from
            the specified node.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="node">The node from which to start the search.</param>
            <returns>
            A sequence of <see cref="T:Bonsai.Dag.Node`2{T,U}"/> that contains the set of all nodes
            reachable from <paramref name="node"/> in depth-first order.
            </returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraphExtensions.DepthFirstSearch``2(Bonsai.Dag.DirectedGraph{``0,``1})">
            <summary>
            Traverses through all the directed graph nodes in depth-first order.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="source">The source directed graph that will be traversed.</param>
            <returns>
            A sequence of <see cref="T:Bonsai.Dag.Node`2{T,U}"/> that contains the set of all
            graph nodes in depth-first order.
            </returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraphExtensions.TopologicalSort``2(Bonsai.Dag.DirectedGraph{``0,``1})">
            <summary>
            Traverses through all the directed graph nodes in such a way as to guarantee that for
            every node in the sequence, all its predecessors have been visited first.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="source">The source directed graph that will be traversed.</param>
            <returns>
            A sequence of <see cref="T:Bonsai.Dag.Node`2{T,U}"/> that contains the set of all
            graph nodes in topological sort order.
            </returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraphExtensions.Acyclic``2(Bonsai.Dag.DirectedGraph{``0,``1})">
            <summary>
            Determines whether a directed graph is acyclic.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="source">The source directed graph to test.</param>
            <returns>
            <b>true</b> if <paramref name="source"/> has no cycles; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraphExtensions.ToDescriptor``2(Bonsai.Dag.DirectedGraph{``0,``1})">
            <summary>
            Creates a serializable descriptor from a <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="source">A <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/> to create a descriptor from.</param>
            <returns>A serializable descriptor that contains all the node and edge label values.</returns>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraphExtensions.ToDescriptor``2(Bonsai.Dag.DirectedGraph{``0,``1},Bonsai.Dag.DirectedGraphDescriptor{``0,``1})">
            <summary>
            Adds nodes to a serializable descriptor from a <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="source">A <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/> to create descriptors from.</param>
            <param name="descriptor">The serializable descriptor to add node descriptors to.</param>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraphExtensions.AddDescriptor``2(Bonsai.Dag.DirectedGraph{``0,``1},Bonsai.Dag.DirectedGraphDescriptor{``0,``1})">
            <summary>
            Adds the contents of the specified graph descriptor to the <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="source">
            The directed graph on which to add the contents of <paramref name="descriptor"/>.
            </param>
            <param name="descriptor">
            The serializable descriptor whose contents should be added to the
            <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/>.
            </param>
        </member>
        <member name="M:Bonsai.Dag.DirectedGraphExtensions.ToDirectedGraph``2(Bonsai.Dag.DirectedGraphDescriptor{``0,``1})">
            <summary>
            Creates a directed graph from a <see cref="T:Bonsai.Dag.DirectedGraphDescriptor`2{T,U}"/>.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="source">
            A <see cref="T:Bonsai.Dag.DirectedGraphDescriptor`2{T,U}"/> to create a directed graph from.
            </param>
            <returns>
            A <see cref="T:Bonsai.Dag.DirectedGraph`2{T,U}"/> that contains all the node
            and edge label values specified in the descriptor.
            </returns>
        </member>
        <member name="T:Bonsai.Dag.Edge">
            <summary>
            Provides static methods for creating edge objects.
            </summary>
        </member>
        <member name="M:Bonsai.Dag.Edge.Create``2(Bonsai.Dag.Node{``0,``1},``1)">
            <summary>
            Creates a new directed graph labeled edge.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
            <param name="target">The node instance that is the target of the edge.</param>
            <param name="label">The value of the edge label.</param>
            <returns>A labeled edge targeting the specified node.</returns>
        </member>
        <member name="T:Bonsai.Dag.Edge`2">
            <summary>
            Represents an outgoing labeled edge in a directed graph.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
        </member>
        <member name="M:Bonsai.Dag.Edge`2.#ctor(Bonsai.Dag.Node{`0,`1},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Dag.Edge`2{T,U}"/> class with
            the specified <paramref name="target"/> node and <paramref name="label"/>.
            </summary>
            <param name="target">
            The <see cref="T:Bonsai.Dag.Node`2{T,U}"/> instance that is the target
            of the edge.
            </param>
            <param name="label">The value of the edge label.</param>
        </member>
        <member name="M:Bonsai.Dag.Edge`2.ToString">
            <summary>
            Returns a string that represents this <see cref="T:Bonsai.Dag.Edge`2{T,U}"/> instance.
            </summary>
            <returns>
            The string representation of this <see cref="T:Bonsai.Dag.Edge`2{T,U}"/> object.
            </returns>
        </member>
        <member name="P:Bonsai.Dag.Edge`2.Label">
            <summary>
            Gets the value of the <see cref="T:Bonsai.Dag.Edge`2{T,U}"/> label.
            </summary>
        </member>
        <member name="P:Bonsai.Dag.Edge`2.Target">
            <summary>
            Gets the <see cref="T:Bonsai.Dag.Node`2{T,U}"/> instance that is the
            target of the <see cref="T:Bonsai.Dag.Edge`2{T,U}"/>.
            </summary>
        </member>
        <member name="T:Bonsai.Dag.EdgeCollection`2">
            <summary>
            Represents a collection of outgoing labeled edges in a directed graph.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
        </member>
        <member name="T:Bonsai.Dag.EdgeDescriptor`1">
            <summary>
            Represents a serializable descriptor of an edge connecting two nodes in a directed graph.
            </summary>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
        </member>
        <member name="M:Bonsai.Dag.EdgeDescriptor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Dag.EdgeDescriptor`1{T}"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Dag.EdgeDescriptor`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Dag.EdgeDescriptor`1{T}"/> class
            with the specified indices for source and target nodes and a label value.
            </summary>
            <param name="from">The zero-based index of the node that is the source of the edge.</param>
            <param name="to">The zero-based index of the node that is the target of the edge.</param>
            <param name="label">The value of the edge label.</param>
        </member>
        <member name="P:Bonsai.Dag.EdgeDescriptor`1.From">
            <summary>
            Gets or sets the zero-based index of the node that is the source of the edge.
            </summary>
        </member>
        <member name="P:Bonsai.Dag.EdgeDescriptor`1.To">
            <summary>
            Gets or sets the zero-based index of the node that is the target of the edge.
            </summary>
        </member>
        <member name="P:Bonsai.Dag.EdgeDescriptor`1.Label">
            <summary>
            Gets or sets the value of the edge label.
            </summary>
        </member>
        <member name="T:Bonsai.Dag.Node`2">
            <summary>
            Represents a labeled node in a directed graph.
            </summary>
            <typeparam name="TNodeValue">The type of the labels associated with graph nodes.</typeparam>
            <typeparam name="TEdgeLabel">The type of the labels associated with graph edges.</typeparam>
        </member>
        <member name="M:Bonsai.Dag.Node`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Dag.Node`2{T,U}"/> class with
            the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value of the node label.</param>
        </member>
        <member name="M:Bonsai.Dag.Node`2.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:Bonsai.Dag.Node`2{T,U}"/> instance.
            </summary>
            <returns>
            The string representation of this <see cref="T:Bonsai.Dag.Node`2{T,U}"/> object.
            </returns>
        </member>
        <member name="P:Bonsai.Dag.Node`2.Value">
            <summary>
            Gets the value of the <see cref="T:Bonsai.Dag.Node`2{T,U}"/> label.
            </summary>
        </member>
        <member name="P:Bonsai.Dag.Node`2.Successors">
            <summary>
            Gets the collection of successor edges leaving this node.
            </summary>
        </member>
        <member name="T:Bonsai.DesignTypes">
            <summary>
            Provides assembly qualified names for well-known designer types.
            </summary>
        </member>
        <member name="F:Bonsai.DesignTypes.SliderEditor">
            <summary>
            The assembly qualified name of a UI editor that can edit numeric values
            using a visual slider bar. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.DesignTypes.NumericUpDownEditor">
            <summary>
            The assembly qualified name of a UI editor that can edit numeric values
            using a numeric spin box. This field is read-only.
            </summary>
        </member>
        <member name="F:Bonsai.DesignTypes.MultilineStringEditor">
            <summary>
            The assembly qualified name of a UI editor that can edit multiline string
            values using a text box. This field is read-only.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.CombineLatest">
            <summary>
            Represents a combinator that combines values from the source sequences whenever
            any of the sequences produces an element.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.CombineLatest.Process``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Merges the specified sources into one observable sequence by emitting a tuple with
            the latest source elements whenever any of the observable sequences produces an
            element.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <param name="source1">The first observable source.</param>
            <param name="source2">The second observable source.</param>
            <returns>
            An observable sequence containing the result of combining the latest elements of the
            sources into tuples.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.CombineLatest.Process``3(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2})">
            <summary>
            Merges the specified sources into one observable sequence by emitting a tuple with
            the latest source elements whenever any of the observable sequences produces an
            element.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
            <param name="source1">The first observable source.</param>
            <param name="source2">The second observable source.</param>
            <param name="source3">The third observable source.</param>
            <returns>
            An observable sequence containing the result of combining the latest elements of the
            sources into tuples.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.CombineLatest.Process``4(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3})">
            <summary>
            Merges the specified sources into one observable sequence by emitting a tuple with
            the latest source elements whenever any of the observable sequences produces an
            element.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
            <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
            <param name="source1">The first observable source.</param>
            <param name="source2">The second observable source.</param>
            <param name="source3">The third observable source.</param>
            <param name="source4">The fourth observable source.</param>
            <returns>
            An observable sequence containing the result of combining the latest elements of the
            sources into tuples.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.CombineLatest.Process``5(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4})">
            <summary>
            Merges the specified sources into one observable sequence by emitting a tuple with
            the latest source elements whenever any of the observable sequences produces an
            element.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
            <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
            <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
            <param name="source1">The first observable source.</param>
            <param name="source2">The second observable source.</param>
            <param name="source3">The third observable source.</param>
            <param name="source4">The fourth observable source.</param>
            <param name="source5">The fifth observable source.</param>
            <returns>
            An observable sequence containing the result of combining the latest elements of the
            sources into tuples.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.CombineLatest.Process``6(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5})">
            <summary>
            Merges the specified sources into one observable sequence by emitting a tuple with
            the latest source elements whenever any of the observable sequences produces an
            element.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
            <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
            <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
            <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
            <param name="source1">The first observable source.</param>
            <param name="source2">The second observable source.</param>
            <param name="source3">The third observable source.</param>
            <param name="source4">The fourth observable source.</param>
            <param name="source5">The fifth observable source.</param>
            <param name="source6">The sixth observable source.</param>
            <returns>
            An observable sequence containing the result of combining the latest elements of the
            sources into tuples.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.CombineLatest.Process``7(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6})">
            <summary>
            Merges the specified sources into one observable sequence by emitting a tuple with
            the latest source elements whenever any of the observable sequences produces an
            element.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
            <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
            <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
            <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
            <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
            <param name="source1">The first observable source.</param>
            <param name="source2">The second observable source.</param>
            <param name="source3">The third observable source.</param>
            <param name="source4">The fourth observable source.</param>
            <param name="source5">The fifth observable source.</param>
            <param name="source6">The sixth observable source.</param>
            <param name="source7">The seventh observable source.</param>
            <returns>
            An observable sequence containing the result of combining the latest elements of the
            sources into tuples.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.CombineLatest.Process``1(System.IObservable{``0},System.IObservable{``0},System.IObservable{``0}[])">
            <summary>
            Merges the specified sources into one observable sequence by emitting a list with
            the latest source elements whenever any of the observable sequences produces an
            element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="first">The first observable sequence.</param>
            <param name="second">The second observable sequence.</param>
            <param name="remainder">The remaining observable sequences to combine.</param>
            <returns>
            An observable sequence containing the result of combining the latest elements of the
            sources into lists.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.CombineLatest.Process``1(System.IObservable{System.IObservable{``0}})">
            <summary>
            Merges elements from all inner observable sequences into one observable sequence by emitting
            a list with the elements of each sequence whenever any of the sequences produces a new element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="sources">The observable sequence of inner observable sequences.</param>
            <returns>
            An observable sequence containing the result of combining the latest elements of the
            inner sequences into lists.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.Amb">
            <summary>
            Represents a combinator which propagates the observable sequence that reacts first.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Amb.Process``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Propagates the observable sequence that reacts first.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="first">First observable sequence.</param>
            <param name="second">Second observable sequence.</param>
            <returns>
            An observable sequence that surfaces either of the given sequences, whichever
            reacted first.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Amb.Process``1(System.IObservable{``0}[])">
            <summary>
            Propagates the observable sequence that reacts first.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="sources">Observable sources competing to react first.</param>
            <returns>
            An observable sequence that surfaces any of the given sequences, whichever
            reacted first.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.DistinctUntilChanged">
            <summary>
            Represents a combinator that propagates only distinct contiguous elements
            of an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.DistinctUntilChanged.Process``1(System.IObservable{``0})">
            <summary>
            Returns an observable sequence that contains only distinct contiguous elements.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An observable sequence to retain distinct contiguous elements for.</param>
            <returns>
             An observable sequence only containing the distinct contiguous elements from
             the source sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Reactive.Throttle">
            <summary>
            Represents a combinator that ignores elements from an observable sequence which
            are followed by another element before the specified duration elapses.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Throttle.Process``1(System.IObservable{``0})">
            <summary>
            Ignores elements from an observable sequence which are followed by another element
            before the specified duration elapses.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to throttle.</param>
            <returns>The throttled sequence.</returns>
        </member>
        <member name="P:Bonsai.Reactive.Throttle.DueTime">
            <summary>
            Gets or sets the time interval that must elapse before a value is propagated.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.Throttle.DueTimeXml">
            <summary>
            Gets or sets the XML serializable representation of the throttling duration.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.TimeInterval">
            <summary>
            Represents a combinator that records the time interval between consecutive
            values produced by an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.TimeInterval.Process``1(System.IObservable{``0})">
            <summary>
            Records the time interval between consecutive values produced by an
            observable sequence using a high resolution timer, if available.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to record time intervals for.</param>
            <returns>An observable sequence with time interval information on elements.</returns>
        </member>
        <member name="T:Bonsai.Reactive.Zip">
            <summary>
            Represents a combinator that combines values from the source sequences whenever
            all of the sequences have produced an element.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Zip.Process``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Merges the specified sources into one observable sequence by emitting a list with
            the elements of the observable sequences whenever all of the sequences have produced
            a new element.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <param name="source1">The first observable source.</param>
            <param name="source2">The second observable source.</param>
            <returns>
            An observable sequence containing the result of combining elements of the sources into tuples.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Zip.Process``3(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2})">
            <summary>
            Merges the specified sources into one observable sequence by emitting a list with
            the elements of the observable sequences whenever all of the sequences have produced
            a new element.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
            <param name="source1">The first observable source.</param>
            <param name="source2">The second observable source.</param>
            <param name="source3">The third observable source.</param>
            <returns>
            An observable sequence containing the result of combining elements of the sources into tuples.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Zip.Process``4(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3})">
            <summary>
            Merges the specified sources into one observable sequence by emitting a list with
            the elements of the observable sequences whenever all of the sequences have produced
            a new element.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
            <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
            <param name="source1">The first observable source.</param>
            <param name="source2">The second observable source.</param>
            <param name="source3">The third observable source.</param>
            <param name="source4">The fourth observable source.</param>
            <returns>
            An observable sequence containing the result of combining elements of the sources into tuples.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Zip.Process``5(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4})">
            <summary>
            Merges the specified sources into one observable sequence by emitting a list with
            the elements of the observable sequences whenever all of the sequences have produced
            a new element.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
            <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
            <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
            <param name="source1">The first observable source.</param>
            <param name="source2">The second observable source.</param>
            <param name="source3">The third observable source.</param>
            <param name="source4">The fourth observable source.</param>
            <param name="source5">The fifth observable source.</param>
            <returns>
            An observable sequence containing the result of combining elements of the sources into tuples.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Zip.Process``6(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5})">
            <summary>
            Merges the specified sources into one observable sequence by emitting a list with
            the elements of the observable sequences whenever all of the sequences have produced
            a new element.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
            <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
            <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
            <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
            <param name="source1">The first observable source.</param>
            <param name="source2">The second observable source.</param>
            <param name="source3">The third observable source.</param>
            <param name="source4">The fourth observable source.</param>
            <param name="source5">The fifth observable source.</param>
            <param name="source6">The sixth observable source.</param>
            <returns>
            An observable sequence containing the result of combining elements of the sources into tuples.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Zip.Process``7(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6})">
            <summary>
            Merges the specified sources into one observable sequence by emitting a list with
            the elements of the observable sequences whenever all of the sequences have produced
            a new element.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
            <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
            <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
            <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
            <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
            <param name="source1">The first observable source.</param>
            <param name="source2">The second observable source.</param>
            <param name="source3">The third observable source.</param>
            <param name="source4">The fourth observable source.</param>
            <param name="source5">The fifth observable source.</param>
            <param name="source6">The sixth observable source.</param>
            <param name="source7">The seventh observable source.</param>
            <returns>
            An observable sequence containing the result of combining elements of the sources into tuples.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Zip.Process``1(System.IObservable{``0},System.IObservable{``0},System.IObservable{``0}[])">
            <summary>
            Merges the specified sources into one observable sequence by emitting a list with
            the elements of the observable sequences whenever all of the sequences have produced
            a new element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="first">The first observable sequence.</param>
            <param name="second">The second observable sequence.</param>
            <param name="remainder">The remaining observable sequences to combine.</param>
            <returns>
            An observable sequence containing the result of combining the elements of the
            sources into lists.
            </returns>
        </member>
        <member name="M:Bonsai.Reactive.Zip.Process``1(System.IObservable{System.IObservable{``0}})">
            <summary>
            Merges elements from all inner observable sequences into one observable sequence by emitting
            a list with the elements of each sequence whenever all of the sequences have produced
            a new element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="sources">The observable sequence of inner observable sequences.</param>
            <returns>
            An observable sequence containing the result of combining the elements of the
            inner sequences into lists.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.ExpressionBuilderArgument">
            <summary>
            Represents a workflow argument assignment. This class determines the index of a
            workflow connection and is used to specify the order of input connections to
            any given node.
            </summary>
        </member>
        <member name="F:Bonsai.Expressions.ExpressionBuilderArgument.ArgumentNamePrefix">
            <summary>
            The prefix that starts every input argument name.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderArgument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.ExpressionBuilderArgument"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderArgument.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.ExpressionBuilderArgument"/> class with
            the specified argument index.
            </summary>
            <param name="index">The zero-based index of the input argument.</param>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderArgument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.ExpressionBuilderArgument"/> class with
            the specified argument name.
            </summary>
            <param name="name">
            The name of the input argument. Arbitrary named arguments are not supported, so all
            names must start with the <see cref="F:Bonsai.Expressions.ExpressionBuilderArgument.ArgumentNamePrefix"/> followed by the one-based
            argument index.
            </param>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderArgument.CompareTo(Bonsai.Expressions.ExpressionBuilderArgument)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            Less than zero means this object is less than the <paramref name="other"/>
            parameter. Zero means this object is equal to <paramref name="other"/>.
            Greater than zero means this object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderArgument.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderArgument.op_LessThan(Bonsai.Expressions.ExpressionBuilderArgument,Bonsai.Expressions.ExpressionBuilderArgument)">
            <summary>
            Tests whether an <see cref="T:Bonsai.Expressions.ExpressionBuilderArgument"/> object is less than
            another object of the same type.
            </summary>
            <param name="left">
            The <see cref="T:Bonsai.Expressions.ExpressionBuilderArgument"/> object on the left of the less than operator.
            </param>
            <param name="right">
            The <see cref="T:Bonsai.Expressions.ExpressionBuilderArgument"/> object on the right of the less than operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> has an index smaller than <paramref name="right"/>;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderArgument.op_GreaterThan(Bonsai.Expressions.ExpressionBuilderArgument,Bonsai.Expressions.ExpressionBuilderArgument)">
            <summary>
            Tests whether an <see cref="T:Bonsai.Expressions.ExpressionBuilderArgument"/> object is greater than
            another object of the same type.
            </summary>
            <param name="left">
            The <see cref="T:Bonsai.Expressions.ExpressionBuilderArgument"/> object on the left of the greater than operator.
            </param>
            <param name="right">
            The <see cref="T:Bonsai.Expressions.ExpressionBuilderArgument"/> object on the right of the greater than operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> has an index greater than <paramref name="right"/>;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Bonsai.Expressions.ExpressionBuilderArgument.Index">
            <summary>
            Gets or sets the zero-based index of the input argument.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.ExpressionBuilderArgument.Name">
            <summary>
            Gets or sets the name of the input argument. Arbitrary named arguments are not supported, so all
            names must start with the <see cref="F:Bonsai.Expressions.ExpressionBuilderArgument.ArgumentNamePrefix"/> followed by the one-based
            argument index.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.SampleInterval">
            <summary>
            Represents a combinator that samples the observable sequence at each interval. Upon each
            sampling tick, the latest element (if any) in the source sequence during the last sampling
            interval is sent to the resulting sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.SampleInterval.Process``1(System.IObservable{``0})">
            <summary>
            Samples the observable sequence at each interval.  Upon each sampling tick,
            the latest element (if any) in the source sequence during the last sampling
            interval is sent to the resulting sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to sample.</param>
            <returns>The sampled observable sequence.</returns>
        </member>
        <member name="P:Bonsai.Reactive.SampleInterval.Interval">
            <summary>
            Gets or sets the interval at which to sample. If this value is equal to
            <see cref="F:System.TimeSpan.Zero"/>, the scheduler will continuously sample the stream.
            </summary>
        </member>
        <member name="P:Bonsai.Reactive.SampleInterval.IntervalXml">
            <summary>
            Gets or sets the XML serializable representation of the interval.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.TakeUntil">
            <summary>
            Represents a combinator that returns elements from an observable sequence only until
            the second sequence produces an element.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.TakeUntil.Process``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Returns elements from an observable sequence only until the second sequence
            produces an element.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TOther">
            The type of the elements in the other sequence that indicates the end of
            take behavior.
            </typeparam>
            <param name="source">The sequence to take elements from.</param>
            <param name="other">
            The observable sequence that terminates propagation of elements of the source sequence.
            </param>
            <returns>
            An observable sequence containing the elements of the source sequence up
            to the point the other sequence interrupted further propagation.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.ExpressionBuilderGraph">
            <summary>
            Represents a directed acyclic graph of expression generator nodes. Edges between generator nodes
            represent input assignments that chain the output of one generator to the input of the next.
            The order of the inputs is determined by the indices of the input arguments.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.ExpressionBuilderGraphExtensions">
            <summary>
            Provides a set of static methods for serializing, building and otherwise manipulating
            expression builder workflows.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.Build(Bonsai.Expressions.ExpressionBuilder,System.Linq.Expressions.Expression[])">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of zero or more
            input arguments. The result can be chained with other builders in a workflow.
            </summary>
            <param name="builder">The expression builder.</param>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.IsBuildDependency(Bonsai.Expressions.ExpressionBuilder)">
            <summary>
            Determines whether the specified <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> represents a build dependency.
            </summary>
            <param name="builder">The <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> to test.</param>
            <returns>
            true if the specified <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> represents a
            build dependency; otherwise, false.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.SetWorkflowProperty(Bonsai.Expressions.ExpressionBuilderGraph,System.String,System.Object)">
            <summary>
            Sets the value of a workflow property to a different value.
            </summary>
            <param name="source">The expression builder workflow for which to set the property.</param>
            <param name="name">The name of the workflow property.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.InspectErrors(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Redirects any build or execution errors signaled by <see cref="T:Bonsai.Expressions.InspectBuilder"/> nodes in
            the specified expression builder workflow into an empty observable sequence.
            </summary>
            <param name="source">The expression builder workflow for which to redirect errors.</param>
            <returns>
            An observable sequence with no elements except for error termination messages.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.InspectErrorsEx(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Redirects any build or execution errors signaled by <see cref="T:Bonsai.Expressions.InspectBuilder"/> nodes in
            the specified expression builder workflow into a single observable sequence.
            </summary>
            <param name="source">The expression builder workflow for which to redirect errors.</param>
            <returns>
            An observable sequence where all elements are errors raised by
            <see cref="T:Bonsai.Expressions.InspectBuilder"/> nodes.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.Build(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Generates an expression tree from the specified expression builder workflow.
            </summary>
            <param name="source">
            The expression builder workflow for which to generate the expression tree.
            </param>
            <returns>
            An <see cref="T:System.Linq.Expressions.Expression"/> tree representing the evaluation of the full
            expression builder workflow.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.Build(Bonsai.Expressions.ExpressionBuilderGraph,Bonsai.Expressions.ExpressionBuilder)">
            <summary>
            Generates an expression tree from the specified expression builder workflow
            evaluated up to the specified build target.
            </summary>
            <param name="source">
            The expression builder workflow for which to generate the expression tree.
            </param>
            <param name="buildTarget">
            The expression builder node up to which the workflow will be evaluated.
            </param>
            <returns>
            An <see cref="T:System.Linq.Expressions.Expression"/> tree representing the evaluation of the expression
            builder workflow up to the specified <paramref name="buildTarget"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.BuildObservable(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Builds and compiles an expression builder workflow into an observable that can be
            subscribed for its side-effects.
            </summary>
            <param name="source">The expression builder workflow to compile.</param>
            <returns>
            An observable sequence with no elements except for termination messages.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.Convert(System.Collections.Generic.IEnumerable{Bonsai.Dag.Node{Bonsai.Expressions.ExpressionBuilder,Bonsai.Expressions.ExpressionBuilderArgument}},System.Func{Bonsai.Expressions.ExpressionBuilder,Bonsai.Expressions.ExpressionBuilder})">
            <summary>
            Converts the specified expression builder workflow into an equivalent representation
            where each node has been replaced by its projection as specified by a selector function.
            </summary>
            <param name="source">The expression builder workflow to convert.</param>
            <param name="selector">A transform function to apply to each node.</param>
            <returns>
            A new expression builder workflow where all nodes have been replaced by their
            projections as specified by the selector function.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.Convert(System.Collections.Generic.IEnumerable{Bonsai.Dag.Node{Bonsai.Expressions.ExpressionBuilder,Bonsai.Expressions.ExpressionBuilderArgument}},System.Func{Bonsai.Expressions.ExpressionBuilder,Bonsai.Expressions.ExpressionBuilder},System.Boolean)">
            <summary>
            Converts the specified expression builder workflow into an equivalent representation
            where each node has been replaced by its projection as specified by a selector function.
            </summary>
            <param name="source">The expression builder workflow to convert.</param>
            <param name="selector">A transform function to apply to each node.</param>
            <param name="recurse">
            A value indicating whether to recurse the conversion into nested workflows.
            </param>
            <returns>
            A new expression builder workflow where all nodes have been replaced by their
            projections as specified by the selector function.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.ToInspectableGraph(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Converts the specified expression builder workflow into an equivalent representation
            where all the nodes are decorated by <see cref="T:Bonsai.Expressions.InspectBuilder"/> instances that allow
            for runtime inspection and error redirection of workflow values.
            </summary>
            <param name="source">The expression builder workflow to convert.</param>
            <returns>
            A new expression builder workflow where all nodes have been decorated by
            <see cref="T:Bonsai.Expressions.InspectBuilder"/> instances.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.ToInspectableGraph(Bonsai.Expressions.ExpressionBuilderGraph,System.Boolean)">
            <summary>
            Converts the specified expression builder workflow into an equivalent representation
            where all the nodes are decorated by <see cref="T:Bonsai.Expressions.InspectBuilder"/> instances that allow
            for runtime inspection and error redirection of workflow values.
            </summary>
            <param name="source">The expression builder workflow to convert.</param>
            <returns>
            <param name="recurse">
            A value indicating whether to recurse the conversion into nested workflows.
            </param>
            A new expression builder workflow where all nodes have been decorated by
            <see cref="T:Bonsai.Expressions.InspectBuilder"/> instances.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.FromInspectableGraph(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Converts the specified expression builder workflow into an equivalent representation
            where all the <see cref="T:Bonsai.Expressions.InspectBuilder"/> nodes have been replaced by their decorated
            children.
            </summary>
            <param name="source">The expression builder workflow to convert.</param>
            <returns>
            A new expression builder workflow where all <see cref="T:Bonsai.Expressions.InspectBuilder"/> nodes have
            been replaced by their decorated children.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.FromInspectableGraph(System.Collections.Generic.IEnumerable{Bonsai.Dag.Node{Bonsai.Expressions.ExpressionBuilder,Bonsai.Expressions.ExpressionBuilderArgument}},System.Boolean)">
            <summary>
            Converts the specified expression builder workflow into an equivalent representation
            where all the <see cref="T:Bonsai.Expressions.InspectBuilder"/> nodes have been replaced by their decorated
            children.
            </summary>
            <param name="source">The expression builder workflow to convert.</param>
            <param name="recurse">
            A value indicating whether to recurse the conversion into nested workflows.
            </param>
            <returns>
            A new expression builder workflow where all <see cref="T:Bonsai.Expressions.InspectBuilder"/> nodes have
            been replaced by their decorated children.
            </returns>
        </member>
        <member name="M:Bonsai.Expressions.ExpressionBuilderGraphExtensions.ToDescriptor(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Converts an expression builder workflow into its serializable representation.
            </summary>
            <param name="source">The expression builder workflow to convert.</param>
            <returns>
            The serializable descriptor of the specified expression builder workflow.
            </returns>
        </member>
        <member name="T:Bonsai.Expressions.InspectBuilder">
            <summary>
            Represents an expression builder that replays the latest notification from all the
            subscriptions made to its decorated builder.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.InspectBuilder.#ctor(Bonsai.Expressions.ExpressionBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.InspectBuilder"/> class with the
            specified expression builder.
            </summary>
            <param name="builder">
            The expression builder whose notifications will be replayed by this inspector.
            </param>
        </member>
        <member name="M:Bonsai.Expressions.InspectBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="P:Bonsai.Expressions.InspectBuilder.Builder">
            <summary>
            Gets the expression builder that is being decorated by this inspector.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.InspectBuilder.ObservableType">
            <summary>
            Gets the type of the elements in the output observable sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.InspectBuilder.Output">
            <summary>
            Gets an observable sequence that multicasts notifications from all
            the subscriptions made to the output of the decorated expression builder.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.InspectBuilder.Error">
            <summary>
            Gets an observable sequence that multicasts errors and termination
            messages from all subscriptions made to the output of the decorated
            expression builder.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.InspectBuilder.ErrorEx">
            <summary>
            Gets an observable sequence that multicasts error notifications
            from all subscriptions made to the output of the decorated
            expression builder.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.InspectBuilder.ArgumentRange">
            <summary>
            Gets the range of input arguments that the decorated expression builder accepts.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.InspectBuilder.Name">
            <summary>
            Gets the display name of the decorated expression builder.
            </summary>
        </member>
        <member name="T:Bonsai.Expressions.SourceBuilder">
            <summary>
            Represents an expression builder which uses a specified source instance
            to generate an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.SourceBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Expressions.SourceBuilder"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.Expressions.SourceBuilder.Build(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node from a collection of input arguments.
            The result can be chained with other builders in a workflow.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> tree node.</returns>
        </member>
        <member name="M:Bonsai.Expressions.SourceBuilder.BuildCombinator(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> node that will be combined with any
            existing property mappings to produce the final output of the expression builder.
            </summary>
            <param name="arguments">
            A collection of <see cref="T:System.Linq.Expressions.Expression"/> nodes that represents the input arguments.
            </param>
            <returns>
            An <see cref="T:System.Linq.Expressions.Expression"/> tree node that represents the source output.
            </returns>
        </member>
        <member name="P:Bonsai.Expressions.SourceBuilder.Name">
            <summary>
            Gets the display name of the source.
            </summary>
        </member>
        <member name="P:Bonsai.Expressions.SourceBuilder.Generator">
            <summary>
            Gets or sets the source instance used to generate
            observable sequences.
            </summary>
        </member>
        <member name="T:Bonsai.Reactive.Sample">
            <summary>
            Represents a combinator that samples an observable sequence using a second sequence
            producing sampling ticks.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Sample.Process``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Samples the source observable sequence using a sampler observable sequence
            producing sampling ticks. Upon each sampling tick, the latest element (if any)
            in the source sequence during the last sampling interval is sent to the
            resulting sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TOther">The type of the elements in the sampling sequence.</typeparam>
            <param name="source">The source sequence to sample.</param>
            <param name="other">The sampling tick sequence.</param>
            <returns>The sampled observable sequence.</returns>
        </member>
        <member name="T:Bonsai.Reactive.Timestamp">
            <summary>
            Represents a combinator that records the timestamp for each element produced by
            an observable sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Reactive.Timestamp.Process``1(System.IObservable{``0})">
            <summary>
            Records the timestamp for each element produced by an observable sequence
            using a high resolution timer, if available.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence to timestamp elements for.</param>
            <returns>An observable sequence with timestamp information on elements.</returns>
        </member>
        <member name="T:Bonsai.WorkflowBuildException">
            <summary>
            Represents errors that occur during the build phase of an expression builder workflow.
            </summary>
        </member>
        <member name="M:Bonsai.WorkflowBuildException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowBuildException"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.WorkflowBuildException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowBuildException"/> class with
            a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Bonsai.WorkflowBuildException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowBuildException"/> class with
            a specified error message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Bonsai.WorkflowBuildException.#ctor(System.String,Bonsai.Expressions.ExpressionBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowBuildException"/> class with
            a specified error message and a reference to the <see cref="T:Bonsai.Expressions.ExpressionBuilder"/>
            that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="builder">
            The <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> that is the cause of the current exception, or
            a null reference (Nothing in Visual Basic) if no builder is specified.
            </param>
        </member>
        <member name="M:Bonsai.WorkflowBuildException.#ctor(System.String,Bonsai.Expressions.ExpressionBuilder,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowBuildException"/> class with a
            specified error message and a reference to both the <see cref="T:Bonsai.Expressions.ExpressionBuilder"/>
            and the inner exception that caused this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="builder">
            The <see cref="T:Bonsai.Expressions.ExpressionBuilder"/> that is the cause of the current exception, or
            a null reference (Nothing in Visual Basic) if no builder is specified.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Bonsai.WorkflowBuildException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowBuildException"/> class with
            serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about
            the source or destination.
            </param>
        </member>
        <member name="T:Bonsai.ElementCategory">
            <summary>
            Specifies the category of a workflow element.
            </summary>
        </member>
        <member name="F:Bonsai.ElementCategory.Source">
            <summary>
            A generator of observable sequences of data elements.
            </summary>
        </member>
        <member name="F:Bonsai.ElementCategory.Condition">
            <summary>
            A combinator that propagates only the elements of an observable sequence
            matching some specific condition.
            </summary>
        </member>
        <member name="F:Bonsai.ElementCategory.Transform">
            <summary>
            A combinator that transforms every element of an observable sequence into
            a new data element.
            </summary>
        </member>
        <member name="F:Bonsai.ElementCategory.Sink">
            <summary>
            A combinator that introduces side effects on an observable sequence without
            modifying its elements.
            </summary>
        </member>
        <member name="F:Bonsai.ElementCategory.Nested">
            <summary>
            A combinator that allows the user to specify its operation in terms of a nested
            workflow.
            </summary>
        </member>
        <member name="F:Bonsai.ElementCategory.Property">
            <summary>
            A generator of observable elements that can be used as a named workflow property.
            </summary>
        </member>
        <member name="F:Bonsai.ElementCategory.Combinator">
            <summary>
            An operator that can be applied to one or more observable sequences to produce a new
            observable sequence.
            </summary>
        </member>
        <member name="F:Bonsai.ElementCategory.Workflow">
            <summary>
            A set of operators defining a data processing workflow.
            </summary>
        </member>
        <member name="T:Bonsai.PrecisionAttribute">
            <summary>
            Specifies the number of decimal places and the smallest incremental step that
            should be used when editing values for a property.
            </summary>
        </member>
        <member name="M:Bonsai.PrecisionAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.PrecisionAttribute"/> with the
            specified number of decimal places and the smallest editor step increment.
            </summary>
            <param name="decimalPlaces">
            The number of decimal places to display in the editor.
            </param>
            <param name="increment">
            The <see cref="T:System.Int32"/> value by which to increment or decrement the current
            value on each editor step.
            </param>
        </member>
        <member name="M:Bonsai.PrecisionAttribute.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.PrecisionAttribute"/> with the
            specified number of decimal places and the smallest editor step increment.
            </summary>
            <param name="decimalPlaces">
            The number of decimal places to display in the editor.
            </param>
            <param name="increment">
            The <see cref="T:System.Double"/> value by which to increment or decrement the current
            value on each editor step.
            </param>
        </member>
        <member name="M:Bonsai.PrecisionAttribute.#ctor(System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.PrecisionAttribute"/> with the
            specified number of decimal places and the smallest editor step increment.
            </summary>
            <param name="decimalPlaces">
            The number of decimal places to display in the editor.
            </param>
            <param name="increment">
            The <see cref="T:System.Decimal"/> value by which to increment or decrement the current
            value on each editor step.
            </param>
        </member>
        <member name="P:Bonsai.PrecisionAttribute.DecimalPlaces">
            <summary>
            Gets the number of decimal places to display in the editor.
            </summary>
        </member>
        <member name="P:Bonsai.PrecisionAttribute.Increment">
            <summary>
            Gets the smallest value by which to increment or decrement the current value
            on each editor step.
            </summary>
        </member>
        <member name="T:Bonsai.RangeAttribute">
            <summary>
            Specifies the valid range of values for a numeric property.
            </summary>
        </member>
        <member name="F:Bonsai.RangeAttribute.Default">
            <summary>
            Specifies the default value for the <see cref="T:Bonsai.RangeAttribute"/>. This field is read-only.
            </summary>
        </member>
        <member name="M:Bonsai.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.RangeAttribute"/> class with the
            specified minimum and maximum values.
            </summary>
            <param name="min">An <see cref="T:System.Int32"/> that is the minimum value.</param>
            <param name="max">An <see cref="T:System.Int32"/> that is the maximum value.</param>
        </member>
        <member name="M:Bonsai.RangeAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.RangeAttribute"/> class with the
            specified minimum and maximum values.
            </summary>
            <param name="min">A <see cref="T:System.Single"/> that is the minimum value.</param>
            <param name="max">A <see cref="T:System.Single"/> that is the maximum value.</param>
        </member>
        <member name="M:Bonsai.RangeAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.RangeAttribute"/> class with the
            specified minimum and maximum values.
            </summary>
            <param name="min">A <see cref="T:System.Double"/> that is the minimum value.</param>
            <param name="max">A <see cref="T:System.Double"/> that is the maximum value.</param>
        </member>
        <member name="M:Bonsai.RangeAttribute.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.RangeAttribute"/> class with the
            specified minimum and maximum values.
            </summary>
            <param name="min">A <see cref="T:System.Decimal"/> that is the minimum value.</param>
            <param name="max">A <see cref="T:System.Decimal"/> that is the maximum value.</param>
        </member>
        <member name="P:Bonsai.RangeAttribute.Minimum">
            <summary>
            Gets the minimum value of the property this attribute is bound to.
            </summary>
        </member>
        <member name="P:Bonsai.RangeAttribute.Maximum">
            <summary>
            Gets the maximum value of the property this attribute is bound to.
            </summary>
        </member>
        <member name="T:Bonsai.Sink">
            <summary>
            Represents a generic operation which introduces side effects on an observable
            sequence without modifying its elements.
            </summary>
        </member>
        <member name="T:Bonsai.Sink`1">
            <summary>
            Represents an operation which introduces side effects on observable sequences
            of a specific type without modifying its elements.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
        </member>
        <member name="T:Bonsai.TypeVisualizerAttribute">
            <summary>
            Determines the type of visualizer used to display the target of the attribute.
            </summary>
        </member>
        <member name="M:Bonsai.TypeVisualizerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.TypeVisualizerAttribute"/> class with the
            specified visualizer type.
            </summary>
            <param name="visualizer">
            The <see cref="T:System.Type"/> of a visualizer that can be used to display the type
            this attribute is bound to.
            </param>
        </member>
        <member name="M:Bonsai.TypeVisualizerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.TypeVisualizerAttribute"/> class with the
            specified visualizer type name.
            </summary>
            <param name="visualizerTypeName">
            A <see cref="T:System.String"/> specifying the assembly qualified name of a visualizer that can
            be used to display the type this attribute is bound to.
            </param>
        </member>
        <member name="P:Bonsai.TypeVisualizerAttribute.VisualizerTypeName">
            <summary>
            Gets the assembly qualified name of the visualizer class.
            </summary>
        </member>
        <member name="P:Bonsai.TypeVisualizerAttribute.TargetTypeName">
            <summary>
            Gets or sets the assembly qualified name of the type that is the target of the attribute.
            </summary>
        </member>
        <member name="P:Bonsai.TypeVisualizerAttribute.Target">
            <summary>
            Gets or sets the type that is the target of the attribute.
            </summary>
        </member>
        <member name="T:Bonsai.WorkflowBuilder">
            <summary>
            Represents an XML serializable expression builder workflow container.
            </summary>
        </member>
        <member name="M:Bonsai.WorkflowBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowBuilder"/> class.
            </summary>
        </member>
        <member name="M:Bonsai.WorkflowBuilder.#ctor(Bonsai.Expressions.ExpressionBuilderGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.WorkflowBuilder"/> class with the
            specified workflow instance.
            </summary>
            <param name="workflow">
            The <see cref="T:Bonsai.Expressions.ExpressionBuilderGraph"/> that will be used by this builder.
            </param>
        </member>
        <member name="P:Bonsai.WorkflowBuilder.Workflow">
            <summary>
            Gets the <see cref="T:Bonsai.Expressions.ExpressionBuilderGraph"/> instance used by this builder.
            </summary>
        </member>
    </members>
</doc>
